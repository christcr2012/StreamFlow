name: Binder Guard & Quality Gates

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  binder-quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Binder Guard
        id: guard
        run: npm run guard:binders
        continue-on-error: true
      
      - name: Upload Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: binder-reports
          path: ops/reports/
          retention-days: 30
      
      - name: Read Summary
        if: always()
        id: summary
        run: |
          if [ -f ops/reports/FINAL_SUMMARY.md ]; then
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            cat ops/reports/FINAL_SUMMARY.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
          if [ -f ops/reports/verify_binder_to_code.json ]; then
            API_FILES=$(jq -r '.summary.apiFiles' ops/reports/verify_binder_to_code.json)
            UI_FILES=$(jq -r '.summary.uiFiles' ops/reports/verify_binder_to_code.json)
            MAPPING=$(jq -r '.summary.mappingPct' ops/reports/verify_binder_to_code.json)
            echo "api_files=$API_FILES" >> $GITHUB_OUTPUT
            echo "ui_files=$UI_FILES" >> $GITHUB_OUTPUT
            echo "mapping=$MAPPING" >> $GITHUB_OUTPUT
          fi
      
      - name: Comment PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## üõ°Ô∏è Binder Guard Report\n\n';
            
            if (fs.existsSync('ops/reports/verify_binder_to_code.json')) {
              const verify = JSON.parse(fs.readFileSync('ops/reports/verify_binder_to_code.json', 'utf8'));
              const passed = verify.pass ? '‚úÖ PASSED' : '‚ùå FAILED';
              
              comment += `**Status:** ${passed}\n\n`;
              comment += '### Metrics\n\n';
              comment += `| Metric | Value |\n`;
              comment += `|--------|-------|\n`;
              comment += `| API Files | ${verify.summary.apiFiles} |\n`;
              comment += `| UI Files | ${verify.summary.uiFiles} |\n`;
              comment += `| Mapping Score | ${verify.summary.mappingPct}% |\n`;
              comment += `| Required | ‚â•95% |\n\n`;
            }
            
            if (fs.existsSync('ops/reports/self_heal_log.json')) {
              const heal = JSON.parse(fs.readFileSync('ops/reports/self_heal_log.json', 'utf8'));
              if (heal.failedCount > 0) {
                comment += '### üîß Self-Heal Summary\n\n';
                comment += `- Failed Binders: ${heal.failedCount}\n`;
                comment += `- Successfully Healed: ${heal.successCount}\n`;
                comment += `- Still Failed: ${heal.failedCount - heal.successCount}\n\n`;
              }
            }
            
            comment += '\nüìÑ Full reports available in workflow artifacts.\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Check Guard Result
        if: steps.guard.outcome == 'failure'
        run: |
          echo "‚ùå Binder guard failed. Quality gates not met."
          exit 1

