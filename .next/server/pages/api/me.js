"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/me";
exports.ids = ["pages/api/me"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fme&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fme.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fme&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fme.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_me_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/pages/api/me.ts */ \"(api-node)/./src/pages/api/me.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_me_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_me_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/me\",\n        pathname: \"/api/me\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_me_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/me\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/me\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fme&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fme.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// src/lib/prisma.ts\n\nconst prisma = global.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0\n});\nif (true) global.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9CQUFvQjtBQUMwQjtBQVF2QyxNQUFNQyxTQUNYQyxPQUFPRCxNQUFNLElBQ2IsSUFBSUQsd0RBQVlBLENBQUM7SUFDZkcsS0FBS0MsS0FBc0MsR0FBRztRQUFDO1FBQVM7UUFBUztLQUFPLEdBQUcsQ0FBUztBQUN0RixHQUFHO0FBRUwsSUFBSUEsSUFBcUMsRUFBRUYsT0FBT0QsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvbGliL3ByaXNtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL3ByaXNtYS50c1xuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSBcIkBwcmlzbWEvY2xpZW50XCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gQWxsb3cgZ2xvYmFsIGB2YXJgIHJlZGVjbGFyYXRpb24gaW4gZGV2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID1cbiAgZ2xvYmFsLnByaXNtYSA/P1xuICBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICBsb2c6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgPyBbXCJxdWVyeVwiLCBcImVycm9yXCIsIFwid2FyblwiXSA6IFtcImVycm9yXCJdLFxuICB9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgZ2xvYmFsLnByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJnbG9iYWwiLCJsb2ciLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/rbac.ts":
/*!*************************!*\
  !*** ./src/lib/rbac.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PERMS: () => (/* binding */ PERMS),\n/* harmony export */   assertPermission: () => (/* binding */ assertPermission),\n/* harmony export */   getEmailFromReq: () => (/* binding */ getEmailFromReq),\n/* harmony export */   getOrgIdFromReq: () => (/* binding */ getOrgIdFromReq)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n// src/lib/rbac.ts\n\n/**\n * Permission catalog. Keep codes in sync with seed.\n */ const PERMS = {\n    DASHBOARD_VIEW: \"dashboard:view\",\n    LEAD_READ: \"lead:read\",\n    LEAD_CREATE: \"lead:create\",\n    LEAD_UPDATE: \"lead:update\",\n    LEAD_DELETE: \"lead:delete\",\n    LEAD_EXPORT: \"lead:export\",\n    ROLES_MANAGE: \"roles:manage\",\n    BILLING_MANAGE: \"billing:manage\"\n};\n/**\n * Email that should bypass RBAC permission checks entirely.\n * If DEV_USER_EMAIL is set in the environment, any request from that\n * email address will be treated as having all permissions. This is\n * useful for development and automated testing. In production you\n * should leave DEV_USER_EMAIL unset.\n */ const DEV_USER_EMAIL = process.env.DEV_USER_EMAIL?.toLowerCase() || null;\n/**\n * Extract current user's email from cookie or header.\n * - Cookie: mv_user=<email>\n * - Header: x-mv-user: <email>  (useful for scripts/tests)\n */ function getEmailFromReq(req) {\n    const fromCookie = req.cookies?.mv_user;\n    const fromHeader = req.headers[\"x-mv-user\"] || req.headers[\"x-mvuser\"];\n    const raw = (Array.isArray(fromCookie) ? fromCookie[0] : fromCookie) ?? fromHeader ?? \"\";\n    const email = raw?.toString().trim().toLowerCase();\n    return email || null;\n}\n/** Look up orgId for current user (used to scope queries). */ async function getOrgIdFromReq(req) {\n    const email = getEmailFromReq(req);\n    if (!email) return null;\n    // Development bypass: if this is the dev user, return a fixed orgId\n    // if provided via DEV_ORG_ID, otherwise fall through to DB lookup.\n    if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n        // Use DEV_ORG_ID if provided, else null to indicate no org\n        const devOrg = process.env.DEV_ORG_ID;\n        if (devOrg) return devOrg;\n        // As a fallback, attempt to fetch the first org from the database\n        try {\n            const firstOrg = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.findFirst({\n                select: {\n                    id: true\n                }\n            });\n            return firstOrg?.id ?? null;\n        } catch  {\n            return null;\n        }\n    }\n    const u = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n        where: {\n            email\n        },\n        select: {\n            orgId: true\n        }\n    });\n    return u?.orgId ?? null;\n}\n/**\n * Fetch user's effective permissions from RBAC tables.\n * Falls back to legacy User.role for OWNER/MANAGER/STAFF convenience.\n */ async function getUserPermCodes(userId, legacyRole) {\n    const roleLinks = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacUserRole.findMany({\n        where: {\n            userId\n        },\n        select: {\n            roleId: true\n        }\n    });\n    const roleIds = roleLinks.map((r)=>r.roleId);\n    const perms = roleIds.length ? await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacRolePermission.findMany({\n        where: {\n            roleId: {\n                in: roleIds\n            }\n        },\n        include: {\n            permission: true\n        }\n    }) : [];\n    const codes = new Set(perms.map((rp)=>rp.permission.code));\n    // Legacy role convenience (non-blocking): give sensible defaults\n    switch((legacyRole || \"\").toUpperCase()){\n        case \"OWNER\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT,\n                PERMS.ROLES_MANAGE,\n                PERMS.BILLING_MANAGE\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"MANAGER\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"STAFF\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE\n            ].forEach((c)=>codes.add(c));\n            break;\n    }\n    return codes;\n}\n/**\n * Assert that current request is from an authenticated user with a given permission.\n * Writes 401/403 to res if not allowed. Returns true if allowed, false otherwise.\n */ async function assertPermission(req, res, required) {\n    try {\n        const email = getEmailFromReq(req);\n        if (!email) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        // Development bypass: if the incoming email matches the DEV_USER_EMAIL\n        // then skip any database lookups and allow the request. This permits\n        // automated tests and development sessions to exercise any API\n        // regardless of the user's persisted role or permissions. If no\n        // DEV_USER_EMAIL is configured, this block has no effect.\n        if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n            return true;\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                email\n            },\n            select: {\n                id: true,\n                role: true\n            }\n        });\n        if (!user) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        const codes = await getUserPermCodes(user.id, user.role);\n        if (!codes.has(required)) {\n            res.status(403).json({\n                ok: false,\n                error: \"Forbidden\"\n            });\n            return false;\n        }\n        return true;\n    } catch (e) {\n        console.error(\"assertPermission error:\", e);\n        res.status(500).json({\n            ok: false,\n            error: \"Internal Server Error\"\n        });\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsSUFBSTtnQkFBT0MsT0FBTztZQUFlO1lBQ3hELE9BQU87UUFDVDtRQUVBLE1BQU1kLFFBQVEsTUFBTWhCLGlCQUFpQkosS0FBS0YsRUFBRSxFQUFFRSxLQUFLbUMsSUFBSTtRQUN2RCxJQUFJLENBQUNmLE1BQU1nQixHQUFHLENBQUNOLFdBQVc7WUFDeEJELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7Z0JBQUVDLElBQUk7Z0JBQU9DLE9BQU87WUFBWTtZQUNyRCxPQUFPO1FBQ1Q7UUFDQSxPQUFPO0lBQ1QsRUFBRSxPQUFPRyxHQUFZO1FBQ25CQyxRQUFRSixLQUFLLENBQUMsMkJBQTJCRztRQUN6Q1IsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxJQUFJO1lBQU9DLE9BQU87UUFBd0I7UUFDakUsT0FBTztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2xpYi9yYmFjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9saWIvcmJhYy50c1xuaW1wb3J0IHR5cGUgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSBcIm5leHRcIjtcbmltcG9ydCB7IHByaXNtYSBhcyBkYiB9IGZyb20gXCJAL2xpYi9wcmlzbWFcIjtcblxuLyoqXG4gKiBQZXJtaXNzaW9uIGNhdGFsb2cuIEtlZXAgY29kZXMgaW4gc3luYyB3aXRoIHNlZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBQRVJNUyA9IHtcbiAgREFTSEJPQVJEX1ZJRVc6IFwiZGFzaGJvYXJkOnZpZXdcIixcbiAgTEVBRF9SRUFEOiBcImxlYWQ6cmVhZFwiLFxuICBMRUFEX0NSRUFURTogXCJsZWFkOmNyZWF0ZVwiLFxuICBMRUFEX1VQREFURTogXCJsZWFkOnVwZGF0ZVwiLFxuICBMRUFEX0RFTEVURTogXCJsZWFkOmRlbGV0ZVwiLFxuICBMRUFEX0VYUE9SVDogXCJsZWFkOmV4cG9ydFwiLFxuICBST0xFU19NQU5BR0U6IFwicm9sZXM6bWFuYWdlXCIsXG4gIEJJTExJTkdfTUFOQUdFOiBcImJpbGxpbmc6bWFuYWdlXCIsXG59IGFzIGNvbnN0O1xuZXhwb3J0IHR5cGUgUGVybUNvZGUgPSAodHlwZW9mIFBFUk1TKVtrZXlvZiB0eXBlb2YgUEVSTVNdO1xuXG4vKipcbiAqIEVtYWlsIHRoYXQgc2hvdWxkIGJ5cGFzcyBSQkFDIHBlcm1pc3Npb24gY2hlY2tzIGVudGlyZWx5LlxuICogSWYgREVWX1VTRVJfRU1BSUwgaXMgc2V0IGluIHRoZSBlbnZpcm9ubWVudCwgYW55IHJlcXVlc3QgZnJvbSB0aGF0XG4gKiBlbWFpbCBhZGRyZXNzIHdpbGwgYmUgdHJlYXRlZCBhcyBoYXZpbmcgYWxsIHBlcm1pc3Npb25zLiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIGRldmVsb3BtZW50IGFuZCBhdXRvbWF0ZWQgdGVzdGluZy4gSW4gcHJvZHVjdGlvbiB5b3VcbiAqIHNob3VsZCBsZWF2ZSBERVZfVVNFUl9FTUFJTCB1bnNldC5cbiAqL1xuY29uc3QgREVWX1VTRVJfRU1BSUwgPSBwcm9jZXNzLmVudi5ERVZfVVNFUl9FTUFJTD8udG9Mb3dlckNhc2UoKSB8fCBudWxsO1xuXG4vKipcbiAqIEV4dHJhY3QgY3VycmVudCB1c2VyJ3MgZW1haWwgZnJvbSBjb29raWUgb3IgaGVhZGVyLlxuICogLSBDb29raWU6IG12X3VzZXI9PGVtYWlsPlxuICogLSBIZWFkZXI6IHgtbXYtdXNlcjogPGVtYWlsPiAgKHVzZWZ1bCBmb3Igc2NyaXB0cy90ZXN0cylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVtYWlsRnJvbVJlcShyZXE6IE5leHRBcGlSZXF1ZXN0KTogc3RyaW5nIHwgbnVsbCB7XG4gIGNvbnN0IGZyb21Db29raWUgPSByZXEuY29va2llcz8ubXZfdXNlcjtcbiAgY29uc3QgZnJvbUhlYWRlciA9IChyZXEuaGVhZGVyc1tcIngtbXYtdXNlclwiXSB8fCByZXEuaGVhZGVyc1tcIngtbXZ1c2VyXCJdKSBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGNvbnN0IHJhdyA9IChBcnJheS5pc0FycmF5KGZyb21Db29raWUpID8gZnJvbUNvb2tpZVswXSA6IGZyb21Db29raWUpID8/IGZyb21IZWFkZXIgPz8gXCJcIjtcbiAgY29uc3QgZW1haWwgPSByYXc/LnRvU3RyaW5nKCkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBlbWFpbCB8fCBudWxsO1xufVxuXG4vKiogTG9vayB1cCBvcmdJZCBmb3IgY3VycmVudCB1c2VyICh1c2VkIHRvIHNjb3BlIHF1ZXJpZXMpLiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE9yZ0lkRnJvbVJlcShyZXE6IE5leHRBcGlSZXF1ZXN0KTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gIGNvbnN0IGVtYWlsID0gZ2V0RW1haWxGcm9tUmVxKHJlcSk7XG4gIGlmICghZW1haWwpIHJldHVybiBudWxsO1xuXG4gIC8vIERldmVsb3BtZW50IGJ5cGFzczogaWYgdGhpcyBpcyB0aGUgZGV2IHVzZXIsIHJldHVybiBhIGZpeGVkIG9yZ0lkXG4gIC8vIGlmIHByb3ZpZGVkIHZpYSBERVZfT1JHX0lELCBvdGhlcndpc2UgZmFsbCB0aHJvdWdoIHRvIERCIGxvb2t1cC5cbiAgaWYgKERFVl9VU0VSX0VNQUlMICYmIGVtYWlsID09PSBERVZfVVNFUl9FTUFJTCkge1xuICAgIC8vIFVzZSBERVZfT1JHX0lEIGlmIHByb3ZpZGVkLCBlbHNlIG51bGwgdG8gaW5kaWNhdGUgbm8gb3JnXG4gICAgY29uc3QgZGV2T3JnID0gcHJvY2Vzcy5lbnYuREVWX09SR19JRDtcbiAgICBpZiAoZGV2T3JnKSByZXR1cm4gZGV2T3JnO1xuICAgIC8vIEFzIGEgZmFsbGJhY2ssIGF0dGVtcHQgdG8gZmV0Y2ggdGhlIGZpcnN0IG9yZyBmcm9tIHRoZSBkYXRhYmFzZVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBmaXJzdE9yZyA9IGF3YWl0IGRiLm9yZy5maW5kRmlyc3QoeyBzZWxlY3Q6IHsgaWQ6IHRydWUgfSB9KTtcbiAgICAgIHJldHVybiBmaXJzdE9yZz8uaWQgPz8gbnVsbDtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBjb25zdCB1ID0gYXdhaXQgZGIudXNlci5maW5kVW5pcXVlKHsgd2hlcmU6IHsgZW1haWwgfSwgc2VsZWN0OiB7IG9yZ0lkOiB0cnVlIH0gfSk7XG4gIHJldHVybiB1Py5vcmdJZCA/PyBudWxsO1xufVxuXG4vKipcbiAqIEZldGNoIHVzZXIncyBlZmZlY3RpdmUgcGVybWlzc2lvbnMgZnJvbSBSQkFDIHRhYmxlcy5cbiAqIEZhbGxzIGJhY2sgdG8gbGVnYWN5IFVzZXIucm9sZSBmb3IgT1dORVIvTUFOQUdFUi9TVEFGRiBjb252ZW5pZW5jZS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0VXNlclBlcm1Db2Rlcyh1c2VySWQ6IHN0cmluZywgbGVnYWN5Um9sZT86IHN0cmluZyB8IG51bGwpOiBQcm9taXNlPFNldDxzdHJpbmc+PiB7XG4gIGNvbnN0IHJvbGVMaW5rcyA9IGF3YWl0IGRiLnJiYWNVc2VyUm9sZS5maW5kTWFueSh7XG4gICAgd2hlcmU6IHsgdXNlcklkIH0sXG4gICAgc2VsZWN0OiB7IHJvbGVJZDogdHJ1ZSB9LFxuICB9KTtcblxuICBjb25zdCByb2xlSWRzID0gcm9sZUxpbmtzLm1hcCgocikgPT4gci5yb2xlSWQpO1xuICBjb25zdCBwZXJtcyA9IHJvbGVJZHMubGVuZ3RoXG4gICAgPyBhd2FpdCBkYi5yYmFjUm9sZVBlcm1pc3Npb24uZmluZE1hbnkoe1xuICAgICAgICB3aGVyZTogeyByb2xlSWQ6IHsgaW46IHJvbGVJZHMgfSB9LFxuICAgICAgICBpbmNsdWRlOiB7IHBlcm1pc3Npb246IHRydWUgfSxcbiAgICAgIH0pXG4gICAgOiBbXTtcblxuICBjb25zdCBjb2RlcyA9IG5ldyBTZXQ8c3RyaW5nPihwZXJtcy5tYXAoKHJwKSA9PiBycC5wZXJtaXNzaW9uLmNvZGUpKTtcblxuICAvLyBMZWdhY3kgcm9sZSBjb252ZW5pZW5jZSAobm9uLWJsb2NraW5nKTogZ2l2ZSBzZW5zaWJsZSBkZWZhdWx0c1xuICBzd2l0Y2ggKChsZWdhY3lSb2xlIHx8IFwiXCIpLnRvVXBwZXJDYXNlKCkpIHtcbiAgICBjYXNlIFwiT1dORVJcIjpcbiAgICAgIFtQRVJNUy5EQVNIQk9BUkRfVklFVywgUEVSTVMuTEVBRF9SRUFELCBQRVJNUy5MRUFEX0NSRUFURSwgUEVSTVMuTEVBRF9VUERBVEUsIFBFUk1TLkxFQURfREVMRVRFLCBQRVJNUy5MRUFEX0VYUE9SVCwgUEVSTVMuUk9MRVNfTUFOQUdFLCBQRVJNUy5CSUxMSU5HX01BTkFHRV0uZm9yRWFjaChjID0+IGNvZGVzLmFkZChjKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiTUFOQUdFUlwiOlxuICAgICAgW1BFUk1TLkRBU0hCT0FSRF9WSUVXLCBQRVJNUy5MRUFEX1JFQUQsIFBFUk1TLkxFQURfQ1JFQVRFLCBQRVJNUy5MRUFEX1VQREFURSwgUEVSTVMuTEVBRF9ERUxFVEUsIFBFUk1TLkxFQURfRVhQT1JUXS5mb3JFYWNoKGMgPT4gY29kZXMuYWRkKGMpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJTVEFGRlwiOlxuICAgICAgW1BFUk1TLkRBU0hCT0FSRF9WSUVXLCBQRVJNUy5MRUFEX1JFQUQsIFBFUk1TLkxFQURfQ1JFQVRFLCBQRVJNUy5MRUFEX1VQREFURV0uZm9yRWFjaChjID0+IGNvZGVzLmFkZChjKSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBjb2Rlcztcbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCBjdXJyZW50IHJlcXVlc3QgaXMgZnJvbSBhbiBhdXRoZW50aWNhdGVkIHVzZXIgd2l0aCBhIGdpdmVuIHBlcm1pc3Npb24uXG4gKiBXcml0ZXMgNDAxLzQwMyB0byByZXMgaWYgbm90IGFsbG93ZWQuIFJldHVybnMgdHJ1ZSBpZiBhbGxvd2VkLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc3NlcnRQZXJtaXNzaW9uKFxuICByZXE6IE5leHRBcGlSZXF1ZXN0LFxuICByZXM6IE5leHRBcGlSZXNwb25zZSxcbiAgcmVxdWlyZWQ6IFBlcm1Db2RlXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBlbWFpbCA9IGdldEVtYWlsRnJvbVJlcShyZXEpO1xuICAgIGlmICghZW1haWwpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgb2s6IGZhbHNlLCBlcnJvcjogXCJVbmF1dGhvcml6ZWRcIiB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBEZXZlbG9wbWVudCBieXBhc3M6IGlmIHRoZSBpbmNvbWluZyBlbWFpbCBtYXRjaGVzIHRoZSBERVZfVVNFUl9FTUFJTFxuICAgIC8vIHRoZW4gc2tpcCBhbnkgZGF0YWJhc2UgbG9va3VwcyBhbmQgYWxsb3cgdGhlIHJlcXVlc3QuIFRoaXMgcGVybWl0c1xuICAgIC8vIGF1dG9tYXRlZCB0ZXN0cyBhbmQgZGV2ZWxvcG1lbnQgc2Vzc2lvbnMgdG8gZXhlcmNpc2UgYW55IEFQSVxuICAgIC8vIHJlZ2FyZGxlc3Mgb2YgdGhlIHVzZXIncyBwZXJzaXN0ZWQgcm9sZSBvciBwZXJtaXNzaW9ucy4gSWYgbm9cbiAgICAvLyBERVZfVVNFUl9FTUFJTCBpcyBjb25maWd1cmVkLCB0aGlzIGJsb2NrIGhhcyBubyBlZmZlY3QuXG4gICAgaWYgKERFVl9VU0VSX0VNQUlMICYmIGVtYWlsID09PSBERVZfVVNFUl9FTUFJTCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IGRiLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICB3aGVyZTogeyBlbWFpbCB9LFxuICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCByb2xlOiB0cnVlIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgb2s6IGZhbHNlLCBlcnJvcjogXCJVbmF1dGhvcml6ZWRcIiB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBjb2RlcyA9IGF3YWl0IGdldFVzZXJQZXJtQ29kZXModXNlci5pZCwgdXNlci5yb2xlKTtcbiAgICBpZiAoIWNvZGVzLmhhcyhyZXF1aXJlZCkpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgb2s6IGZhbHNlLCBlcnJvcjogXCJGb3JiaWRkZW5cIiB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGU6IHVua25vd24pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYXNzZXJ0UGVybWlzc2lvbiBlcnJvcjpcIiwgZSk7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBvazogZmFsc2UsIGVycm9yOiBcIkludGVybmFsIFNlcnZlciBFcnJvclwiIH0pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInByaXNtYSIsImRiIiwiUEVSTVMiLCJEQVNIQk9BUkRfVklFVyIsIkxFQURfUkVBRCIsIkxFQURfQ1JFQVRFIiwiTEVBRF9VUERBVEUiLCJMRUFEX0RFTEVURSIsIkxFQURfRVhQT1JUIiwiUk9MRVNfTUFOQUdFIiwiQklMTElOR19NQU5BR0UiLCJERVZfVVNFUl9FTUFJTCIsInByb2Nlc3MiLCJlbnYiLCJ0b0xvd2VyQ2FzZSIsImdldEVtYWlsRnJvbVJlcSIsInJlcSIsImZyb21Db29raWUiLCJjb29raWVzIiwibXZfdXNlciIsImZyb21IZWFkZXIiLCJoZWFkZXJzIiwicmF3IiwiQXJyYXkiLCJpc0FycmF5IiwiZW1haWwiLCJ0b1N0cmluZyIsInRyaW0iLCJnZXRPcmdJZEZyb21SZXEiLCJkZXZPcmciLCJERVZfT1JHX0lEIiwiZmlyc3RPcmciLCJvcmciLCJmaW5kRmlyc3QiLCJzZWxlY3QiLCJpZCIsInUiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwib3JnSWQiLCJnZXRVc2VyUGVybUNvZGVzIiwidXNlcklkIiwibGVnYWN5Um9sZSIsInJvbGVMaW5rcyIsInJiYWNVc2VyUm9sZSIsImZpbmRNYW55Iiwicm9sZUlkIiwicm9sZUlkcyIsIm1hcCIsInIiLCJwZXJtcyIsImxlbmd0aCIsInJiYWNSb2xlUGVybWlzc2lvbiIsImluIiwiaW5jbHVkZSIsInBlcm1pc3Npb24iLCJjb2RlcyIsIlNldCIsInJwIiwiY29kZSIsInRvVXBwZXJDYXNlIiwiZm9yRWFjaCIsImMiLCJhZGQiLCJhc3NlcnRQZXJtaXNzaW9uIiwicmVzIiwicmVxdWlyZWQiLCJzdGF0dXMiLCJqc29uIiwib2siLCJlcnJvciIsInJvbGUiLCJoYXMiLCJlIiwiY29uc29sZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/rbac.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/me.ts":
/*!*****************************!*\
  !*** ./src/pages/api/me.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n/* harmony import */ var _lib_rbac__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/rbac */ \"(api-node)/./src/lib/rbac.ts\");\n// src/pages/api/me.ts\n\n\n/**\n * Validate and sanitize brandConfig from database to ensure type safety\n */ function validateBrandConfig(rawBrandConfig) {\n    if (!rawBrandConfig || typeof rawBrandConfig !== 'object') {\n        return {};\n    }\n    const config = rawBrandConfig;\n    const result = {};\n    // Validate name (string)\n    if (typeof config.name === 'string' && config.name.trim()) {\n        result.name = config.name.trim();\n    }\n    // Validate logoUrl (string, basic URL format)\n    if (typeof config.logoUrl === 'string' && config.logoUrl.trim()) {\n        const url = config.logoUrl.trim();\n        if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('/')) {\n            result.logoUrl = url;\n        }\n    }\n    // Validate color (hex or named color)\n    if (typeof config.color === 'string' && config.color.trim()) {\n        const color = config.color.trim();\n        const hexPattern = /^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$/;\n        const namedColors = [\n            'red',\n            'blue',\n            'green',\n            'yellow',\n            'purple',\n            'orange',\n            'pink',\n            'gray',\n            'black',\n            'white'\n        ];\n        if (hexPattern.test(color) || namedColors.includes(color.toLowerCase())) {\n            result.color = color;\n        }\n    }\n    return result;\n}\n/**\n * Compute effective permission codes for a user:\n *  - Union of all permissions from RBAC roles assigned to the user\n *  - Plus legacy fallbacks based on baseRole (OWNER/MANAGER/STAFF)\n */ async function computePermCodes(userId, baseRole) {\n    const roleLinks = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacUserRole.findMany({\n        where: {\n            userId\n        },\n        select: {\n            roleId: true\n        }\n    });\n    const roleIds = roleLinks.map((r)=>r.roleId);\n    const rolePerms = roleIds.length ? await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacRolePermission.findMany({\n        where: {\n            roleId: {\n                in: roleIds\n            }\n        },\n        include: {\n            permission: true\n        }\n    }) : [];\n    const codes = new Set(rolePerms.map((rp)=>rp.permission.code));\n    // Legacy fallbacks for convenience (aligns with src/lib/rbac.ts)\n    switch((baseRole || \"\").toUpperCase()){\n        case \"OWNER\":\n            Object.values(_lib_rbac__WEBPACK_IMPORTED_MODULE_1__.PERMS).forEach((c)=>codes.add(c));\n            break;\n        case \"MANAGER\":\n            [\n                \"dashboard:view\",\n                \"lead:read\",\n                \"lead:create\",\n                \"lead:update\",\n                \"lead:delete\",\n                \"lead:export\"\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"STAFF\":\n            [\n                \"dashboard:view\",\n                \"lead:read\",\n                \"lead:create\",\n                \"lead:update\"\n            ].forEach((c)=>codes.add(c));\n            break;\n    }\n    return codes;\n}\nasync function handler(req, res) {\n    try {\n        const email = (0,_lib_rbac__WEBPACK_IMPORTED_MODULE_1__.getEmailFromReq)(req);\n        if (!email) return res.status(401).json({\n            ok: false,\n            error: \"Not signed in\"\n        });\n        // Dev bypass: grant all perms if DEV_USER_EMAIL matches\n        const DEV_USER_EMAIL = process.env.DEV_USER_EMAIL?.toLowerCase() || null;\n        if (DEV_USER_EMAIL && email.toLowerCase() === DEV_USER_EMAIL) {\n            const perms = Object.values(_lib_rbac__WEBPACK_IMPORTED_MODULE_1__.PERMS);\n            return res.status(200).json({\n                ok: true,\n                user: {\n                    email,\n                    name: \"Dev User\",\n                    baseRole: \"OWNER\",\n                    rbacRoles: [],\n                    isOwner: true,\n                    isProvider: true,\n                    perms\n                }\n            });\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findFirst({\n            where: {\n                email\n            },\n            select: {\n                id: true,\n                email: true,\n                name: true,\n                role: true,\n                orgId: true\n            }\n        });\n        if (!user) return res.status(404).json({\n            ok: false,\n            error: \"User not found\"\n        });\n        // RBAC role slugs for the user\n        const links = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacUserRole.findMany({\n            where: {\n                userId: user.id\n            },\n            select: {\n                role: {\n                    select: {\n                        slug: true\n                    }\n                }\n            }\n        });\n        const rbacSlugs = Array.from(new Set(links.map((l)=>l.role.slug).filter(Boolean)));\n        const isOwner = (user.role || \"\").toUpperCase() === \"OWNER\" || rbacSlugs.includes(\"owner\");\n        const isProvider = rbacSlugs.includes(\"provider\");\n        // Optional org info\n        let orgPayload;\n        if (user.orgId) {\n            const org = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.findUnique({\n                where: {\n                    id: user.orgId\n                },\n                select: {\n                    id: true,\n                    name: true,\n                    featureFlags: true,\n                    brandConfig: true\n                }\n            });\n            if (org) {\n                orgPayload = {\n                    id: org.id,\n                    name: org.name,\n                    /**\n           * IMPORTANT CONTRACT:\n           * - We intentionally pass featureFlags through as-is (unknown JSON).\n           * - Client code should narrow with helpers (see src/lib/featureFlags.ts)\n           *   to avoid assuming a premature shape while the system is evolving.\n           */ featureFlags: org.featureFlags,\n                    brandConfig: validateBrandConfig(org.brandConfig)\n                };\n            }\n        }\n        // Effective permission codes\n        const codes = await computePermCodes(user.id, user.role);\n        const perms = Array.from(codes).sort();\n        return res.status(200).json({\n            ok: true,\n            user: {\n                email: user.email,\n                name: user.name,\n                baseRole: user.role || \"VIEWER\",\n                rbacRoles: rbacSlugs,\n                isOwner,\n                isProvider,\n                perms\n            },\n            ...orgPayload ? {\n                org: orgPayload\n            } : {}\n        });\n    } catch (e) {\n        const msg = e?.message || \"Server error\";\n        return res.status(500).json({\n            ok: false,\n            error: msg\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/me.ts\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fme&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fme.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();