"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/integrations/sam/fetch";
exports.ids = ["pages/api/integrations/sam/fetch"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fintegrations%2Fsam%2Ffetch&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fintegrations%2Fsam%2Ffetch.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fintegrations%2Fsam%2Ffetch&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fintegrations%2Fsam%2Ffetch.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_integrations_sam_fetch_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/pages/api/integrations/sam/fetch.ts */ \"(api-node)/./src/pages/api/integrations/sam/fetch.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_integrations_sam_fetch_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_integrations_sam_fetch_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/integrations/sam/fetch\",\n        pathname: \"/api/integrations/sam/fetch\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_integrations_sam_fetch_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/integrations/sam/fetch\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/integrations/sam/fetch\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fintegrations%2Fsam%2Ffetch&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fintegrations%2Fsam%2Ffetch.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/config/leadScoringConfig.ts":
/*!*****************************************!*\
  !*** ./src/config/leadScoringConfig.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * Configuration for lead scoring. This module exports a simple object used by\n * src/lib/leadScoring.ts to calculate lead scores. Keeping this data in its own\n * module makes it easy to adjust weighting without touching the scoring logic.\n */ const config = {\n    geoPriority: {\n        sterling: 20,\n        greeley: 15,\n        logan: 12,\n        weld: 12,\n        \"fort collins\": 8,\n        evans: 6,\n        windsor: 6,\n        loveland: 6\n    },\n    serviceWeights: {\n        janitorial: 20,\n        carpet: 15,\n        floorcare: 12,\n        disinfection: 8,\n        window: 5\n    },\n    sourceWeights: {\n        RFP: 12,\n        SYSTEM: 10,\n        EMPLOYEE_REFERRAL: 0,\n        MANUAL: 5,\n        LSA: 15\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (config);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9jb25maWcvbGVhZFNjb3JpbmdDb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0F5QkQsTUFBTUEsU0FBNEI7SUFDaENDLGFBQWE7UUFDWEMsVUFBVTtRQUNWQyxTQUFTO1FBQ1RDLE9BQU87UUFDUEMsTUFBTTtRQUNOLGdCQUFnQjtRQUNoQkMsT0FBTztRQUNQQyxTQUFTO1FBQ1RDLFVBQVU7SUFDWjtJQUNBQyxnQkFBZ0I7UUFDZEMsWUFBWTtRQUNaQyxRQUFRO1FBQ1JDLFdBQVc7UUFDWEMsY0FBYztRQUNkQyxRQUFRO0lBQ1Y7SUFDQUMsZUFBZTtRQUNiQyxLQUFLO1FBQ0xDLFFBQVE7UUFDUkMsbUJBQW1CO1FBQ25CQyxRQUFRO1FBQ1JDLEtBQUs7SUFDUDtBQUNGO0FBRUEsaUVBQWVwQixNQUFNQSxFQUFDIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NyYy9jb25maWcvbGVhZFNjb3JpbmdDb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvbmZpZ3VyYXRpb24gZm9yIGxlYWQgc2NvcmluZy4gVGhpcyBtb2R1bGUgZXhwb3J0cyBhIHNpbXBsZSBvYmplY3QgdXNlZCBieVxuICogc3JjL2xpYi9sZWFkU2NvcmluZy50cyB0byBjYWxjdWxhdGUgbGVhZCBzY29yZXMuIEtlZXBpbmcgdGhpcyBkYXRhIGluIGl0cyBvd25cbiAqIG1vZHVsZSBtYWtlcyBpdCBlYXN5IHRvIGFkanVzdCB3ZWlnaHRpbmcgd2l0aG91dCB0b3VjaGluZyB0aGUgc2NvcmluZyBsb2dpYy5cbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIExlYWRTY29yaW5nQ29uZmlnIHtcbiAgLyoqXG4gICAqIEdlb2dyYXBoaWMgcHJpb3JpdHkgc2NvcmVzLiBLZXlzIGFyZSBsb3dlcmNhc2UgY2l0eSBvciBjb3VudHkgbmFtZXMgYW5kIHZhbHVlc1xuICAgKiBhcmUgcG9pbnRzIGFkZGVkIHdoZW4gYSBsZWFk4oCZcyBjaXR5IG1hdGNoZXMuIEFkanVzdCB0aGVzZSB2YWx1ZXMgdG8gcmVmbGVjdFxuICAgKiB5b3VyIGJ1c2luZXNz4oCZcyB0YXJnZXQgbWFya2V0cy5cbiAgICovXG4gIGdlb1ByaW9yaXR5OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuXG4gIC8qKlxuICAgKiBTZXJ2aWNlIHdlaWdodHMuIEtleXMgYXJlIGxvd2VyY2FzZSBzdWJzdHJpbmdzIG9mIGEgc2VydmljZSBkZXNjcmlwdGlvblxuICAgKiAoZS5nLiBcImphbml0b3JpYWxcIiwgXCJjYXJwZXRcIikuIEEgbWF0Y2ggYWRkcyB0aGUgc3BlY2lmaWVkIG51bWJlciBvZlxuICAgKiBwb2ludHMuIEV4dGVuZCB0aGlzIG1hcCBmb3IgYWRkaXRpb25hbCBzZXJ2aWNlIGNvZGVzLlxuICAgKi9cbiAgc2VydmljZVdlaWdodHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj47XG5cbiAgLyoqXG4gICAqIFNvdXJjZSB3ZWlnaHRzLiBUaGVzZSBudW1iZXJzIGFyZSBhZGRlZCBiYXNlZCBvbiB0aGUgbGVhZOKAmXMgc291cmNlVHlwZS5cbiAgICogUkZQcyBhbmQgb3RoZXIgc3lzdGVtLWdlbmVyYXRlZCBsZWFkcyBhcmUgd2VpZ2h0ZWQgaGlnaGVzdC4gRW1wbG95ZWVcbiAgICogcmVmZXJyYWxzIGFyZSBpbnRlbnRpb25hbGx5IG5vbi1iaWxsYWJsZSBhbmQgdGhlcmVmb3JlIHJlY2VpdmUgbm8gYm9vc3QuXG4gICAqL1xuICBzb3VyY2VXZWlnaHRzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xufVxuXG5jb25zdCBjb25maWc6IExlYWRTY29yaW5nQ29uZmlnID0ge1xuICBnZW9Qcmlvcml0eToge1xuICAgIHN0ZXJsaW5nOiAyMCxcbiAgICBncmVlbGV5OiAxNSxcbiAgICBsb2dhbjogMTIsXG4gICAgd2VsZDogMTIsXG4gICAgXCJmb3J0IGNvbGxpbnNcIjogOCxcbiAgICBldmFuczogNixcbiAgICB3aW5kc29yOiA2LFxuICAgIGxvdmVsYW5kOiA2LFxuICB9LFxuICBzZXJ2aWNlV2VpZ2h0czoge1xuICAgIGphbml0b3JpYWw6IDIwLFxuICAgIGNhcnBldDogMTUsXG4gICAgZmxvb3JjYXJlOiAxMixcbiAgICBkaXNpbmZlY3Rpb246IDgsXG4gICAgd2luZG93OiA1LFxuICB9LFxuICBzb3VyY2VXZWlnaHRzOiB7XG4gICAgUkZQOiAxMixcbiAgICBTWVNURU06IDEwLFxuICAgIEVNUExPWUVFX1JFRkVSUkFMOiAwLFxuICAgIE1BTlVBTDogNSxcbiAgICBMU0E6IDE1LFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnOyJdLCJuYW1lcyI6WyJjb25maWciLCJnZW9Qcmlvcml0eSIsInN0ZXJsaW5nIiwiZ3JlZWxleSIsImxvZ2FuIiwid2VsZCIsImV2YW5zIiwid2luZHNvciIsImxvdmVsYW5kIiwic2VydmljZVdlaWdodHMiLCJqYW5pdG9yaWFsIiwiY2FycGV0IiwiZmxvb3JjYXJlIiwiZGlzaW5mZWN0aW9uIiwid2luZG93Iiwic291cmNlV2VpZ2h0cyIsIlJGUCIsIlNZU1RFTSIsIkVNUExPWUVFX1JFRkVSUkFMIiwiTUFOVUFMIiwiTFNBIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/config/leadScoringConfig.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/leadScoring.ts":
/*!********************************!*\
  !*** ./src/lib/leadScoring.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSystemGenerated: () => (/* binding */ isSystemGenerated),\n/* harmony export */   scoreLead: () => (/* binding */ scoreLead)\n/* harmony export */ });\n/* harmony import */ var _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config/leadScoringConfig */ \"(api-node)/./src/config/leadScoringConfig.ts\");\n// src/lib/leadScoring.ts\n// Lead scoring utilities. Scoring is driven by a configuration file (see\n// src/config/leadScoringConfig.ts). Each lead is assigned a baseline score\n// which is adjusted based on geography, service keywords and the lead’s source\n// type. A list of reasons is returned alongside the numeric score.\n\n/**\n * Compute a lead score based on the lead’s attributes and the current scoring\n * configuration. Scores are clamped between 1 and 99. Reasons describe\n * which factors contributed to the score.\n */ function scoreLead(lead) {\n    let score = 50; // baseline\n    const reasons = [];\n    const city = (lead.city || \"\").trim().toLowerCase();\n    const state = (lead.state || \"\").trim().toUpperCase();\n    const zip = (lead.zip || \"\").trim();\n    const svc = (lead.serviceCode || \"\").trim().toLowerCase();\n    const srcType = (lead.sourceType || \"\").trim().toUpperCase();\n    const detail = (lead.sourceDetail || \"\").trim().toLowerCase();\n    // Geographic weighting: state and priority cities/counties\n    if (state === \"CO\") {\n        score += 10;\n        reasons.push(\"Colorado service area\");\n    }\n    if (city && _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].geoPriority[city]) {\n        score += _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].geoPriority[city];\n        reasons.push(`Priority city: ${city}`);\n    }\n    // Recognize Logan/Weld county prefixes (806xx, 807xx) in ZIP\n    if (/^806|^807/.test(zip)) {\n        score += 8;\n        reasons.push(`ZIP in target bands (${zip.slice(0, 3)}xx)`);\n    }\n    // Service weighting: match substring within service code/description\n    for (const key of Object.keys(_config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].serviceWeights)){\n        if (svc.includes(key)) {\n            const pts = _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].serviceWeights[key];\n            score += pts;\n            reasons.push(`Service match: ${key}`);\n            break;\n        }\n    }\n    // Source weighting: use sourceType; fallback to heuristics based on detail\n    if (srcType) {\n        const pts = _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sourceWeights[srcType];\n        if (typeof pts === \"number\") {\n            score += pts;\n            reasons.push(`Source type: ${srcType}`);\n        }\n    }\n    // Additional boost if SAM/RFP keywords appear in detail\n    if (detail.includes(\"sam.gov\") || detail.includes(\"rfp\")) {\n        score += _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sourceWeights.RFP ?? 12;\n        reasons.push(\"Government RFP (SAM.gov)\");\n    }\n    // Clamp between 1 and 99\n    score = Math.max(1, Math.min(99, Math.round(score)));\n    return {\n        score,\n        reasons\n    };\n}\n/**\n * Determine if a lead appears to be system-generated. This helper remains for\n * backwards compatibility. It checks the sourceDetail string for common\n * indicators. New code should prefer the systemGenerated flag on Lead.\n */ function isSystemGenerated(sourceDetail) {\n    const d = (sourceDetail || \"\").toLowerCase();\n    return d.includes(\"sam.gov\") || d.includes(\"rfp\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9saWIvbGVhZFNjb3JpbmcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEseUJBQXlCO0FBQ3pCLHlFQUF5RTtBQUN6RSwyRUFBMkU7QUFDM0UsK0VBQStFO0FBQy9FLG1FQUFtRTtBQUVuQjtBQWFoRDs7OztDQUlDLEdBQ00sU0FBU0MsVUFBVUMsSUFBYztJQUN0QyxJQUFJQyxRQUFRLElBQUksV0FBVztJQUMzQixNQUFNQyxVQUFvQixFQUFFO0lBRTVCLE1BQU1DLE9BQU8sQ0FBQ0gsS0FBS0csSUFBSSxJQUFJLEVBQUMsRUFBR0MsSUFBSSxHQUFHQyxXQUFXO0lBQ2pELE1BQU1DLFFBQVEsQ0FBQ04sS0FBS00sS0FBSyxJQUFJLEVBQUMsRUFBR0YsSUFBSSxHQUFHRyxXQUFXO0lBQ25ELE1BQU1DLE1BQU0sQ0FBQ1IsS0FBS1EsR0FBRyxJQUFJLEVBQUMsRUFBR0osSUFBSTtJQUNqQyxNQUFNSyxNQUFNLENBQUNULEtBQUtVLFdBQVcsSUFBSSxFQUFDLEVBQUdOLElBQUksR0FBR0MsV0FBVztJQUN2RCxNQUFNTSxVQUFVLENBQUNYLEtBQUtZLFVBQVUsSUFBSSxFQUFDLEVBQUdSLElBQUksR0FBR0csV0FBVztJQUMxRCxNQUFNTSxTQUFTLENBQUNiLEtBQUtjLFlBQVksSUFBSSxFQUFDLEVBQUdWLElBQUksR0FBR0MsV0FBVztJQUUzRCwyREFBMkQ7SUFDM0QsSUFBSUMsVUFBVSxNQUFNO1FBQ2xCTCxTQUFTO1FBQ1RDLFFBQVFhLElBQUksQ0FBQztJQUNmO0lBQ0EsSUFBSVosUUFBUUwsNkVBQWtCLENBQUNLLEtBQUssRUFBRTtRQUNwQ0YsU0FBU0gsNkVBQWtCLENBQUNLLEtBQUs7UUFDakNELFFBQVFhLElBQUksQ0FBQyxDQUFDLGVBQWUsRUFBRVosTUFBTTtJQUN2QztJQUNBLDZEQUE2RDtJQUM3RCxJQUFJLFlBQVljLElBQUksQ0FBQ1QsTUFBTTtRQUN6QlAsU0FBUztRQUNUQyxRQUFRYSxJQUFJLENBQUMsQ0FBQyxxQkFBcUIsRUFBRVAsSUFBSVUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDM0Q7SUFFQSxxRUFBcUU7SUFDckUsS0FBSyxNQUFNQyxPQUFPQyxPQUFPQyxJQUFJLENBQUN2QixnRkFBcUIsRUFBRztRQUNwRCxJQUFJVyxJQUFJYyxRQUFRLENBQUNKLE1BQU07WUFDckIsTUFBTUssTUFBTTFCLGdGQUFxQixDQUFDcUIsSUFBSTtZQUN0Q2xCLFNBQVN1QjtZQUNUdEIsUUFBUWEsSUFBSSxDQUFDLENBQUMsZUFBZSxFQUFFSSxLQUFLO1lBQ3BDO1FBQ0Y7SUFDRjtJQUVBLDJFQUEyRTtJQUMzRSxJQUFJUixTQUFTO1FBQ1gsTUFBTWEsTUFBTTFCLCtFQUFvQixDQUFDYSxRQUE2QztRQUM5RSxJQUFJLE9BQU9hLFFBQVEsVUFBVTtZQUMzQnZCLFNBQVN1QjtZQUNUdEIsUUFBUWEsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFSixTQUFTO1FBQ3hDO0lBQ0Y7SUFDQSx3REFBd0Q7SUFDeEQsSUFBSUUsT0FBT1UsUUFBUSxDQUFDLGNBQWNWLE9BQU9VLFFBQVEsQ0FBQyxRQUFRO1FBQ3hEdEIsU0FBU0gsK0VBQW9CLENBQUM0QixHQUFHLElBQUk7UUFDckN4QixRQUFRYSxJQUFJLENBQUM7SUFDZjtJQUVBLHlCQUF5QjtJQUN6QmQsUUFBUTBCLEtBQUtDLEdBQUcsQ0FBQyxHQUFHRCxLQUFLRSxHQUFHLENBQUMsSUFBSUYsS0FBS0csS0FBSyxDQUFDN0I7SUFDNUMsT0FBTztRQUFFQTtRQUFPQztJQUFRO0FBQzFCO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVM2QixrQkFBa0JqQixZQUE0QjtJQUM1RCxNQUFNa0IsSUFBSSxDQUFDbEIsZ0JBQWdCLEVBQUMsRUFBR1QsV0FBVztJQUMxQyxPQUFPMkIsRUFBRVQsUUFBUSxDQUFDLGNBQWNTLEVBQUVULFFBQVEsQ0FBQztBQUM3QyIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvbGliL2xlYWRTY29yaW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9saWIvbGVhZFNjb3JpbmcudHNcbi8vIExlYWQgc2NvcmluZyB1dGlsaXRpZXMuIFNjb3JpbmcgaXMgZHJpdmVuIGJ5IGEgY29uZmlndXJhdGlvbiBmaWxlIChzZWVcbi8vIHNyYy9jb25maWcvbGVhZFNjb3JpbmdDb25maWcudHMpLiBFYWNoIGxlYWQgaXMgYXNzaWduZWQgYSBiYXNlbGluZSBzY29yZVxuLy8gd2hpY2ggaXMgYWRqdXN0ZWQgYmFzZWQgb24gZ2VvZ3JhcGh5LCBzZXJ2aWNlIGtleXdvcmRzIGFuZCB0aGUgbGVhZOKAmXMgc291cmNlXG4vLyB0eXBlLiBBIGxpc3Qgb2YgcmVhc29ucyBpcyByZXR1cm5lZCBhbG9uZ3NpZGUgdGhlIG51bWVyaWMgc2NvcmUuXG5cbmltcG9ydCBjb25maWcgZnJvbSBcIkAvY29uZmlnL2xlYWRTY29yaW5nQ29uZmlnXCI7XG5cbmV4cG9ydCB0eXBlIExlYWRMaWtlID0ge1xuICBjaXR5Pzogc3RyaW5nIHwgbnVsbDtcbiAgc3RhdGU/OiBzdHJpbmcgfCBudWxsO1xuICB6aXA/OiBzdHJpbmcgfCBudWxsO1xuICBzZXJ2aWNlQ29kZT86IHN0cmluZyB8IG51bGw7XG4gIHNvdXJjZVR5cGU/OiBzdHJpbmcgfCBudWxsO1xuICBzb3VyY2VEZXRhaWw/OiBzdHJpbmcgfCBudWxsO1xufTtcblxuZXhwb3J0IHR5cGUgU2NvcmVSZXN1bHQgPSB7IHNjb3JlOiBudW1iZXI7IHJlYXNvbnM6IHN0cmluZ1tdIH07XG5cbi8qKlxuICogQ29tcHV0ZSBhIGxlYWQgc2NvcmUgYmFzZWQgb24gdGhlIGxlYWTigJlzIGF0dHJpYnV0ZXMgYW5kIHRoZSBjdXJyZW50IHNjb3JpbmdcbiAqIGNvbmZpZ3VyYXRpb24uIFNjb3JlcyBhcmUgY2xhbXBlZCBiZXR3ZWVuIDEgYW5kIDk5LiBSZWFzb25zIGRlc2NyaWJlXG4gKiB3aGljaCBmYWN0b3JzIGNvbnRyaWJ1dGVkIHRvIHRoZSBzY29yZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjb3JlTGVhZChsZWFkOiBMZWFkTGlrZSk6IFNjb3JlUmVzdWx0IHtcbiAgbGV0IHNjb3JlID0gNTA7IC8vIGJhc2VsaW5lXG4gIGNvbnN0IHJlYXNvbnM6IHN0cmluZ1tdID0gW107XG5cbiAgY29uc3QgY2l0eSA9IChsZWFkLmNpdHkgfHwgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IHN0YXRlID0gKGxlYWQuc3RhdGUgfHwgXCJcIikudHJpbSgpLnRvVXBwZXJDYXNlKCk7XG4gIGNvbnN0IHppcCA9IChsZWFkLnppcCB8fCBcIlwiKS50cmltKCk7XG4gIGNvbnN0IHN2YyA9IChsZWFkLnNlcnZpY2VDb2RlIHx8IFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBzcmNUeXBlID0gKGxlYWQuc291cmNlVHlwZSB8fCBcIlwiKS50cmltKCkudG9VcHBlckNhc2UoKTtcbiAgY29uc3QgZGV0YWlsID0gKGxlYWQuc291cmNlRGV0YWlsIHx8IFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEdlb2dyYXBoaWMgd2VpZ2h0aW5nOiBzdGF0ZSBhbmQgcHJpb3JpdHkgY2l0aWVzL2NvdW50aWVzXG4gIGlmIChzdGF0ZSA9PT0gXCJDT1wiKSB7XG4gICAgc2NvcmUgKz0gMTA7XG4gICAgcmVhc29ucy5wdXNoKFwiQ29sb3JhZG8gc2VydmljZSBhcmVhXCIpO1xuICB9XG4gIGlmIChjaXR5ICYmIGNvbmZpZy5nZW9Qcmlvcml0eVtjaXR5XSkge1xuICAgIHNjb3JlICs9IGNvbmZpZy5nZW9Qcmlvcml0eVtjaXR5XTtcbiAgICByZWFzb25zLnB1c2goYFByaW9yaXR5IGNpdHk6ICR7Y2l0eX1gKTtcbiAgfVxuICAvLyBSZWNvZ25pemUgTG9nYW4vV2VsZCBjb3VudHkgcHJlZml4ZXMgKDgwNnh4LCA4MDd4eCkgaW4gWklQXG4gIGlmICgvXjgwNnxeODA3Ly50ZXN0KHppcCkpIHtcbiAgICBzY29yZSArPSA4O1xuICAgIHJlYXNvbnMucHVzaChgWklQIGluIHRhcmdldCBiYW5kcyAoJHt6aXAuc2xpY2UoMCwgMyl9eHgpYCk7XG4gIH1cblxuICAvLyBTZXJ2aWNlIHdlaWdodGluZzogbWF0Y2ggc3Vic3RyaW5nIHdpdGhpbiBzZXJ2aWNlIGNvZGUvZGVzY3JpcHRpb25cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY29uZmlnLnNlcnZpY2VXZWlnaHRzKSkge1xuICAgIGlmIChzdmMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgY29uc3QgcHRzID0gY29uZmlnLnNlcnZpY2VXZWlnaHRzW2tleV07XG4gICAgICBzY29yZSArPSBwdHM7XG4gICAgICByZWFzb25zLnB1c2goYFNlcnZpY2UgbWF0Y2g6ICR7a2V5fWApO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8gU291cmNlIHdlaWdodGluZzogdXNlIHNvdXJjZVR5cGU7IGZhbGxiYWNrIHRvIGhldXJpc3RpY3MgYmFzZWQgb24gZGV0YWlsXG4gIGlmIChzcmNUeXBlKSB7XG4gICAgY29uc3QgcHRzID0gY29uZmlnLnNvdXJjZVdlaWdodHNbc3JjVHlwZSBhcyBrZXlvZiB0eXBlb2YgY29uZmlnLnNvdXJjZVdlaWdodHNdO1xuICAgIGlmICh0eXBlb2YgcHRzID09PSBcIm51bWJlclwiKSB7XG4gICAgICBzY29yZSArPSBwdHM7XG4gICAgICByZWFzb25zLnB1c2goYFNvdXJjZSB0eXBlOiAke3NyY1R5cGV9YCk7XG4gICAgfVxuICB9XG4gIC8vIEFkZGl0aW9uYWwgYm9vc3QgaWYgU0FNL1JGUCBrZXl3b3JkcyBhcHBlYXIgaW4gZGV0YWlsXG4gIGlmIChkZXRhaWwuaW5jbHVkZXMoXCJzYW0uZ292XCIpIHx8IGRldGFpbC5pbmNsdWRlcyhcInJmcFwiKSkge1xuICAgIHNjb3JlICs9IGNvbmZpZy5zb3VyY2VXZWlnaHRzLlJGUCA/PyAxMjtcbiAgICByZWFzb25zLnB1c2goXCJHb3Zlcm5tZW50IFJGUCAoU0FNLmdvdilcIik7XG4gIH1cblxuICAvLyBDbGFtcCBiZXR3ZWVuIDEgYW5kIDk5XG4gIHNjb3JlID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oOTksIE1hdGgucm91bmQoc2NvcmUpKSk7XG4gIHJldHVybiB7IHNjb3JlLCByZWFzb25zIH07XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgbGVhZCBhcHBlYXJzIHRvIGJlIHN5c3RlbS1nZW5lcmF0ZWQuIFRoaXMgaGVscGVyIHJlbWFpbnMgZm9yXG4gKiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gSXQgY2hlY2tzIHRoZSBzb3VyY2VEZXRhaWwgc3RyaW5nIGZvciBjb21tb25cbiAqIGluZGljYXRvcnMuIE5ldyBjb2RlIHNob3VsZCBwcmVmZXIgdGhlIHN5c3RlbUdlbmVyYXRlZCBmbGFnIG9uIExlYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N5c3RlbUdlbmVyYXRlZChzb3VyY2VEZXRhaWw/OiBzdHJpbmcgfCBudWxsKTogYm9vbGVhbiB7XG4gIGNvbnN0IGQgPSAoc291cmNlRGV0YWlsIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBkLmluY2x1ZGVzKFwic2FtLmdvdlwiKSB8fCBkLmluY2x1ZGVzKFwicmZwXCIpO1xufSJdLCJuYW1lcyI6WyJjb25maWciLCJzY29yZUxlYWQiLCJsZWFkIiwic2NvcmUiLCJyZWFzb25zIiwiY2l0eSIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInN0YXRlIiwidG9VcHBlckNhc2UiLCJ6aXAiLCJzdmMiLCJzZXJ2aWNlQ29kZSIsInNyY1R5cGUiLCJzb3VyY2VUeXBlIiwiZGV0YWlsIiwic291cmNlRGV0YWlsIiwicHVzaCIsImdlb1ByaW9yaXR5IiwidGVzdCIsInNsaWNlIiwia2V5IiwiT2JqZWN0Iiwia2V5cyIsInNlcnZpY2VXZWlnaHRzIiwiaW5jbHVkZXMiLCJwdHMiLCJzb3VyY2VXZWlnaHRzIiwiUkZQIiwiTWF0aCIsIm1heCIsIm1pbiIsInJvdW5kIiwiaXNTeXN0ZW1HZW5lcmF0ZWQiLCJkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/leadScoring.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/leadScoringAdapter.ts":
/*!***************************************!*\
  !*** ./src/lib/leadScoringAdapter.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scoreLeadNormalized: () => (/* binding */ scoreLeadNormalized)\n/* harmony export */ });\n/* harmony import */ var _lib_leadScoring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/leadScoring */ \"(api-node)/./src/lib/leadScoring.ts\");\n\n/**\n * Normalizes whatever your scoreLead returns into:\n *   { score: number, details: unknown }\n * so callers don’t need to know exact types.\n */ async function scoreLeadNormalized(input) {\n    try {\n        // Cast the unknown input to LeadLike for scoreLead. scoreLead always returns\n        // a ScoreResult, but we preserve the generic handling in case of future\n        // changes (e.g. returning a number).\n        const res = await (0,_lib_leadScoring__WEBPACK_IMPORTED_MODULE_0__.scoreLead)(input);\n        if (typeof res === \"number\") {\n            return {\n                score: res,\n                details: {\n                    score: res\n                }\n            };\n        }\n        if (res && typeof res === \"object\") {\n            const maybeScore = res.score;\n            return {\n                score: typeof maybeScore === \"number\" ? maybeScore : 0,\n                details: res\n            };\n        }\n        return {\n            score: 0,\n            details: {}\n        };\n    } catch  {\n        return {\n            score: 0,\n            details: {}\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9saWIvbGVhZFNjb3JpbmdBZGFwdGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStFO0FBRS9FOzs7O0NBSUMsR0FDTSxlQUFlQyxvQkFBb0JDLEtBQWM7SUFDdEQsSUFBSTtRQUNGLDZFQUE2RTtRQUM3RSx3RUFBd0U7UUFDeEUscUNBQXFDO1FBQ3JDLE1BQU1DLE1BQTRCLE1BQU1ILDJEQUFTQSxDQUFDRTtRQUNsRCxJQUFJLE9BQU9DLFFBQVEsVUFBVTtZQUMzQixPQUFPO2dCQUFFQyxPQUFPRDtnQkFBS0UsU0FBUztvQkFBRUQsT0FBT0Q7Z0JBQUk7WUFBRTtRQUMvQztRQUNBLElBQUlBLE9BQU8sT0FBT0EsUUFBUSxVQUFVO1lBQ2xDLE1BQU1HLGFBQWEsSUFBcUJGLEtBQUs7WUFDN0MsT0FBTztnQkFBRUEsT0FBTyxPQUFPRSxlQUFlLFdBQVdBLGFBQWE7Z0JBQUdELFNBQVNGO1lBQUk7UUFDaEY7UUFDQSxPQUFPO1lBQUVDLE9BQU87WUFBR0MsU0FBUyxDQUFDO1FBQUU7SUFDakMsRUFBRSxPQUFNO1FBQ04sT0FBTztZQUFFRCxPQUFPO1lBQUdDLFNBQVMsQ0FBQztRQUFFO0lBQ2pDO0FBQ0YiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL2xpYi9sZWFkU2NvcmluZ0FkYXB0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NvcmVMZWFkLCB0eXBlIExlYWRMaWtlLCB0eXBlIFNjb3JlUmVzdWx0IH0gZnJvbSBcIkAvbGliL2xlYWRTY29yaW5nXCI7XG5cbi8qKlxuICogTm9ybWFsaXplcyB3aGF0ZXZlciB5b3VyIHNjb3JlTGVhZCByZXR1cm5zIGludG86XG4gKiAgIHsgc2NvcmU6IG51bWJlciwgZGV0YWlsczogdW5rbm93biB9XG4gKiBzbyBjYWxsZXJzIGRvbuKAmXQgbmVlZCB0byBrbm93IGV4YWN0IHR5cGVzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2NvcmVMZWFkTm9ybWFsaXplZChpbnB1dDogdW5rbm93bik6IFByb21pc2U8eyBzY29yZTogbnVtYmVyOyBkZXRhaWxzOiB1bmtub3duIH0+IHtcbiAgdHJ5IHtcbiAgICAvLyBDYXN0IHRoZSB1bmtub3duIGlucHV0IHRvIExlYWRMaWtlIGZvciBzY29yZUxlYWQuIHNjb3JlTGVhZCBhbHdheXMgcmV0dXJuc1xuICAgIC8vIGEgU2NvcmVSZXN1bHQsIGJ1dCB3ZSBwcmVzZXJ2ZSB0aGUgZ2VuZXJpYyBoYW5kbGluZyBpbiBjYXNlIG9mIGZ1dHVyZVxuICAgIC8vIGNoYW5nZXMgKGUuZy4gcmV0dXJuaW5nIGEgbnVtYmVyKS5cbiAgICBjb25zdCByZXM6IFNjb3JlUmVzdWx0IHwgbnVtYmVyID0gYXdhaXQgc2NvcmVMZWFkKGlucHV0IGFzIExlYWRMaWtlKTtcbiAgICBpZiAodHlwZW9mIHJlcyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIHsgc2NvcmU6IHJlcywgZGV0YWlsczogeyBzY29yZTogcmVzIH0gfTtcbiAgICB9XG4gICAgaWYgKHJlcyAmJiB0eXBlb2YgcmVzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBjb25zdCBtYXliZVNjb3JlID0gKHJlcyBhcyBTY29yZVJlc3VsdCkuc2NvcmU7XG4gICAgICByZXR1cm4geyBzY29yZTogdHlwZW9mIG1heWJlU2NvcmUgPT09IFwibnVtYmVyXCIgPyBtYXliZVNjb3JlIDogMCwgZGV0YWlsczogcmVzIH07XG4gICAgfVxuICAgIHJldHVybiB7IHNjb3JlOiAwLCBkZXRhaWxzOiB7fSB9O1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4geyBzY29yZTogMCwgZGV0YWlsczoge30gfTtcbiAgfVxufVxuXG4iXSwibmFtZXMiOlsic2NvcmVMZWFkIiwic2NvcmVMZWFkTm9ybWFsaXplZCIsImlucHV0IiwicmVzIiwic2NvcmUiLCJkZXRhaWxzIiwibWF5YmVTY29yZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/leadScoringAdapter.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// src/lib/prisma.ts\n\nconst prisma = global.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0\n});\nif (true) global.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9CQUFvQjtBQUMwQjtBQVF2QyxNQUFNQyxTQUNYQyxPQUFPRCxNQUFNLElBQ2IsSUFBSUQsd0RBQVlBLENBQUM7SUFDZkcsS0FBS0MsS0FBc0MsR0FBRztRQUFDO1FBQVM7UUFBUztLQUFPLEdBQUcsQ0FBUztBQUN0RixHQUFHO0FBRUwsSUFBSUEsSUFBcUMsRUFBRUYsT0FBT0QsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvbGliL3ByaXNtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL3ByaXNtYS50c1xuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSBcIkBwcmlzbWEvY2xpZW50XCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gQWxsb3cgZ2xvYmFsIGB2YXJgIHJlZGVjbGFyYXRpb24gaW4gZGV2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID1cbiAgZ2xvYmFsLnByaXNtYSA/P1xuICBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICBsb2c6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgPyBbXCJxdWVyeVwiLCBcImVycm9yXCIsIFwid2FyblwiXSA6IFtcImVycm9yXCJdLFxuICB9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgZ2xvYmFsLnByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJnbG9iYWwiLCJsb2ciLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/rbac.ts":
/*!*************************!*\
  !*** ./src/lib/rbac.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PERMS: () => (/* binding */ PERMS),\n/* harmony export */   assertPermission: () => (/* binding */ assertPermission),\n/* harmony export */   getEmailFromReq: () => (/* binding */ getEmailFromReq),\n/* harmony export */   getOrgIdFromReq: () => (/* binding */ getOrgIdFromReq)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n// src/lib/rbac.ts\n\n/**\n * Permission catalog. Keep codes in sync with seed.\n */ const PERMS = {\n    DASHBOARD_VIEW: \"dashboard:view\",\n    LEAD_READ: \"lead:read\",\n    LEAD_CREATE: \"lead:create\",\n    LEAD_UPDATE: \"lead:update\",\n    LEAD_DELETE: \"lead:delete\",\n    LEAD_EXPORT: \"lead:export\",\n    ROLES_MANAGE: \"roles:manage\",\n    BILLING_MANAGE: \"billing:manage\"\n};\n/**\n * Email that should bypass RBAC permission checks entirely.\n * If DEV_USER_EMAIL is set in the environment, any request from that\n * email address will be treated as having all permissions. This is\n * useful for development and automated testing. In production you\n * should leave DEV_USER_EMAIL unset.\n */ const DEV_USER_EMAIL = process.env.DEV_USER_EMAIL?.toLowerCase() || null;\n/**\n * Extract current user's email from cookie or header.\n * - Cookie: mv_user=<email>\n * - Header: x-mv-user: <email>  (useful for scripts/tests)\n */ function getEmailFromReq(req) {\n    const fromCookie = req.cookies?.mv_user;\n    const fromHeader = req.headers[\"x-mv-user\"] || req.headers[\"x-mvuser\"];\n    const raw = (Array.isArray(fromCookie) ? fromCookie[0] : fromCookie) ?? fromHeader ?? \"\";\n    const email = raw?.toString().trim().toLowerCase();\n    return email || null;\n}\n/** Look up orgId for current user (used to scope queries). */ async function getOrgIdFromReq(req) {\n    const email = getEmailFromReq(req);\n    if (!email) return null;\n    // Development bypass: if this is the dev user, return a fixed orgId\n    // if provided via DEV_ORG_ID, otherwise fall through to DB lookup.\n    if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n        // Use DEV_ORG_ID if provided, else null to indicate no org\n        const devOrg = process.env.DEV_ORG_ID;\n        if (devOrg) return devOrg;\n        // As a fallback, attempt to fetch the first org from the database\n        try {\n            const firstOrg = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.findFirst({\n                select: {\n                    id: true\n                }\n            });\n            return firstOrg?.id ?? null;\n        } catch  {\n            return null;\n        }\n    }\n    const u = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n        where: {\n            email\n        },\n        select: {\n            orgId: true\n        }\n    });\n    return u?.orgId ?? null;\n}\n/**\n * Fetch user's effective permissions from RBAC tables.\n * Falls back to legacy User.role for OWNER/MANAGER/STAFF convenience.\n */ async function getUserPermCodes(userId, legacyRole) {\n    const roleLinks = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacUserRole.findMany({\n        where: {\n            userId\n        },\n        select: {\n            roleId: true\n        }\n    });\n    const roleIds = roleLinks.map((r)=>r.roleId);\n    const perms = roleIds.length ? await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacRolePermission.findMany({\n        where: {\n            roleId: {\n                in: roleIds\n            }\n        },\n        include: {\n            permission: true\n        }\n    }) : [];\n    const codes = new Set(perms.map((rp)=>rp.permission.code));\n    // Legacy role convenience (non-blocking): give sensible defaults\n    switch((legacyRole || \"\").toUpperCase()){\n        case \"OWNER\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT,\n                PERMS.ROLES_MANAGE,\n                PERMS.BILLING_MANAGE\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"MANAGER\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"STAFF\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE\n            ].forEach((c)=>codes.add(c));\n            break;\n    }\n    return codes;\n}\n/**\n * Assert that current request is from an authenticated user with a given permission.\n * Writes 401/403 to res if not allowed. Returns true if allowed, false otherwise.\n */ async function assertPermission(req, res, required) {\n    try {\n        const email = getEmailFromReq(req);\n        if (!email) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        // Development bypass: if the incoming email matches the DEV_USER_EMAIL\n        // then skip any database lookups and allow the request. This permits\n        // automated tests and development sessions to exercise any API\n        // regardless of the user's persisted role or permissions. If no\n        // DEV_USER_EMAIL is configured, this block has no effect.\n        if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n            return true;\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                email\n            },\n            select: {\n                id: true,\n                role: true\n            }\n        });\n        if (!user) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        const codes = await getUserPermCodes(user.id, user.role);\n        if (!codes.has(required)) {\n            res.status(403).json({\n                ok: false,\n                error: \"Forbidden\"\n            });\n            return false;\n        }\n        return true;\n    } catch (e) {\n        console.error(\"assertPermission error:\", e);\n        res.status(500).json({\n            ok: false,\n            error: \"Internal Server Error\"\n        });\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/rbac.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/integrations/sam/fetch.ts":
/*!*************************************************!*\
  !*** ./src/pages/api/integrations/sam/fetch.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n/* harmony import */ var _lib_rbac__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/rbac */ \"(api-node)/./src/lib/rbac.ts\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lib_leadScoringAdapter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/leadScoringAdapter */ \"(api-node)/./src/lib/leadScoringAdapter.ts\");\n// src/pages/api/integrations/sam/fetch.ts\n\n\n\n\n\nconst SAM_BASE = \"https://api.sam.gov/opportunities/v2/search\";\n// All leads are now FREE - no billing charges\nconst DEFAULT_UNIT_PRICE_CENTS = 0; // $0.00 - Free lead generation\nfunction sha256_24(s) {\n    return node_crypto__WEBPACK_IMPORTED_MODULE_3___default().createHash(\"sha256\").update(s).digest(\"hex\").slice(0, 24);\n}\nfunction identityHash(input) {\n    const norm = (v)=>(v ?? \"\").trim().toLowerCase();\n    const key = [\n        norm(input.email),\n        norm(input.phoneE164),\n        norm(input.company),\n        norm(input.name)\n    ].filter(Boolean).join(\"|\");\n    return sha256_24(key);\n}\nfunction asJson(v) {\n    return v ?? {};\n}\n/** Extract first string from string|string[]|null */ function firstStr(x) {\n    if (!x) return null;\n    return Array.isArray(x) ? x[0] ?? null : x;\n}\n/** Best-effort SAM response parsing */ function normalizeSamItem(raw) {\n    const o = raw;\n    // Helper to read a string property safely\n    const getString = (prop)=>{\n        const val = o?.[prop];\n        return typeof val === \"string\" && val.trim() !== \"\" ? val : undefined;\n    };\n    // Helper to read an array or string property safely\n    const getStringOrArray = (prop)=>{\n        const val = o?.[prop];\n        if (typeof val === \"string\") return val;\n        if (Array.isArray(val)) return val;\n        return null;\n    };\n    return {\n        noticeId: (getString(\"noticeId\") ?? getString(\"_id\") ?? \"\").trim() || undefined,\n        title: getString(\"title\") || getString(\"subject\") || getString(\"description\") || undefined,\n        sol: getString(\"sol\") || getString(\"solicitationNumber\") || undefined,\n        naics: getStringOrArray(\"naics\") ?? getStringOrArray(\"naicsCodes\"),\n        psc: getStringOrArray(\"psc\") ?? getStringOrArray(\"pscCodes\"),\n        agency: getString(\"agency\") || getString(\"office\") || getString(\"officeName\") || null,\n        responseDate: getString(\"responseDate\") || getString(\"dueDate\") || null,\n        publishDate: getString(\"publishDate\") || getString(\"postedDate\") || null,\n        organizationName: getString(\"organizationName\") || null,\n        department: getString(\"department\") || null\n    };\n}\n/** Build enrichmentJson.billing for imported RFP leads */ function makeBilling(unitPriceCents) {\n    return {\n        billing: {\n            billableEligible: false,\n            source: \"sam\",\n            unitPriceCents,\n            billedAt: null,\n            invoiceId: null\n        }\n    };\n}\n/** Combine enrichment facets */ function makeEnrichment(base, more) {\n    return asJson({\n        ...base ?? {},\n        ...more ?? {}\n    });\n}\n/** Get org-specific unit price (extend later to read PricingPlan) */ async function resolveUnitPriceCents(_orgId) {\n    // If you later add PricingPlan: read prisma.pricingPlan.findUnique({ where: { orgId } })\n    return DEFAULT_UNIT_PRICE_CENTS;\n}\nasync function handler(req, res) {\n    try {\n        if (req.method !== \"POST\") {\n            res.setHeader(\"Allow\", \"POST\");\n            return res.status(405).end(\"Method Not Allowed\");\n        }\n        if (!await (0,_lib_rbac__WEBPACK_IMPORTED_MODULE_1__.assertPermission)(req, res, _lib_rbac__WEBPACK_IMPORTED_MODULE_1__.PERMS.LEAD_CREATE)) return;\n        const orgId = await (0,_lib_rbac__WEBPACK_IMPORTED_MODULE_1__.getOrgIdFromReq)(req);\n        if (!orgId) return res.status(400).json({\n            ok: false,\n            error: \"Missing org\"\n        });\n        const apiKey = process.env.SAM_API_KEY;\n        if (!apiKey) {\n            return res.status(400).json({\n                ok: false,\n                error: \"Missing SAM_API_KEY\"\n            });\n        }\n        // Body can carry search inputs like { q, naics, psc, postedFrom, postedTo, state, city, limit }\n        const body = req.body ?? {};\n        const q = String(body.q ?? \"\").trim();\n        const naics = typeof body.naics === \"string\" ? body.naics : undefined;\n        const psc = typeof body.psc === \"string\" ? body.psc : undefined;\n        const postedFrom = String(body.postedFrom ?? \"\");\n        const postedTo = String(body.postedTo ?? \"\");\n        const limit = Math.min(Math.max(parseInt(String(body.limit ?? \"50\"), 10) || 50, 1), 200);\n        const params = new URLSearchParams();\n        params.set(\"api_key\", apiKey);\n        if (q) params.set(\"q\", q);\n        if (naics) params.set(\"naics\", naics);\n        if (psc) params.set(\"psc\", psc);\n        if (postedFrom) params.set(\"postedFrom\", postedFrom);\n        if (postedTo) params.set(\"postedTo\", postedTo);\n        params.set(\"limit\", String(limit));\n        // You can add more SAM filters here if you were using them.\n        const url = `${SAM_BASE}?${params.toString()}`;\n        // Fetch SAM.gov opportunities\n        const resp = await fetch(url, {\n            method: \"GET\"\n        });\n        if (!resp.ok) {\n            const text = await resp.text().catch(()=>\"\");\n            return res.status(502).json({\n                ok: false,\n                error: `SAM fetch failed (${resp.status}): ${text.slice(0, 500)}`\n            });\n        }\n        const payload = await resp.json().catch(()=>({}));\n        const pObj = payload;\n        const opportunitiesData = pObj && Array.isArray(pObj[\"opportunitiesData\"]) ? pObj[\"opportunitiesData\"] : null;\n        const dataArr = pObj && Array.isArray(pObj[\"data\"]) ? pObj[\"data\"] : null;\n        const results = opportunitiesData ?? dataArr ?? [];\n        if (!Array.isArray(results) || results.length === 0) {\n            return res.status(200).json({\n                ok: true,\n                count: 0,\n                items: [],\n                totalCents: 0,\n                totalDollars: \"0.00\"\n            });\n        }\n        const unitPriceCents = await resolveUnitPriceCents(orgId);\n        const items = [];\n        // Insert (idempotent-ish): if a lead already exists for same noticeId/org, skip create\n        for (const raw of results){\n            const r = normalizeSamItem(raw);\n            const noticeId = r.noticeId;\n            if (!noticeId) {\n                items.push({\n                    sourceType: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.LeadSource.RFP,\n                    unitPriceCents: unitPriceCents,\n                    created: false,\n                    skippedReason: \"missing_noticeId\"\n                });\n                continue;\n            }\n            const publicId = `RFP_${noticeId}`;\n            const company = r.agency || r.organizationName || r.department || null;\n            // check existing\n            const existing = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({\n                where: {\n                    orgId,\n                    publicId,\n                    sourceType: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.LeadSource.RFP\n                },\n                select: {\n                    id: true,\n                    publicId: true\n                }\n            });\n            if (existing) {\n                items.push({\n                    leadId: existing.id,\n                    publicId: existing.publicId,\n                    company,\n                    title: r.title || null,\n                    sourceType: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.LeadSource.RFP,\n                    unitPriceCents: unitPriceCents,\n                    created: false,\n                    skippedReason: \"exists\"\n                });\n                continue;\n            }\n            // Compute AI score + details via adapter (no assumptions about scoreLead types)\n            let aiScore = 0;\n            let scoreFactors = {};\n            try {\n                const { score, details } = await (0,_lib_leadScoringAdapter__WEBPACK_IMPORTED_MODULE_4__.scoreLeadNormalized)({\n                    // safely supply what your scorer needs; adapter shields type differences\n                    title: r.title ?? \"\",\n                    agency: company ?? \"\",\n                    naics: firstStr(r.naics) ?? \"\",\n                    psc: firstStr(r.psc) ?? \"\"\n                });\n                aiScore = typeof score === \"number\" ? score : 0;\n                scoreFactors = asJson(details ?? {});\n            } catch  {\n                aiScore = 0;\n                scoreFactors = asJson({});\n            }\n            const enrichment = makeEnrichment({\n                source: \"sam\",\n                rfp: {\n                    noticeId,\n                    title: r.title ?? null,\n                    sol: r.sol ?? null,\n                    naics: r.naics ?? null,\n                    psc: r.psc ?? null,\n                    agency: company,\n                    responseDate: r.responseDate ?? null,\n                    publishDate: r.publishDate ?? null\n                }\n            }, makeBilling(unitPriceCents));\n            // identityHash is more for person/company leads; here we hash noticeId + title/agency to be stable\n            const ih = identityHash({\n                email: null,\n                phoneE164: null,\n                company,\n                name: r.title ?? null\n            }) || sha256_24(noticeId);\n            const created = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.create({\n                data: {\n                    orgId,\n                    publicId,\n                    sourceType: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.LeadSource.RFP,\n                    sourceDetail: `sam:${noticeId}`,\n                    systemGenerated: true,\n                    rfp: asJson({\n                        noticeId,\n                        naics: r.naics ?? null,\n                        psc: r.psc ?? null\n                    }),\n                    company,\n                    contactName: null,\n                    email: null,\n                    phoneE164: null,\n                    website: null,\n                    serviceCode: null,\n                    address: null,\n                    addressLine1: null,\n                    addressLine2: null,\n                    city: null,\n                    state: null,\n                    zip: null,\n                    postalCode: null,\n                    country: \"US\",\n                    enrichmentJson: enrichment,\n                    aiScore,\n                    scoreFactors,\n                    notes: null,\n                    status: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.LeadStatus.NEW,\n                    identityHash: ih\n                },\n                select: {\n                    id: true,\n                    publicId: true\n                }\n            });\n            items.push({\n                leadId: created.id,\n                publicId: created.publicId,\n                company,\n                title: r.title ?? null,\n                sourceType: _prisma_client__WEBPACK_IMPORTED_MODULE_2__.LeadSource.RFP,\n                unitPriceCents: unitPriceCents,\n                created: true\n            });\n        }\n        const totalCents = items.filter((it)=>it.created).reduce((sum, it)=>sum + (it.unitPriceCents || 0), 0);\n        return res.status(200).json({\n            ok: true,\n            count: items.length,\n            totalCents,\n            totalDollars: (totalCents / 100).toFixed(2),\n            items\n        });\n    } catch (err) {\n        console.error(\"/api/integrations/sam/fetch error:\", err);\n        const msg = err?.message ?? \"Internal Server Error\";\n        return res.status(500).json({\n            ok: false,\n            error: msg\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/integrations/sam/fetch.ts\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fintegrations%2Fsam%2Ffetch&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fintegrations%2Fsam%2Ffetch.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();