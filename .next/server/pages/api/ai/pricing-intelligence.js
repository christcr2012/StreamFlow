"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ai/pricing-intelligence";
exports.ids = ["pages/api/ai/pricing-intelligence"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Fpricing-intelligence&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fai%2Fpricing-intelligence.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Fpricing-intelligence&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fai%2Fpricing-intelligence.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_ai_pricing_intelligence_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/pages/api/ai/pricing-intelligence.ts */ \"(api-node)/./src/pages/api/ai/pricing-intelligence.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_ai_pricing_intelligence_ts__WEBPACK_IMPORTED_MODULE_4__]);\n_src_pages_api_ai_pricing_intelligence_ts__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_ai_pricing_intelligence_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_ai_pricing_intelligence_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/ai/pricing-intelligence\",\n        pathname: \"/api/ai/pricing-intelligence\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_ai_pricing_intelligence_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/ai/pricing-intelligence\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/ai/pricing-intelligence\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Fpricing-intelligence&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fai%2Fpricing-intelligence.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/lib/aiHelper.ts":
/*!*****************************!*\
  !*** ./src/lib/aiHelper.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeLead: () => (/* binding */ analyzeLead),\n/* harmony export */   analyzeRFP: () => (/* binding */ analyzeRFP),\n/* harmony export */   generatePricingAdvice: () => (/* binding */ generatePricingAdvice),\n/* harmony export */   testAIConnection: () => (/* binding */ testAIConnection)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__]);\nopenai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// src/lib/aiHelper.ts\n// AI Integration Library - Lead Analysis and Business Intelligence\n//\n// PURPOSE:\n// Provides AI-powered analysis for lead generation, RFP evaluation, and business advice.\n// Uses OpenAI GPT-4o Mini for cost-effective analysis while maintaining high quality.\n//\n// FEATURES:\n// - Lead quality analysis and scoring enhancement\n// - RFP evaluation and bidding strategy recommendations  \n// - Pricing optimization suggestions\n// - Response template generation\n// - Competitive analysis insights\n//\n// COST OPTIMIZATION:\n// - Uses GPT-4o Mini ($0.15 input + $0.60 output per million tokens)\n// - Structured prompts to minimize token usage\n// - Caches common responses to reduce repeated calls\n// - Estimated cost: $15-25/month for active cleaning business\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n// However, we use GPT-4o Mini for cost efficiency - 15x cheaper than GPT-5\nconst MODEL = \"gpt-4o-mini\";\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/**\n * Analyze lead quality and provide actionable business intelligence\n * Enhances basic lead scoring with AI insights about opportunity and strategy\n */ async function analyzeLead(leadData) {\n    try {\n        const prompt = `\nAs an expert cleaning services business consultant, analyze this lead and provide actionable intelligence:\n\nLEAD DETAILS:\n- Title: ${leadData.title || 'N/A'}\n- Description: ${leadData.description || 'N/A'}\n- Location: ${leadData.location || 'N/A'}\n- Source: ${leadData.sourceType || 'N/A'}\n- Agency/Client: ${leadData.agency || 'N/A'}\n- Estimated Value: ${leadData.estimatedValue ? `$${leadData.estimatedValue.toLocaleString()}` : 'N/A'}\n- Requirements: ${leadData.requirements || 'N/A'}\n\nBUSINESS CONTEXT:\n- Northern Colorado cleaning business based in Sterling\n- Specializes in commercial janitorial, post-construction cleanup, carpet cleaning\n- Competes on speed, quality, and local presence\n- Serves government, healthcare, education, and commercial sectors\n\nRespond with JSON in this exact format:\n{\n  \"qualityScore\": number (1-100),\n  \"urgencyLevel\": \"immediate|high|medium|low\",\n  \"keyOpportunities\": [\"specific opportunity 1\", \"opportunity 2\"],\n  \"potentialChallenges\": [\"challenge 1\", \"challenge 2\"],\n  \"recommendedAction\": \"specific next step\",\n  \"estimatedValue\": \"value range estimate\",\n  \"confidence\": number (0-1)\n}\n`;\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 800\n        });\n        const analysis = JSON.parse(response.choices[0].message.content || '{}');\n        // Validate and provide defaults\n        return {\n            qualityScore: Math.max(1, Math.min(100, analysis.qualityScore || 50)),\n            urgencyLevel: [\n                'immediate',\n                'high',\n                'medium',\n                'low'\n            ].includes(analysis.urgencyLevel) ? analysis.urgencyLevel : 'medium',\n            keyOpportunities: Array.isArray(analysis.keyOpportunities) ? analysis.keyOpportunities : [],\n            potentialChallenges: Array.isArray(analysis.potentialChallenges) ? analysis.potentialChallenges : [],\n            recommendedAction: analysis.recommendedAction || 'Review lead details and follow up',\n            estimatedValue: analysis.estimatedValue || 'Unable to estimate',\n            confidence: Math.max(0, Math.min(1, analysis.confidence || 0.7))\n        };\n    } catch (error) {\n        console.error('AI lead analysis error:', error);\n        // Return safe defaults if AI fails\n        return {\n            qualityScore: 50,\n            urgencyLevel: 'medium',\n            keyOpportunities: [\n                'Standard cleaning opportunity'\n            ],\n            potentialChallenges: [\n                'Limited information available'\n            ],\n            recommendedAction: 'Contact lead for more details',\n            estimatedValue: 'Requires assessment',\n            confidence: 0.3\n        };\n    }\n}\n/**\n * Generate RFP bidding strategy and response recommendations\n * Provides competitive intelligence and positioning advice\n */ async function analyzeRFP(rfpData) {\n    try {\n        const prompt = `\nAs a government contracting expert for cleaning services, analyze this RFP and provide a winning strategy:\n\nRFP DETAILS:\n- Title: ${rfpData.title || 'N/A'}\n- Description: ${rfpData.description || 'N/A'}\n- Requirements: ${rfpData.requirements || 'N/A'}\n- Agency: ${rfpData.agency || 'N/A'}\n- Deadline: ${rfpData.responseDeadline || 'N/A'}\n- Estimated Value: ${rfpData.estimatedValue ? `$${rfpData.estimatedValue.toLocaleString()}` : 'N/A'}\n- Location: ${rfpData.location || 'N/A'}\n\nCOMPANY PROFILE:\n- Regional cleaning company based in Sterling, Colorado\n- 10+ years experience in government, healthcare, education contracts\n- NAICS 561720 (Janitorial Services), bonded and insured\n- Local presence advantage in Northern Colorado\n- Known for reliability, compliance, and competitive pricing\n\nRespond with JSON in this exact format:\n{\n  \"competitiveLandscape\": \"analysis of likely competition\",\n  \"keyRequirements\": [\"requirement 1\", \"requirement 2\"],\n  \"pricingStrategy\": \"recommended pricing approach\",\n  \"winFactors\": [\"factor 1\", \"factor 2\"],\n  \"riskFactors\": [\"risk 1\", \"risk 2\"],\n  \"responseTemplate\": \"outline for RFP response\"\n}\n`;\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 1000\n        });\n        const strategy = JSON.parse(response.choices[0].message.content || '{}');\n        return {\n            competitiveLandscape: strategy.competitiveLandscape || 'Analysis not available',\n            keyRequirements: Array.isArray(strategy.keyRequirements) ? strategy.keyRequirements : [],\n            pricingStrategy: strategy.pricingStrategy || 'Competitive pricing recommended',\n            winFactors: Array.isArray(strategy.winFactors) ? strategy.winFactors : [],\n            riskFactors: Array.isArray(strategy.riskFactors) ? strategy.riskFactors : [],\n            responseTemplate: strategy.responseTemplate || 'Standard RFP response template'\n        };\n    } catch (error) {\n        console.error('AI RFP analysis error:', error);\n        return {\n            competitiveLandscape: 'Analysis unavailable',\n            keyRequirements: [\n                'Review RFP requirements'\n            ],\n            pricingStrategy: 'Research market rates',\n            winFactors: [\n                'Local presence',\n                'Competitive pricing'\n            ],\n            riskFactors: [\n                'Limited information'\n            ],\n            responseTemplate: 'Standard response format needed'\n        };\n    }\n}\n/**\n * Generate pricing recommendations based on project details\n * Considers market rates, project complexity, and competitive factors\n */ async function generatePricingAdvice(projectData) {\n    try {\n        const prompt = `\nAs a commercial cleaning pricing expert in Northern Colorado, provide pricing recommendations:\n\nPROJECT DETAILS:\n- Service Type: ${projectData.serviceType || 'General cleaning'}\n- Square Footage: ${projectData.squareFootage || 'Unknown'}\n- Frequency: ${projectData.frequency || 'Unknown'}\n- Location: ${projectData.location || 'Northern Colorado'}\n- Special Requirements: ${projectData.specialRequirements || 'Standard cleaning'}\n- Timeline: ${projectData.timeline || 'Standard'}\n- Client Type: ${projectData.clientType || 'Commercial'}\n\nMARKET CONTEXT:\n- Northern Colorado rates: $0.08-0.15/sq ft for basic janitorial\n- Post-construction cleanup: $0.20-0.35/sq ft\n- Carpet cleaning: $0.25-0.50/sq ft\n- Government contracts typically 10-20% below commercial rates\n- Local competition from regional and national chains\n\nRespond with JSON in this exact format:\n{\n  \"suggestedRange\": {\"min\": number, \"max\": number},\n  \"priceJustification\": \"explanation of pricing rationale\",\n  \"competitiveFactors\": [\"factor 1\", \"factor 2\"],\n  \"valueProposition\": \"key selling points for this price\",\n  \"negotiationTips\": [\"tip 1\", \"tip 2\"]\n}\n`;\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 800\n        });\n        const pricing = JSON.parse(response.choices[0].message.content || '{}');\n        return {\n            suggestedRange: {\n                min: pricing.suggestedRange?.min || 1000,\n                max: pricing.suggestedRange?.max || 5000\n            },\n            priceJustification: pricing.priceJustification || 'Competitive market rate',\n            competitiveFactors: Array.isArray(pricing.competitiveFactors) ? pricing.competitiveFactors : [],\n            valueProposition: pricing.valueProposition || 'Quality service at competitive rates',\n            negotiationTips: Array.isArray(pricing.negotiationTips) ? pricing.negotiationTips : []\n        };\n    } catch (error) {\n        console.error('AI pricing analysis error:', error);\n        return {\n            suggestedRange: {\n                min: 1000,\n                max: 5000\n            },\n            priceJustification: 'Market research needed',\n            competitiveFactors: [\n                'Local market conditions'\n            ],\n            valueProposition: 'Reliable local service',\n            negotiationTips: [\n                'Emphasize quality and reliability'\n            ]\n        };\n    }\n}\n/**\n * Test OpenAI API connection and functionality\n * Returns simple analysis to verify everything is working\n */ async function testAIConnection() {\n    try {\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: \"Respond with JSON: {\\\"status\\\": \\\"working\\\", \\\"message\\\": \\\"AI integration successful\\\"}\"\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 100\n        });\n        const result = JSON.parse(response.choices[0].message.content || '{}');\n        return {\n            success: true,\n            message: result.message || 'AI connection verified',\n            model: MODEL\n        };\n    } catch (error) {\n        return {\n            success: false,\n            message: `AI connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            model: MODEL\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/aiHelper.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/ai/pricing-intelligence.ts":
/*!**************************************************!*\
  !*** ./src/pages/api/ai/pricing-intelligence.ts ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_aiHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/aiHelper */ \"(api-node)/./src/lib/aiHelper.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_aiHelper__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_aiHelper__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// AI Pricing Intelligence API\n// Smart pricing recommendations based on project details, market conditions, and competitive factors\n\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    try {\n        const { serviceType = 'janitorial', squareFootage, frequency = 'daily', location = 'Northern Colorado', specialRequirements = '', timeline = 'standard', clientType = 'commercial', projectDuration, competitorCount = 'moderate' } = req.body;\n        // Generate AI-powered pricing intelligence\n        const pricingAdvice = await (0,_lib_aiHelper__WEBPACK_IMPORTED_MODULE_0__.generatePricingAdvice)({\n            serviceType,\n            squareFootage,\n            frequency,\n            location,\n            specialRequirements,\n            timeline,\n            clientType\n        });\n        // Enhance with additional business intelligence\n        const enhancedAnalysis = {\n            pricingAdvice,\n            marketIntelligence: generateMarketIntelligence(location, clientType, serviceType),\n            competitiveStrategy: generateCompetitiveStrategy(squareFootage, location, competitorCount),\n            riskAssessment: assessPricingRisks(pricingAdvice, specialRequirements, clientType),\n            profitabilityAnalysis: analyzeProfitability(pricingAdvice.suggestedRange, squareFootage, frequency),\n            recommendedPositioning: getPositioningStrategy(pricingAdvice, location, clientType)\n        };\n        res.status(200).json({\n            success: true,\n            analysis: enhancedAnalysis,\n            projectDetails: {\n                serviceType,\n                squareFootage,\n                frequency,\n                location,\n                clientType,\n                specialRequirements\n            },\n            generatedAt: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error('Pricing intelligence error:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Pricing analysis failed'\n        });\n    }\n}\n// Generate market intelligence based on location and client type\nfunction generateMarketIntelligence(location, clientType, serviceType) {\n    const intel = {\n        marketConditions: 'moderate',\n        competitionLevel: 'medium',\n        pricingTrends: 'stable',\n        seasonalFactors: [],\n        regionalAdvantages: []\n    };\n    // Location-specific analysis\n    if (location?.toLowerCase().includes('denver')) {\n        intel.competitionLevel = 'high';\n        intel.regionalAdvantages.push('Access to large commercial market', 'Higher budget tolerance');\n    } else if (location?.toLowerCase().includes('greeley') || location?.toLowerCase().includes('sterling')) {\n        intel.competitionLevel = 'low';\n        intel.regionalAdvantages.push('Local market knowledge', 'Reduced travel costs', 'Community relationships');\n    }\n    // Client type analysis\n    if (clientType === 'government') {\n        intel.pricingTrends = 'competitive';\n        intel.seasonalFactors.push('Budget cycles affect timing', 'Q4 spending rushes');\n    } else if (clientType === 'healthcare') {\n        intel.marketConditions = 'premium';\n        intel.seasonalFactors.push('Infection control drives demand', 'Higher standards required');\n    }\n    return intel;\n}\n// Generate competitive positioning strategy\nfunction generateCompetitiveStrategy(squareFootage, location, competitorCount) {\n    const strategy = {\n        positioningApproach: 'value-based',\n        keyDifferentiators: [],\n        pricingTactic: 'competitive',\n        winProbability: 'medium'\n    };\n    // Size-based strategy\n    if (squareFootage && squareFootage > 100000) {\n        strategy.positioningApproach = 'capability-focused';\n        strategy.keyDifferentiators.push('Large facility expertise', 'Operational efficiency at scale');\n    } else if (squareFootage && squareFootage < 25000) {\n        strategy.positioningApproach = 'service-focused';\n        strategy.keyDifferentiators.push('Personal attention', 'Flexible scheduling');\n    }\n    // Location-based advantages\n    if (location?.toLowerCase().includes('sterling') || location?.toLowerCase().includes('greeley')) {\n        strategy.keyDifferentiators.push('Local presence reduces costs', 'Faster emergency response');\n        strategy.winProbability = 'high';\n    }\n    // Competition-based tactics\n    if (competitorCount === 'low') {\n        strategy.pricingTactic = 'premium';\n    } else if (competitorCount === 'high') {\n        strategy.pricingTactic = 'aggressive';\n    }\n    return strategy;\n}\n// Assess pricing risks and mitigation strategies\nfunction assessPricingRisks(pricingAdvice, specialRequirements, clientType) {\n    const risks = [];\n    if (pricingAdvice.suggestedRange.min < 0.08) {\n        risks.push({\n            risk: 'Low margin risk',\n            impact: 'medium',\n            mitigation: 'Emphasize value-added services to justify pricing'\n        });\n    }\n    if (specialRequirements?.toLowerCase().includes('security')) {\n        risks.push({\n            risk: 'Security clearance costs',\n            impact: 'high',\n            mitigation: 'Build clearance costs into pricing, highlight as differentiator'\n        });\n    }\n    if (clientType === 'government') {\n        risks.push({\n            risk: 'Payment delays',\n            impact: 'medium',\n            mitigation: 'Factor cash flow considerations into pricing and terms'\n        });\n    }\n    return risks;\n}\n// Analyze profitability metrics\nfunction analyzeProfitability(suggestedRange, squareFootage, frequency) {\n    const avgPrice = (suggestedRange.min + suggestedRange.max) / 2;\n    const sqft = squareFootage || 50000;\n    let frequencyMultiplier = 1;\n    if (frequency?.includes('daily')) frequencyMultiplier = 250; // work days per year\n    else if (frequency?.includes('weekly')) frequencyMultiplier = 52;\n    else if (frequency?.includes('monthly')) frequencyMultiplier = 12;\n    const annualRevenue = avgPrice * sqft * frequencyMultiplier;\n    const estimatedMargin = 0.15; // 15% typical margin\n    return {\n        projectedAnnualRevenue: Math.round(annualRevenue),\n        estimatedGrossProfit: Math.round(annualRevenue * estimatedMargin),\n        marginAnalysis: estimatedMargin,\n        profitabilityRating: annualRevenue > 100000 ? 'high' : annualRevenue > 25000 ? 'medium' : 'low'\n    };\n}\n// Get positioning strategy recommendations\nfunction getPositioningStrategy(pricingAdvice, location, clientType) {\n    const avgPrice = (pricingAdvice.suggestedRange.min + pricingAdvice.suggestedRange.max) / 2;\n    let positioning = 'value';\n    if (avgPrice > 0.12) positioning = 'premium';\n    else if (avgPrice < 0.08) positioning = 'cost-leader';\n    const strategies = {\n        value: 'Position as best value with strong local presence and reliable service',\n        premium: 'Emphasize quality, compliance, and specialized expertise',\n        'cost-leader': 'Focus on efficiency and competitive pricing'\n    };\n    return {\n        recommendedPositioning: positioning,\n        strategy: strategies[positioning],\n        keyMessages: generateKeyMessages(positioning, location, clientType)\n    };\n}\n// Generate key positioning messages\nfunction generateKeyMessages(positioning, location, clientType) {\n    const baseMessages = {\n        value: [\n            'Reliable local service',\n            'Competitive pricing',\n            'Proven track record'\n        ],\n        premium: [\n            'Industry expertise',\n            'Compliance excellence',\n            'Superior quality'\n        ],\n        'cost-leader': [\n            'Most competitive rates',\n            'Efficient operations',\n            'No hidden fees'\n        ]\n    };\n    let messages = baseMessages[positioning] || baseMessages.value;\n    // Add location-specific messages\n    if (location?.toLowerCase().includes('sterling') || location?.toLowerCase().includes('greeley')) {\n        messages.push('Local Northern Colorado presence');\n    }\n    // Add client-specific messages\n    if (clientType === 'government') {\n        messages.push('Federal contracting experience');\n    } else if (clientType === 'healthcare') {\n        messages.push('Healthcare facility expertise');\n    }\n    return messages;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9wYWdlcy9hcGkvYWkvcHJpY2luZy1pbnRlbGxpZ2VuY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSw4QkFBOEI7QUFDOUIscUdBQXFHO0FBRTlDO0FBRXhDLGVBQWVDLFFBQVFDLEdBQW1CLEVBQUVDLEdBQW9CO0lBQzdFLElBQUlELElBQUlFLE1BQU0sS0FBSyxRQUFRO1FBQ3pCLE9BQU9ELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFxQjtJQUM1RDtJQUVBLElBQUk7UUFDRixNQUFNLEVBQ0pDLGNBQWMsWUFBWSxFQUMxQkMsYUFBYSxFQUNiQyxZQUFZLE9BQU8sRUFDbkJDLFdBQVcsbUJBQW1CLEVBQzlCQyxzQkFBc0IsRUFBRSxFQUN4QkMsV0FBVyxVQUFVLEVBQ3JCQyxhQUFhLFlBQVksRUFDekJDLGVBQWUsRUFDZkMsa0JBQWtCLFVBQVUsRUFDN0IsR0FBR2QsSUFBSWUsSUFBSTtRQUVaLDJDQUEyQztRQUMzQyxNQUFNQyxnQkFBZ0IsTUFBTWxCLG9FQUFxQkEsQ0FBQztZQUNoRFE7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7UUFDRjtRQUVBLGdEQUFnRDtRQUNoRCxNQUFNSyxtQkFBbUI7WUFDdkJEO1lBQ0FFLG9CQUFvQkMsMkJBQTJCVixVQUFVRyxZQUFZTjtZQUNyRWMscUJBQXFCQyw0QkFBNEJkLGVBQWVFLFVBQVVLO1lBQzFFUSxnQkFBZ0JDLG1CQUFtQlAsZUFBZU4scUJBQXFCRTtZQUN2RVksdUJBQXVCQyxxQkFBcUJULGNBQWNVLGNBQWMsRUFBRW5CLGVBQWVDO1lBQ3pGbUIsd0JBQXdCQyx1QkFBdUJaLGVBQWVQLFVBQVVHO1FBQzFFO1FBRUFYLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDbkJ5QixTQUFTO1lBQ1RDLFVBQVViO1lBQ1ZjLGdCQUFnQjtnQkFDZHpCO2dCQUNBQztnQkFDQUM7Z0JBQ0FDO2dCQUNBRztnQkFDQUY7WUFDRjtZQUNBc0IsYUFBYSxJQUFJQyxPQUFPQyxXQUFXO1FBQ3JDO0lBRUYsRUFBRSxPQUFPN0IsT0FBTztRQUNkOEIsUUFBUTlCLEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDSixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQ25CeUIsU0FBUztZQUNUeEIsT0FBT0EsaUJBQWlCK0IsUUFBUS9CLE1BQU1nQyxPQUFPLEdBQUc7UUFDbEQ7SUFDRjtBQUNGO0FBRUEsaUVBQWlFO0FBQ2pFLFNBQVNsQiwyQkFBMkJWLFFBQWdCLEVBQUVHLFVBQWtCLEVBQUVOLFdBQW1CO0lBQzNGLE1BQU1nQyxRQUFRO1FBQ1pDLGtCQUFrQjtRQUNsQkMsa0JBQWtCO1FBQ2xCQyxlQUFlO1FBQ2ZDLGlCQUFpQixFQUFFO1FBQ25CQyxvQkFBb0IsRUFBRTtJQUN4QjtJQUVBLDZCQUE2QjtJQUM3QixJQUFJbEMsVUFBVW1DLGNBQWNDLFNBQVMsV0FBVztRQUM5Q1AsTUFBTUUsZ0JBQWdCLEdBQUc7UUFDekJGLE1BQU1LLGtCQUFrQixDQUFDRyxJQUFJLENBQUMscUNBQXFDO0lBQ3JFLE9BQU8sSUFBSXJDLFVBQVVtQyxjQUFjQyxTQUFTLGNBQWNwQyxVQUFVbUMsY0FBY0MsU0FBUyxhQUFhO1FBQ3RHUCxNQUFNRSxnQkFBZ0IsR0FBRztRQUN6QkYsTUFBTUssa0JBQWtCLENBQUNHLElBQUksQ0FBQywwQkFBMEIsd0JBQXdCO0lBQ2xGO0lBRUEsdUJBQXVCO0lBQ3ZCLElBQUlsQyxlQUFlLGNBQWM7UUFDL0IwQixNQUFNRyxhQUFhLEdBQUc7UUFDdEJILE1BQU1JLGVBQWUsQ0FBQ0ksSUFBSSxDQUFDLCtCQUErQjtJQUM1RCxPQUFPLElBQUlsQyxlQUFlLGNBQWM7UUFDdEMwQixNQUFNQyxnQkFBZ0IsR0FBRztRQUN6QkQsTUFBTUksZUFBZSxDQUFDSSxJQUFJLENBQUMsbUNBQW1DO0lBQ2hFO0lBRUEsT0FBT1I7QUFDVDtBQUVBLDRDQUE0QztBQUM1QyxTQUFTakIsNEJBQTRCZCxhQUFxQixFQUFFRSxRQUFnQixFQUFFSyxlQUF1QjtJQUNuRyxNQUFNaUMsV0FBVztRQUNmQyxxQkFBcUI7UUFDckJDLG9CQUFvQixFQUFFO1FBQ3RCQyxlQUFlO1FBQ2ZDLGdCQUFnQjtJQUNsQjtJQUVBLHNCQUFzQjtJQUN0QixJQUFJNUMsaUJBQWlCQSxnQkFBZ0IsUUFBUTtRQUMzQ3dDLFNBQVNDLG1CQUFtQixHQUFHO1FBQy9CRCxTQUFTRSxrQkFBa0IsQ0FBQ0gsSUFBSSxDQUFDLDRCQUE0QjtJQUMvRCxPQUFPLElBQUl2QyxpQkFBaUJBLGdCQUFnQixPQUFPO1FBQ2pEd0MsU0FBU0MsbUJBQW1CLEdBQUc7UUFDL0JELFNBQVNFLGtCQUFrQixDQUFDSCxJQUFJLENBQUMsc0JBQXNCO0lBQ3pEO0lBRUEsNEJBQTRCO0lBQzVCLElBQUlyQyxVQUFVbUMsY0FBY0MsU0FBUyxlQUFlcEMsVUFBVW1DLGNBQWNDLFNBQVMsWUFBWTtRQUMvRkUsU0FBU0Usa0JBQWtCLENBQUNILElBQUksQ0FBQyxnQ0FBZ0M7UUFDakVDLFNBQVNJLGNBQWMsR0FBRztJQUM1QjtJQUVBLDRCQUE0QjtJQUM1QixJQUFJckMsb0JBQW9CLE9BQU87UUFDN0JpQyxTQUFTRyxhQUFhLEdBQUc7SUFDM0IsT0FBTyxJQUFJcEMsb0JBQW9CLFFBQVE7UUFDckNpQyxTQUFTRyxhQUFhLEdBQUc7SUFDM0I7SUFFQSxPQUFPSDtBQUNUO0FBRUEsaURBQWlEO0FBQ2pELFNBQVN4QixtQkFBbUJQLGFBQWtCLEVBQUVOLG1CQUEyQixFQUFFRSxVQUFrQjtJQUM3RixNQUFNd0MsUUFBUSxFQUFFO0lBRWhCLElBQUlwQyxjQUFjVSxjQUFjLENBQUMyQixHQUFHLEdBQUcsTUFBTTtRQUMzQ0QsTUFBTU4sSUFBSSxDQUFDO1lBQ1RRLE1BQU07WUFDTkMsUUFBUTtZQUNSQyxZQUFZO1FBQ2Q7SUFDRjtJQUVBLElBQUk5QyxxQkFBcUJrQyxjQUFjQyxTQUFTLGFBQWE7UUFDM0RPLE1BQU1OLElBQUksQ0FBQztZQUNUUSxNQUFNO1lBQ05DLFFBQVE7WUFDUkMsWUFBWTtRQUNkO0lBQ0Y7SUFFQSxJQUFJNUMsZUFBZSxjQUFjO1FBQy9Cd0MsTUFBTU4sSUFBSSxDQUFDO1lBQ1RRLE1BQU07WUFDTkMsUUFBUTtZQUNSQyxZQUFZO1FBQ2Q7SUFDRjtJQUVBLE9BQU9KO0FBQ1Q7QUFFQSxnQ0FBZ0M7QUFDaEMsU0FBUzNCLHFCQUFxQkMsY0FBbUIsRUFBRW5CLGFBQXFCLEVBQUVDLFNBQWlCO0lBQ3pGLE1BQU1pRCxXQUFXLENBQUMvQixlQUFlMkIsR0FBRyxHQUFHM0IsZUFBZWdDLEdBQUcsSUFBSTtJQUM3RCxNQUFNQyxPQUFPcEQsaUJBQWlCO0lBRTlCLElBQUlxRCxzQkFBc0I7SUFDMUIsSUFBSXBELFdBQVdxQyxTQUFTLFVBQVVlLHNCQUFzQixLQUFLLHFCQUFxQjtTQUM3RSxJQUFJcEQsV0FBV3FDLFNBQVMsV0FBV2Usc0JBQXNCO1NBQ3pELElBQUlwRCxXQUFXcUMsU0FBUyxZQUFZZSxzQkFBc0I7SUFFL0QsTUFBTUMsZ0JBQWdCSixXQUFXRSxPQUFPQztJQUN4QyxNQUFNRSxrQkFBa0IsTUFBTSxxQkFBcUI7SUFFbkQsT0FBTztRQUNMQyx3QkFBd0JDLEtBQUtDLEtBQUssQ0FBQ0o7UUFDbkNLLHNCQUFzQkYsS0FBS0MsS0FBSyxDQUFDSixnQkFBZ0JDO1FBQ2pESyxnQkFBZ0JMO1FBQ2hCTSxxQkFBcUJQLGdCQUFnQixTQUFTLFNBQVNBLGdCQUFnQixRQUFRLFdBQVc7SUFDNUY7QUFDRjtBQUVBLDJDQUEyQztBQUMzQyxTQUFTakMsdUJBQXVCWixhQUFrQixFQUFFUCxRQUFnQixFQUFFRyxVQUFrQjtJQUN0RixNQUFNNkMsV0FBVyxDQUFDekMsY0FBY1UsY0FBYyxDQUFDMkIsR0FBRyxHQUFHckMsY0FBY1UsY0FBYyxDQUFDZ0MsR0FBRyxJQUFJO0lBRXpGLElBQUlXLGNBQWM7SUFDbEIsSUFBSVosV0FBVyxNQUFNWSxjQUFjO1NBQzlCLElBQUlaLFdBQVcsTUFBTVksY0FBYztJQUV4QyxNQUFNQyxhQUFhO1FBQ2pCQyxPQUFPO1FBQ1BDLFNBQVM7UUFDVCxlQUFlO0lBQ2pCO0lBRUEsT0FBTztRQUNMN0Msd0JBQXdCMEM7UUFDeEJ0QixVQUFVdUIsVUFBVSxDQUFDRCxZQUF1QztRQUM1REksYUFBYUMsb0JBQW9CTCxhQUFhNUQsVUFBVUc7SUFDMUQ7QUFDRjtBQUVBLG9DQUFvQztBQUNwQyxTQUFTOEQsb0JBQW9CTCxXQUFtQixFQUFFNUQsUUFBZ0IsRUFBRUcsVUFBa0I7SUFDcEYsTUFBTStELGVBQWU7UUFDbkJKLE9BQU87WUFBQztZQUEwQjtZQUF1QjtTQUFzQjtRQUMvRUMsU0FBUztZQUFDO1lBQXNCO1lBQXlCO1NBQW1CO1FBQzVFLGVBQWU7WUFBQztZQUEwQjtZQUF3QjtTQUFpQjtJQUNyRjtJQUVBLElBQUlJLFdBQVdELFlBQVksQ0FBQ04sWUFBeUMsSUFBSU0sYUFBYUosS0FBSztJQUUzRixpQ0FBaUM7SUFDakMsSUFBSTlELFVBQVVtQyxjQUFjQyxTQUFTLGVBQWVwQyxVQUFVbUMsY0FBY0MsU0FBUyxZQUFZO1FBQy9GK0IsU0FBUzlCLElBQUksQ0FBQztJQUNoQjtJQUVBLCtCQUErQjtJQUMvQixJQUFJbEMsZUFBZSxjQUFjO1FBQy9CZ0UsU0FBUzlCLElBQUksQ0FBQztJQUNoQixPQUFPLElBQUlsQyxlQUFlLGNBQWM7UUFDdENnRSxTQUFTOUIsSUFBSSxDQUFDO0lBQ2hCO0lBRUEsT0FBTzhCO0FBQ1QiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc3JjL3BhZ2VzL2FwaS9haS9wcmljaW5nLWludGVsbGlnZW5jZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBSSBQcmljaW5nIEludGVsbGlnZW5jZSBBUElcbi8vIFNtYXJ0IHByaWNpbmcgcmVjb21tZW5kYXRpb25zIGJhc2VkIG9uIHByb2plY3QgZGV0YWlscywgbWFya2V0IGNvbmRpdGlvbnMsIGFuZCBjb21wZXRpdGl2ZSBmYWN0b3JzXG5pbXBvcnQgdHlwZSB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tIFwibmV4dFwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVQcmljaW5nQWR2aWNlIH0gZnJvbSBcIkAvbGliL2FpSGVscGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3Qge1xuICAgICAgc2VydmljZVR5cGUgPSAnamFuaXRvcmlhbCcsXG4gICAgICBzcXVhcmVGb290YWdlLFxuICAgICAgZnJlcXVlbmN5ID0gJ2RhaWx5JyxcbiAgICAgIGxvY2F0aW9uID0gJ05vcnRoZXJuIENvbG9yYWRvJyxcbiAgICAgIHNwZWNpYWxSZXF1aXJlbWVudHMgPSAnJyxcbiAgICAgIHRpbWVsaW5lID0gJ3N0YW5kYXJkJyxcbiAgICAgIGNsaWVudFR5cGUgPSAnY29tbWVyY2lhbCcsXG4gICAgICBwcm9qZWN0RHVyYXRpb24sXG4gICAgICBjb21wZXRpdG9yQ291bnQgPSAnbW9kZXJhdGUnXG4gICAgfSA9IHJlcS5ib2R5O1xuXG4gICAgLy8gR2VuZXJhdGUgQUktcG93ZXJlZCBwcmljaW5nIGludGVsbGlnZW5jZVxuICAgIGNvbnN0IHByaWNpbmdBZHZpY2UgPSBhd2FpdCBnZW5lcmF0ZVByaWNpbmdBZHZpY2Uoe1xuICAgICAgc2VydmljZVR5cGUsXG4gICAgICBzcXVhcmVGb290YWdlLFxuICAgICAgZnJlcXVlbmN5LFxuICAgICAgbG9jYXRpb24sXG4gICAgICBzcGVjaWFsUmVxdWlyZW1lbnRzLFxuICAgICAgdGltZWxpbmUsXG4gICAgICBjbGllbnRUeXBlXG4gICAgfSk7XG5cbiAgICAvLyBFbmhhbmNlIHdpdGggYWRkaXRpb25hbCBidXNpbmVzcyBpbnRlbGxpZ2VuY2VcbiAgICBjb25zdCBlbmhhbmNlZEFuYWx5c2lzID0ge1xuICAgICAgcHJpY2luZ0FkdmljZSxcbiAgICAgIG1hcmtldEludGVsbGlnZW5jZTogZ2VuZXJhdGVNYXJrZXRJbnRlbGxpZ2VuY2UobG9jYXRpb24sIGNsaWVudFR5cGUsIHNlcnZpY2VUeXBlKSxcbiAgICAgIGNvbXBldGl0aXZlU3RyYXRlZ3k6IGdlbmVyYXRlQ29tcGV0aXRpdmVTdHJhdGVneShzcXVhcmVGb290YWdlLCBsb2NhdGlvbiwgY29tcGV0aXRvckNvdW50KSxcbiAgICAgIHJpc2tBc3Nlc3NtZW50OiBhc3Nlc3NQcmljaW5nUmlza3MocHJpY2luZ0FkdmljZSwgc3BlY2lhbFJlcXVpcmVtZW50cywgY2xpZW50VHlwZSksXG4gICAgICBwcm9maXRhYmlsaXR5QW5hbHlzaXM6IGFuYWx5emVQcm9maXRhYmlsaXR5KHByaWNpbmdBZHZpY2Uuc3VnZ2VzdGVkUmFuZ2UsIHNxdWFyZUZvb3RhZ2UsIGZyZXF1ZW5jeSksXG4gICAgICByZWNvbW1lbmRlZFBvc2l0aW9uaW5nOiBnZXRQb3NpdGlvbmluZ1N0cmF0ZWd5KHByaWNpbmdBZHZpY2UsIGxvY2F0aW9uLCBjbGllbnRUeXBlKVxuICAgIH07XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgYW5hbHlzaXM6IGVuaGFuY2VkQW5hbHlzaXMsXG4gICAgICBwcm9qZWN0RGV0YWlsczoge1xuICAgICAgICBzZXJ2aWNlVHlwZSxcbiAgICAgICAgc3F1YXJlRm9vdGFnZSxcbiAgICAgICAgZnJlcXVlbmN5LFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgY2xpZW50VHlwZSxcbiAgICAgICAgc3BlY2lhbFJlcXVpcmVtZW50c1xuICAgICAgfSxcbiAgICAgIGdlbmVyYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9KTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1ByaWNpbmcgaW50ZWxsaWdlbmNlIGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdQcmljaW5nIGFuYWx5c2lzIGZhaWxlZCdcbiAgICB9KTtcbiAgfVxufVxuXG4vLyBHZW5lcmF0ZSBtYXJrZXQgaW50ZWxsaWdlbmNlIGJhc2VkIG9uIGxvY2F0aW9uIGFuZCBjbGllbnQgdHlwZVxuZnVuY3Rpb24gZ2VuZXJhdGVNYXJrZXRJbnRlbGxpZ2VuY2UobG9jYXRpb246IHN0cmluZywgY2xpZW50VHlwZTogc3RyaW5nLCBzZXJ2aWNlVHlwZTogc3RyaW5nKSB7XG4gIGNvbnN0IGludGVsID0ge1xuICAgIG1hcmtldENvbmRpdGlvbnM6ICdtb2RlcmF0ZScsXG4gICAgY29tcGV0aXRpb25MZXZlbDogJ21lZGl1bScsXG4gICAgcHJpY2luZ1RyZW5kczogJ3N0YWJsZScsXG4gICAgc2Vhc29uYWxGYWN0b3JzOiBbXSxcbiAgICByZWdpb25hbEFkdmFudGFnZXM6IFtdXG4gIH07XG5cbiAgLy8gTG9jYXRpb24tc3BlY2lmaWMgYW5hbHlzaXNcbiAgaWYgKGxvY2F0aW9uPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkZW52ZXInKSkge1xuICAgIGludGVsLmNvbXBldGl0aW9uTGV2ZWwgPSAnaGlnaCc7XG4gICAgaW50ZWwucmVnaW9uYWxBZHZhbnRhZ2VzLnB1c2goJ0FjY2VzcyB0byBsYXJnZSBjb21tZXJjaWFsIG1hcmtldCcsICdIaWdoZXIgYnVkZ2V0IHRvbGVyYW5jZScpO1xuICB9IGVsc2UgaWYgKGxvY2F0aW9uPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdncmVlbGV5JykgfHwgbG9jYXRpb24/LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3N0ZXJsaW5nJykpIHtcbiAgICBpbnRlbC5jb21wZXRpdGlvbkxldmVsID0gJ2xvdyc7XG4gICAgaW50ZWwucmVnaW9uYWxBZHZhbnRhZ2VzLnB1c2goJ0xvY2FsIG1hcmtldCBrbm93bGVkZ2UnLCAnUmVkdWNlZCB0cmF2ZWwgY29zdHMnLCAnQ29tbXVuaXR5IHJlbGF0aW9uc2hpcHMnKTtcbiAgfVxuXG4gIC8vIENsaWVudCB0eXBlIGFuYWx5c2lzXG4gIGlmIChjbGllbnRUeXBlID09PSAnZ292ZXJubWVudCcpIHtcbiAgICBpbnRlbC5wcmljaW5nVHJlbmRzID0gJ2NvbXBldGl0aXZlJztcbiAgICBpbnRlbC5zZWFzb25hbEZhY3RvcnMucHVzaCgnQnVkZ2V0IGN5Y2xlcyBhZmZlY3QgdGltaW5nJywgJ1E0IHNwZW5kaW5nIHJ1c2hlcycpO1xuICB9IGVsc2UgaWYgKGNsaWVudFR5cGUgPT09ICdoZWFsdGhjYXJlJykge1xuICAgIGludGVsLm1hcmtldENvbmRpdGlvbnMgPSAncHJlbWl1bSc7XG4gICAgaW50ZWwuc2Vhc29uYWxGYWN0b3JzLnB1c2goJ0luZmVjdGlvbiBjb250cm9sIGRyaXZlcyBkZW1hbmQnLCAnSGlnaGVyIHN0YW5kYXJkcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgcmV0dXJuIGludGVsO1xufVxuXG4vLyBHZW5lcmF0ZSBjb21wZXRpdGl2ZSBwb3NpdGlvbmluZyBzdHJhdGVneVxuZnVuY3Rpb24gZ2VuZXJhdGVDb21wZXRpdGl2ZVN0cmF0ZWd5KHNxdWFyZUZvb3RhZ2U6IG51bWJlciwgbG9jYXRpb246IHN0cmluZywgY29tcGV0aXRvckNvdW50OiBzdHJpbmcpIHtcbiAgY29uc3Qgc3RyYXRlZ3kgPSB7XG4gICAgcG9zaXRpb25pbmdBcHByb2FjaDogJ3ZhbHVlLWJhc2VkJyxcbiAgICBrZXlEaWZmZXJlbnRpYXRvcnM6IFtdLFxuICAgIHByaWNpbmdUYWN0aWM6ICdjb21wZXRpdGl2ZScsXG4gICAgd2luUHJvYmFiaWxpdHk6ICdtZWRpdW0nXG4gIH07XG5cbiAgLy8gU2l6ZS1iYXNlZCBzdHJhdGVneVxuICBpZiAoc3F1YXJlRm9vdGFnZSAmJiBzcXVhcmVGb290YWdlID4gMTAwMDAwKSB7XG4gICAgc3RyYXRlZ3kucG9zaXRpb25pbmdBcHByb2FjaCA9ICdjYXBhYmlsaXR5LWZvY3VzZWQnO1xuICAgIHN0cmF0ZWd5LmtleURpZmZlcmVudGlhdG9ycy5wdXNoKCdMYXJnZSBmYWNpbGl0eSBleHBlcnRpc2UnLCAnT3BlcmF0aW9uYWwgZWZmaWNpZW5jeSBhdCBzY2FsZScpO1xuICB9IGVsc2UgaWYgKHNxdWFyZUZvb3RhZ2UgJiYgc3F1YXJlRm9vdGFnZSA8IDI1MDAwKSB7XG4gICAgc3RyYXRlZ3kucG9zaXRpb25pbmdBcHByb2FjaCA9ICdzZXJ2aWNlLWZvY3VzZWQnO1xuICAgIHN0cmF0ZWd5LmtleURpZmZlcmVudGlhdG9ycy5wdXNoKCdQZXJzb25hbCBhdHRlbnRpb24nLCAnRmxleGlibGUgc2NoZWR1bGluZycpO1xuICB9XG5cbiAgLy8gTG9jYXRpb24tYmFzZWQgYWR2YW50YWdlc1xuICBpZiAobG9jYXRpb24/LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3N0ZXJsaW5nJykgfHwgbG9jYXRpb24/LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2dyZWVsZXknKSkge1xuICAgIHN0cmF0ZWd5LmtleURpZmZlcmVudGlhdG9ycy5wdXNoKCdMb2NhbCBwcmVzZW5jZSByZWR1Y2VzIGNvc3RzJywgJ0Zhc3RlciBlbWVyZ2VuY3kgcmVzcG9uc2UnKTtcbiAgICBzdHJhdGVneS53aW5Qcm9iYWJpbGl0eSA9ICdoaWdoJztcbiAgfVxuXG4gIC8vIENvbXBldGl0aW9uLWJhc2VkIHRhY3RpY3NcbiAgaWYgKGNvbXBldGl0b3JDb3VudCA9PT0gJ2xvdycpIHtcbiAgICBzdHJhdGVneS5wcmljaW5nVGFjdGljID0gJ3ByZW1pdW0nO1xuICB9IGVsc2UgaWYgKGNvbXBldGl0b3JDb3VudCA9PT0gJ2hpZ2gnKSB7XG4gICAgc3RyYXRlZ3kucHJpY2luZ1RhY3RpYyA9ICdhZ2dyZXNzaXZlJztcbiAgfVxuXG4gIHJldHVybiBzdHJhdGVneTtcbn1cblxuLy8gQXNzZXNzIHByaWNpbmcgcmlza3MgYW5kIG1pdGlnYXRpb24gc3RyYXRlZ2llc1xuZnVuY3Rpb24gYXNzZXNzUHJpY2luZ1Jpc2tzKHByaWNpbmdBZHZpY2U6IGFueSwgc3BlY2lhbFJlcXVpcmVtZW50czogc3RyaW5nLCBjbGllbnRUeXBlOiBzdHJpbmcpIHtcbiAgY29uc3Qgcmlza3MgPSBbXTtcblxuICBpZiAocHJpY2luZ0FkdmljZS5zdWdnZXN0ZWRSYW5nZS5taW4gPCAwLjA4KSB7XG4gICAgcmlza3MucHVzaCh7XG4gICAgICByaXNrOiAnTG93IG1hcmdpbiByaXNrJyxcbiAgICAgIGltcGFjdDogJ21lZGl1bScsXG4gICAgICBtaXRpZ2F0aW9uOiAnRW1waGFzaXplIHZhbHVlLWFkZGVkIHNlcnZpY2VzIHRvIGp1c3RpZnkgcHJpY2luZydcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChzcGVjaWFsUmVxdWlyZW1lbnRzPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdzZWN1cml0eScpKSB7XG4gICAgcmlza3MucHVzaCh7XG4gICAgICByaXNrOiAnU2VjdXJpdHkgY2xlYXJhbmNlIGNvc3RzJyxcbiAgICAgIGltcGFjdDogJ2hpZ2gnLFxuICAgICAgbWl0aWdhdGlvbjogJ0J1aWxkIGNsZWFyYW5jZSBjb3N0cyBpbnRvIHByaWNpbmcsIGhpZ2hsaWdodCBhcyBkaWZmZXJlbnRpYXRvcidcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChjbGllbnRUeXBlID09PSAnZ292ZXJubWVudCcpIHtcbiAgICByaXNrcy5wdXNoKHtcbiAgICAgIHJpc2s6ICdQYXltZW50IGRlbGF5cycsXG4gICAgICBpbXBhY3Q6ICdtZWRpdW0nLFxuICAgICAgbWl0aWdhdGlvbjogJ0ZhY3RvciBjYXNoIGZsb3cgY29uc2lkZXJhdGlvbnMgaW50byBwcmljaW5nIGFuZCB0ZXJtcydcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByaXNrcztcbn1cblxuLy8gQW5hbHl6ZSBwcm9maXRhYmlsaXR5IG1ldHJpY3NcbmZ1bmN0aW9uIGFuYWx5emVQcm9maXRhYmlsaXR5KHN1Z2dlc3RlZFJhbmdlOiBhbnksIHNxdWFyZUZvb3RhZ2U6IG51bWJlciwgZnJlcXVlbmN5OiBzdHJpbmcpIHtcbiAgY29uc3QgYXZnUHJpY2UgPSAoc3VnZ2VzdGVkUmFuZ2UubWluICsgc3VnZ2VzdGVkUmFuZ2UubWF4KSAvIDI7XG4gIGNvbnN0IHNxZnQgPSBzcXVhcmVGb290YWdlIHx8IDUwMDAwO1xuICBcbiAgbGV0IGZyZXF1ZW5jeU11bHRpcGxpZXIgPSAxO1xuICBpZiAoZnJlcXVlbmN5Py5pbmNsdWRlcygnZGFpbHknKSkgZnJlcXVlbmN5TXVsdGlwbGllciA9IDI1MDsgLy8gd29yayBkYXlzIHBlciB5ZWFyXG4gIGVsc2UgaWYgKGZyZXF1ZW5jeT8uaW5jbHVkZXMoJ3dlZWtseScpKSBmcmVxdWVuY3lNdWx0aXBsaWVyID0gNTI7XG4gIGVsc2UgaWYgKGZyZXF1ZW5jeT8uaW5jbHVkZXMoJ21vbnRobHknKSkgZnJlcXVlbmN5TXVsdGlwbGllciA9IDEyO1xuXG4gIGNvbnN0IGFubnVhbFJldmVudWUgPSBhdmdQcmljZSAqIHNxZnQgKiBmcmVxdWVuY3lNdWx0aXBsaWVyO1xuICBjb25zdCBlc3RpbWF0ZWRNYXJnaW4gPSAwLjE1OyAvLyAxNSUgdHlwaWNhbCBtYXJnaW5cblxuICByZXR1cm4ge1xuICAgIHByb2plY3RlZEFubnVhbFJldmVudWU6IE1hdGgucm91bmQoYW5udWFsUmV2ZW51ZSksXG4gICAgZXN0aW1hdGVkR3Jvc3NQcm9maXQ6IE1hdGgucm91bmQoYW5udWFsUmV2ZW51ZSAqIGVzdGltYXRlZE1hcmdpbiksXG4gICAgbWFyZ2luQW5hbHlzaXM6IGVzdGltYXRlZE1hcmdpbixcbiAgICBwcm9maXRhYmlsaXR5UmF0aW5nOiBhbm51YWxSZXZlbnVlID4gMTAwMDAwID8gJ2hpZ2gnIDogYW5udWFsUmV2ZW51ZSA+IDI1MDAwID8gJ21lZGl1bScgOiAnbG93J1xuICB9O1xufVxuXG4vLyBHZXQgcG9zaXRpb25pbmcgc3RyYXRlZ3kgcmVjb21tZW5kYXRpb25zXG5mdW5jdGlvbiBnZXRQb3NpdGlvbmluZ1N0cmF0ZWd5KHByaWNpbmdBZHZpY2U6IGFueSwgbG9jYXRpb246IHN0cmluZywgY2xpZW50VHlwZTogc3RyaW5nKSB7XG4gIGNvbnN0IGF2Z1ByaWNlID0gKHByaWNpbmdBZHZpY2Uuc3VnZ2VzdGVkUmFuZ2UubWluICsgcHJpY2luZ0FkdmljZS5zdWdnZXN0ZWRSYW5nZS5tYXgpIC8gMjtcbiAgXG4gIGxldCBwb3NpdGlvbmluZyA9ICd2YWx1ZSc7XG4gIGlmIChhdmdQcmljZSA+IDAuMTIpIHBvc2l0aW9uaW5nID0gJ3ByZW1pdW0nO1xuICBlbHNlIGlmIChhdmdQcmljZSA8IDAuMDgpIHBvc2l0aW9uaW5nID0gJ2Nvc3QtbGVhZGVyJztcblxuICBjb25zdCBzdHJhdGVnaWVzID0ge1xuICAgIHZhbHVlOiAnUG9zaXRpb24gYXMgYmVzdCB2YWx1ZSB3aXRoIHN0cm9uZyBsb2NhbCBwcmVzZW5jZSBhbmQgcmVsaWFibGUgc2VydmljZScsXG4gICAgcHJlbWl1bTogJ0VtcGhhc2l6ZSBxdWFsaXR5LCBjb21wbGlhbmNlLCBhbmQgc3BlY2lhbGl6ZWQgZXhwZXJ0aXNlJyxcbiAgICAnY29zdC1sZWFkZXInOiAnRm9jdXMgb24gZWZmaWNpZW5jeSBhbmQgY29tcGV0aXRpdmUgcHJpY2luZydcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHJlY29tbWVuZGVkUG9zaXRpb25pbmc6IHBvc2l0aW9uaW5nLFxuICAgIHN0cmF0ZWd5OiBzdHJhdGVnaWVzW3Bvc2l0aW9uaW5nIGFzIGtleW9mIHR5cGVvZiBzdHJhdGVnaWVzXSxcbiAgICBrZXlNZXNzYWdlczogZ2VuZXJhdGVLZXlNZXNzYWdlcyhwb3NpdGlvbmluZywgbG9jYXRpb24sIGNsaWVudFR5cGUpXG4gIH07XG59XG5cbi8vIEdlbmVyYXRlIGtleSBwb3NpdGlvbmluZyBtZXNzYWdlc1xuZnVuY3Rpb24gZ2VuZXJhdGVLZXlNZXNzYWdlcyhwb3NpdGlvbmluZzogc3RyaW5nLCBsb2NhdGlvbjogc3RyaW5nLCBjbGllbnRUeXBlOiBzdHJpbmcpIHtcbiAgY29uc3QgYmFzZU1lc3NhZ2VzID0ge1xuICAgIHZhbHVlOiBbJ1JlbGlhYmxlIGxvY2FsIHNlcnZpY2UnLCAnQ29tcGV0aXRpdmUgcHJpY2luZycsICdQcm92ZW4gdHJhY2sgcmVjb3JkJ10sXG4gICAgcHJlbWl1bTogWydJbmR1c3RyeSBleHBlcnRpc2UnLCAnQ29tcGxpYW5jZSBleGNlbGxlbmNlJywgJ1N1cGVyaW9yIHF1YWxpdHknXSxcbiAgICAnY29zdC1sZWFkZXInOiBbJ01vc3QgY29tcGV0aXRpdmUgcmF0ZXMnLCAnRWZmaWNpZW50IG9wZXJhdGlvbnMnLCAnTm8gaGlkZGVuIGZlZXMnXVxuICB9O1xuXG4gIGxldCBtZXNzYWdlcyA9IGJhc2VNZXNzYWdlc1twb3NpdGlvbmluZyBhcyBrZXlvZiB0eXBlb2YgYmFzZU1lc3NhZ2VzXSB8fCBiYXNlTWVzc2FnZXMudmFsdWU7XG5cbiAgLy8gQWRkIGxvY2F0aW9uLXNwZWNpZmljIG1lc3NhZ2VzXG4gIGlmIChsb2NhdGlvbj8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnc3RlcmxpbmcnKSB8fCBsb2NhdGlvbj8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZ3JlZWxleScpKSB7XG4gICAgbWVzc2FnZXMucHVzaCgnTG9jYWwgTm9ydGhlcm4gQ29sb3JhZG8gcHJlc2VuY2UnKTtcbiAgfVxuXG4gIC8vIEFkZCBjbGllbnQtc3BlY2lmaWMgbWVzc2FnZXNcbiAgaWYgKGNsaWVudFR5cGUgPT09ICdnb3Zlcm5tZW50Jykge1xuICAgIG1lc3NhZ2VzLnB1c2goJ0ZlZGVyYWwgY29udHJhY3RpbmcgZXhwZXJpZW5jZScpO1xuICB9IGVsc2UgaWYgKGNsaWVudFR5cGUgPT09ICdoZWFsdGhjYXJlJykge1xuICAgIG1lc3NhZ2VzLnB1c2goJ0hlYWx0aGNhcmUgZmFjaWxpdHkgZXhwZXJ0aXNlJyk7XG4gIH1cblxuICByZXR1cm4gbWVzc2FnZXM7XG59Il0sIm5hbWVzIjpbImdlbmVyYXRlUHJpY2luZ0FkdmljZSIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJzZXJ2aWNlVHlwZSIsInNxdWFyZUZvb3RhZ2UiLCJmcmVxdWVuY3kiLCJsb2NhdGlvbiIsInNwZWNpYWxSZXF1aXJlbWVudHMiLCJ0aW1lbGluZSIsImNsaWVudFR5cGUiLCJwcm9qZWN0RHVyYXRpb24iLCJjb21wZXRpdG9yQ291bnQiLCJib2R5IiwicHJpY2luZ0FkdmljZSIsImVuaGFuY2VkQW5hbHlzaXMiLCJtYXJrZXRJbnRlbGxpZ2VuY2UiLCJnZW5lcmF0ZU1hcmtldEludGVsbGlnZW5jZSIsImNvbXBldGl0aXZlU3RyYXRlZ3kiLCJnZW5lcmF0ZUNvbXBldGl0aXZlU3RyYXRlZ3kiLCJyaXNrQXNzZXNzbWVudCIsImFzc2Vzc1ByaWNpbmdSaXNrcyIsInByb2ZpdGFiaWxpdHlBbmFseXNpcyIsImFuYWx5emVQcm9maXRhYmlsaXR5Iiwic3VnZ2VzdGVkUmFuZ2UiLCJyZWNvbW1lbmRlZFBvc2l0aW9uaW5nIiwiZ2V0UG9zaXRpb25pbmdTdHJhdGVneSIsInN1Y2Nlc3MiLCJhbmFseXNpcyIsInByb2plY3REZXRhaWxzIiwiZ2VuZXJhdGVkQXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJjb25zb2xlIiwiRXJyb3IiLCJtZXNzYWdlIiwiaW50ZWwiLCJtYXJrZXRDb25kaXRpb25zIiwiY29tcGV0aXRpb25MZXZlbCIsInByaWNpbmdUcmVuZHMiLCJzZWFzb25hbEZhY3RvcnMiLCJyZWdpb25hbEFkdmFudGFnZXMiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwicHVzaCIsInN0cmF0ZWd5IiwicG9zaXRpb25pbmdBcHByb2FjaCIsImtleURpZmZlcmVudGlhdG9ycyIsInByaWNpbmdUYWN0aWMiLCJ3aW5Qcm9iYWJpbGl0eSIsInJpc2tzIiwibWluIiwicmlzayIsImltcGFjdCIsIm1pdGlnYXRpb24iLCJhdmdQcmljZSIsIm1heCIsInNxZnQiLCJmcmVxdWVuY3lNdWx0aXBsaWVyIiwiYW5udWFsUmV2ZW51ZSIsImVzdGltYXRlZE1hcmdpbiIsInByb2plY3RlZEFubnVhbFJldmVudWUiLCJNYXRoIiwicm91bmQiLCJlc3RpbWF0ZWRHcm9zc1Byb2ZpdCIsIm1hcmdpbkFuYWx5c2lzIiwicHJvZml0YWJpbGl0eVJhdGluZyIsInBvc2l0aW9uaW5nIiwic3RyYXRlZ2llcyIsInZhbHVlIiwicHJlbWl1bSIsImtleU1lc3NhZ2VzIiwiZ2VuZXJhdGVLZXlNZXNzYWdlcyIsImJhc2VNZXNzYWdlcyIsIm1lc3NhZ2VzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/ai/pricing-intelligence.ts\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Fpricing-intelligence&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fai%2Fpricing-intelligence.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();