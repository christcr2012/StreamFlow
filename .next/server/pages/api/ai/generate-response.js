"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ai/generate-response";
exports.ids = ["pages/api/ai/generate-response"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Fgenerate-response&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fai%2Fgenerate-response.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Fgenerate-response&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fai%2Fgenerate-response.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_ai_generate_response_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/pages/api/ai/generate-response.ts */ \"(api-node)/./src/pages/api/ai/generate-response.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_ai_generate_response_ts__WEBPACK_IMPORTED_MODULE_4__]);\n_src_pages_api_ai_generate_response_ts__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_ai_generate_response_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_ai_generate_response_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/ai/generate-response\",\n        pathname: \"/api/ai/generate-response\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_ai_generate_response_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/ai/generate-response\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/ai/generate-response\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Fgenerate-response&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fai%2Fgenerate-response.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/lib/aiResponseTemplates.ts":
/*!****************************************!*\
  !*** ./src/lib/aiResponseTemplates.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateConstructionResponse: () => (/* binding */ generateConstructionResponse),\n/* harmony export */   generateFollowUpResponse: () => (/* binding */ generateFollowUpResponse),\n/* harmony export */   generateRFPResponse: () => (/* binding */ generateRFPResponse)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__]);\nopenai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// AI Response Template Generation\n// Creates tailored responses for different lead types and business scenarios\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst MODEL = \"gpt-4o-mini\"; // Cost-efficient model for response generation\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/**\n * Generate AI-powered response template for federal RFPs\n * Creates professional, compliant responses emphasizing capabilities\n */ async function generateRFPResponse(context) {\n    try {\n        const prompt = `\nAs a professional business development expert for a Northern Colorado cleaning company, create a tailored email response to a federal RFP opportunity.\n\nCOMPANY PROFILE:\n- Established cleaning services company based in Sterling, Colorado\n- Specializes in federal, healthcare, and commercial janitorial services\n- NAICS 561720 certified, bonded and insured\n- 10+ years of government contracting experience\n- Known for reliability, compliance, and competitive pricing\n\nLEAD CONTEXT:\n- Lead Type: ${context.leadType} (federal RFP - immediate response required)\n- Opportunity: ${context.leadTitle || 'Federal cleaning services contract'}\n- Agency: ${context.companyName || 'Federal agency'}\n- Location: ${context.location || 'Colorado'}\n- Estimated Value: ${context.estimatedValue ? `$${context.estimatedValue.toLocaleString()}` : 'TBD'}\n- Special Requirements: ${context.specialRequirements || 'Standard federal compliance'}\n\nCreate a professional email response that:\n1. Expresses immediate interest and capability\n2. Highlights relevant federal contracting experience\n3. Mentions specific compliance capabilities (security clearance, green cleaning, etc.)\n4. Requests additional information or clarification meeting\n5. Positions company as reliable local partner\n\nRespond with JSON in this exact format:\n{\n  \"subject\": \"Professional subject line\",\n  \"greeting\": \"Professional opening paragraph\",\n  \"mainContent\": \"2-3 paragraph core message highlighting capabilities and interest\",\n  \"callToAction\": \"Specific next steps request\",\n  \"closing\": \"Professional closing statement\",\n  \"followUpSchedule\": \"Recommended follow-up timing\",\n  \"tone\": \"professional\"\n}\n`;\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 1000\n        });\n        const template = JSON.parse(response.choices[0].message.content || '{}');\n        return {\n            subject: template.subject || `Re: ${context.leadTitle || 'Federal Cleaning Services Opportunity'}`,\n            greeting: template.greeting || 'Dear Contracting Officer,',\n            mainContent: template.mainContent || 'We are writing to express our strong interest in this federal cleaning services opportunity.',\n            callToAction: template.callToAction || 'We would welcome the opportunity to discuss our capabilities further.',\n            closing: template.closing || 'Thank you for your consideration.',\n            followUpSchedule: template.followUpSchedule || 'Follow up within 2 business days',\n            tone: 'professional'\n        };\n    } catch (error) {\n        console.error('RFP response generation error:', error);\n        return generateFallbackRFPResponse(context);\n    }\n}\n/**\n * Generate warm relationship-building response for construction leads\n * Creates educational, consultative responses for future opportunities\n */ async function generateConstructionResponse(context) {\n    try {\n        const prompt = `\nAs a business development expert for a Northern Colorado cleaning company, create a warm, educational email to a construction project lead.\n\nCOMPANY PROFILE:\n- Local cleaning services company based in Sterling, Colorado\n- Specializes in post-construction cleanup and ongoing maintenance\n- Serves Northern Colorado: Sterling, Greeley, Fort Collins, Denver area\n- Known for quality, reliability, and building long-term relationships\n\nLEAD CONTEXT:\n- Lead Type: ${context.leadType} (construction permit - relationship building opportunity)\n- Project: ${context.leadTitle || 'New construction project'}\n- Contact: ${context.contactName || 'Project manager'}\n- Company: ${context.companyName || 'Construction company'}\n- Location: ${context.location || 'Northern Colorado'}\n- Project Details: ${context.projectDetails || 'Commercial construction'}\n\nCreate a warm, consultative email that:\n1. Congratulates them on their new project\n2. Educates about post-construction cleaning importance\n3. Offers free consultation or quote\n4. Positions company as helpful local resource\n5. Establishes relationship for future projects\n\nRespond with JSON in this exact format:\n{\n  \"subject\": \"Warm, helpful subject line\",\n  \"greeting\": \"Warm, personalized opening\",\n  \"mainContent\": \"2-3 paragraphs offering value and education\",\n  \"callToAction\": \"Soft offer for consultation or information\",\n  \"closing\": \"Warm, relationship-focused closing\",\n  \"followUpSchedule\": \"Recommended follow-up timing\",\n  \"tone\": \"warm\"\n}\n`;\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 1000\n        });\n        const template = JSON.parse(response.choices[0].message.content || '{}');\n        return {\n            subject: template.subject || `Congratulations on your ${context.location} project!`,\n            greeting: template.greeting || `Dear ${context.contactName || 'Project Manager'},`,\n            mainContent: template.mainContent || 'Congratulations on your new construction project! We wanted to reach out as a local cleaning services partner.',\n            callToAction: template.callToAction || 'We would be happy to provide a complimentary consultation on post-construction cleaning needs.',\n            closing: template.closing || 'We look forward to supporting your project success.',\n            followUpSchedule: template.followUpSchedule || 'Follow up in 2-3 weeks as project progresses',\n            tone: 'warm'\n        };\n    } catch (error) {\n        console.error('Construction response generation error:', error);\n        return generateFallbackConstructionResponse(context);\n    }\n}\n/**\n * Generate follow-up response for existing leads\n * Creates appropriate follow-up messages based on lead temperature and timing\n */ async function generateFollowUpResponse(context) {\n    try {\n        const prompt = `\nCreate a professional follow-up email for a cleaning services lead.\n\nLEAD CONTEXT:\n- Lead Type: ${context.leadType}\n- Original Opportunity: ${context.leadTitle || 'Cleaning services inquiry'}\n- Company: ${context.companyName || 'Prospect company'}\n- Last Contact: ${context.lastContactDate || 'Recently'}\n- Previous Interaction: ${context.previousInteraction || 'Initial contact'}\n- Current Stage: ${context.leadStage || 'Initial interest'}\n\nCreate an appropriate follow-up that:\n1. References previous interaction professionally\n2. Provides additional value or information\n3. Moves the relationship forward appropriately\n4. Maintains professional persistence without being pushy\n5. Offers specific next steps\n\nRespond with JSON in this exact format:\n{\n  \"subject\": \"Follow-up subject line\",\n  \"greeting\": \"Professional greeting\",\n  \"mainContent\": \"2-3 paragraphs adding value and moving forward\",\n  \"callToAction\": \"Specific next step request\",\n  \"closing\": \"Professional closing\",\n  \"followUpSchedule\": \"Next follow-up timing\",\n  \"tone\": \"consultative\"\n}\n`;\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 1000\n        });\n        const template = JSON.parse(response.choices[0].message.content || '{}');\n        return {\n            subject: template.subject || `Following up on ${context.leadTitle || 'cleaning services opportunity'}`,\n            greeting: template.greeting || 'Hello,',\n            mainContent: template.mainContent || 'I wanted to follow up on our previous conversation about cleaning services.',\n            callToAction: template.callToAction || 'Would you be available for a brief call to discuss next steps?',\n            closing: template.closing || 'Thank you for your time.',\n            followUpSchedule: template.followUpSchedule || 'Follow up in 1 week if no response',\n            tone: 'consultative'\n        };\n    } catch (error) {\n        console.error('Follow-up response generation error:', error);\n        return generateFallbackFollowUpResponse(context);\n    }\n}\n// Fallback responses if AI fails\nfunction generateFallbackRFPResponse(context) {\n    return {\n        subject: `Re: ${context.leadTitle || 'Federal Cleaning Services Opportunity'}`,\n        greeting: 'Dear Contracting Officer,',\n        mainContent: `We are writing to express our strong interest in providing cleaning services for your federal facility. Our company has over 10 years of experience serving government clients in Colorado, with full compliance capabilities including security clearances and green cleaning protocols. We would welcome the opportunity to submit a comprehensive proposal that demonstrates our qualifications and competitive pricing.`,\n        callToAction: 'Please let us know if you need any additional information or would like to schedule a capability briefing.',\n        closing: 'Thank you for considering our services.',\n        followUpSchedule: 'Follow up within 2 business days',\n        tone: 'professional'\n    };\n}\nfunction generateFallbackConstructionResponse(context) {\n    return {\n        subject: `Congratulations on your ${context.location || 'local'} construction project!`,\n        greeting: `Dear ${context.contactName || 'Project Manager'},`,\n        mainContent: `Congratulations on your new construction project! As a local Northern Colorado cleaning company, we wanted to introduce ourselves and offer our post-construction cleanup expertise. We understand that final cleaning is critical for project completion and tenant move-in. Our team specializes in construction cleanup, from debris removal to final detailed cleaning that meets the highest standards.`,\n        callToAction: 'We would be happy to provide a complimentary consultation and quote for your post-construction cleaning needs.',\n        closing: 'We look forward to supporting your project success and building a lasting partnership.',\n        followUpSchedule: 'Follow up in 2-3 weeks as construction progresses',\n        tone: 'warm'\n    };\n}\nfunction generateFallbackFollowUpResponse(context) {\n    return {\n        subject: `Following up on ${context.leadTitle || 'cleaning services opportunity'}`,\n        greeting: 'Hello,',\n        mainContent: `I wanted to follow up on our previous conversation about cleaning services for your facility. We understand that selecting the right cleaning partner is an important decision. I thought you might find it helpful to know about some recent successful projects we have completed for similar organizations in the ${context.location || 'Colorado'} area.`,\n        callToAction: 'Would you be available for a brief call this week to discuss how we can support your specific needs?',\n        closing: 'Thank you for your consideration, and I look forward to hearing from you soon.',\n        followUpSchedule: 'Follow up in 1 week if no response',\n        tone: 'consultative'\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/aiResponseTemplates.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/ai/generate-response.ts":
/*!***********************************************!*\
  !*** ./src/pages/api/ai/generate-response.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_aiResponseTemplates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/aiResponseTemplates */ \"(api-node)/./src/lib/aiResponseTemplates.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_aiResponseTemplates__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_aiResponseTemplates__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// AI Response Generation API\n// Creates tailored email responses for different lead types and scenarios\n\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    try {\n        const { responseType = 'rfp', leadData, customContext = {} } = req.body;\n        if (!leadData && !customContext.leadType) {\n            return res.status(400).json({\n                error: 'Lead data or context required'\n            });\n        }\n        // Build context from lead data or custom input\n        const context = {\n            leadType: leadData?.leadType || customContext.leadType || 'warm',\n            sourceType: leadData?.sourceType || customContext.sourceType || '',\n            leadTitle: leadData?.title || customContext.leadTitle,\n            companyName: leadData?.company || customContext.companyName,\n            contactName: customContext.contactName,\n            location: [\n                leadData?.city,\n                leadData?.state\n            ].filter(Boolean).join(', ') || customContext.location,\n            projectDetails: leadData?.serviceDescription || customContext.projectDetails,\n            estimatedValue: customContext.estimatedValue,\n            urgencyLevel: customContext.urgencyLevel,\n            specialRequirements: customContext.specialRequirements,\n            ...customContext\n        };\n        let responseTemplate;\n        // Generate appropriate response based on type\n        switch(responseType){\n            case 'rfp':\n                responseTemplate = await (0,_lib_aiResponseTemplates__WEBPACK_IMPORTED_MODULE_0__.generateRFPResponse)(context);\n                break;\n            case 'construction':\n                responseTemplate = await (0,_lib_aiResponseTemplates__WEBPACK_IMPORTED_MODULE_0__.generateConstructionResponse)(context);\n                break;\n            case 'followup':\n                responseTemplate = await (0,_lib_aiResponseTemplates__WEBPACK_IMPORTED_MODULE_0__.generateFollowUpResponse)(context);\n                break;\n            default:\n                // Auto-detect based on lead characteristics\n                if (context.sourceType === 'RFP' || context.leadType === 'hot') {\n                    responseTemplate = await (0,_lib_aiResponseTemplates__WEBPACK_IMPORTED_MODULE_0__.generateRFPResponse)(context);\n                } else if (context.sourceType === 'SYSTEM' || context.leadTitle?.toLowerCase().includes('construction')) {\n                    responseTemplate = await (0,_lib_aiResponseTemplates__WEBPACK_IMPORTED_MODULE_0__.generateConstructionResponse)(context);\n                } else {\n                    responseTemplate = await (0,_lib_aiResponseTemplates__WEBPACK_IMPORTED_MODULE_0__.generateFollowUpResponse)(context);\n                }\n        }\n        // Enhance response with additional business intelligence\n        const enhancedResponse = {\n            responseTemplate,\n            responseMetadata: {\n                generatedFor: context.leadTitle || 'Lead opportunity',\n                targetAudience: context.companyName || 'Prospect',\n                responseType,\n                leadType: context.leadType,\n                estimatedReadTime: calculateReadTime(responseTemplate),\n                suggestedSendTime: getSuggestedSendTime(context),\n                keyPersonalizationPoints: extractPersonalizationPoints(context)\n            },\n            businessContext: {\n                strategicValue: assessStrategicValue(context),\n                competitivePriority: getCompetitivePriority(context),\n                relationshipStage: determineRelationshipStage(context),\n                nextStepRecommendations: getNextStepRecommendations(context, responseType)\n            }\n        };\n        res.status(200).json({\n            success: true,\n            response: enhancedResponse,\n            generatedAt: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error('Response generation error:', error);\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Response generation failed'\n        });\n    }\n}\n// Calculate estimated reading time\nfunction calculateReadTime(template) {\n    const totalWords = [\n        template.greeting,\n        template.mainContent,\n        template.callToAction,\n        template.closing\n    ].join(' ').split(' ').length;\n    const readingTimeMinutes = Math.ceil(totalWords / 200); // Average reading speed\n    return `${readingTimeMinutes} minute${readingTimeMinutes > 1 ? 's' : ''}`;\n}\n// Suggest optimal send time based on lead characteristics\nfunction getSuggestedSendTime(context) {\n    if (context.leadType === 'hot' || context.sourceType === 'RFP') {\n        return 'Send immediately (within 2 hours)';\n    } else if (context.leadType === 'warm') {\n        return 'Send within 24 hours during business hours';\n    } else {\n        return 'Send during optimal engagement times (Tuesday-Thursday, 10-11 AM)';\n    }\n}\n// Extract key personalization points\nfunction extractPersonalizationPoints(context) {\n    const points = [];\n    if (context.location) points.push(`Local to ${context.location}`);\n    if (context.companyName) points.push(`Company: ${context.companyName}`);\n    if (context.contactName) points.push(`Contact: ${context.contactName}`);\n    if (context.projectDetails) points.push('Project-specific details included');\n    if (context.specialRequirements) points.push('Special requirements addressed');\n    return points;\n}\n// Assess strategic value of the opportunity\nfunction assessStrategicValue(context) {\n    if (context.estimatedValue && context.estimatedValue > 500000) return 'High';\n    if (context.leadType === 'hot') return 'High';\n    if (context.location?.toLowerCase().includes('denver') && context.estimatedValue && context.estimatedValue > 100000) return 'High';\n    if (context.location?.toLowerCase().includes('greeley') || context.location?.toLowerCase().includes('sterling')) return 'Medium-High';\n    return 'Medium';\n}\n// Determine competitive priority level\nfunction getCompetitivePriority(context) {\n    if (context.leadType === 'hot' && context.sourceType === 'RFP') return 'Urgent';\n    if (context.urgencyLevel === 'immediate') return 'Urgent';\n    if (context.leadType === 'hot') return 'High';\n    if (context.leadType === 'warm') return 'Medium';\n    return 'Standard';\n}\n// Determine current relationship stage\nfunction determineRelationshipStage(context) {\n    if (context.sourceType === 'RFP') return 'Initial opportunity';\n    if (context.leadType === 'hot') return 'Active interest';\n    if (context.leadType === 'warm') return 'Relationship building';\n    return 'Early nurturing';\n}\n// Get next step recommendations\nfunction getNextStepRecommendations(context, responseType) {\n    const recommendations = [];\n    if (responseType === 'rfp') {\n        recommendations.push('Prepare capability statement');\n        recommendations.push('Research agency background');\n        recommendations.push('Schedule pre-proposal meeting if possible');\n    } else if (responseType === 'construction') {\n        recommendations.push('Monitor construction progress');\n        recommendations.push('Connect with project manager');\n        recommendations.push('Prepare post-construction services overview');\n    } else {\n        recommendations.push('Schedule follow-up call');\n        recommendations.push('Prepare customized proposal');\n        recommendations.push('Research client background');\n    }\n    return recommendations;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9wYWdlcy9hcGkvYWkvZ2VuZXJhdGUtcmVzcG9uc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSw2QkFBNkI7QUFDN0IsMEVBQTBFO0FBT3ZDO0FBRXBCLGVBQWVHLFFBQVFDLEdBQW1CLEVBQUVDLEdBQW9CO0lBQzdFLElBQUlELElBQUlFLE1BQU0sS0FBSyxRQUFRO1FBQ3pCLE9BQU9ELElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFxQjtJQUM1RDtJQUVBLElBQUk7UUFDRixNQUFNLEVBQ0pDLGVBQWUsS0FBSyxFQUNwQkMsUUFBUSxFQUNSQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQ25CLEdBQUdSLElBQUlTLElBQUk7UUFFWixJQUFJLENBQUNGLFlBQVksQ0FBQ0MsY0FBY0UsUUFBUSxFQUFFO1lBQ3hDLE9BQU9ULElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7Z0JBQUVDLE9BQU87WUFBZ0M7UUFDdkU7UUFFQSwrQ0FBK0M7UUFDL0MsTUFBTU0sVUFBMkI7WUFDL0JELFVBQVVILFVBQVVHLFlBQVlGLGNBQWNFLFFBQVEsSUFBSTtZQUMxREUsWUFBWUwsVUFBVUssY0FBY0osY0FBY0ksVUFBVSxJQUFJO1lBQ2hFQyxXQUFXTixVQUFVTyxTQUFTTixjQUFjSyxTQUFTO1lBQ3JERSxhQUFhUixVQUFVUyxXQUFXUixjQUFjTyxXQUFXO1lBQzNERSxhQUFhVCxjQUFjUyxXQUFXO1lBQ3RDQyxVQUFVO2dCQUFDWCxVQUFVWTtnQkFBTVosVUFBVWE7YUFBTSxDQUFDQyxNQUFNLENBQUNDLFNBQVNDLElBQUksQ0FBQyxTQUFTZixjQUFjVSxRQUFRO1lBQ2hHTSxnQkFBZ0JqQixVQUFVa0Isc0JBQXNCakIsY0FBY2dCLGNBQWM7WUFDNUVFLGdCQUFnQmxCLGNBQWNrQixjQUFjO1lBQzVDQyxjQUFjbkIsY0FBY21CLFlBQVk7WUFDeENDLHFCQUFxQnBCLGNBQWNvQixtQkFBbUI7WUFDdEQs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QUFJQyxRQUFRRCxRQUFRLEtBQUssUUFBUSxPQUFPO0lBQ3hDLE9BQU87QUFDVDtBQUVBLGdDQUFnQztBQUNoQyxTQUFTd0MsMkJBQTJCdkMsT0FBd0IsRUFBRUwsWUFBb0I7SUFDaEYsTUFBTWtFLGtCQUFrQixFQUFFO0lBRTFCLElBQUlsRSxpQkFBaUIsT0FBTztRQUMxQmtFLGdCQUFnQkQsSUFBSSxDQUFDO1FBQ3JCQyxnQkFBZ0JELElBQUksQ0FBQztRQUNyQkMsZ0JBQWdCRCxJQUFJLENBQUM7SUFDdkIsT0FBTyxJQUFJakUsaUJBQWlCLGdCQUFnQjtRQUMxQ2tFLGdCQUFnQkQsSUFBSSxDQUFDO1FBQ3JCQyxnQkFBZ0JELElBQUksQ0FBQztRQUNyQkMsZ0JBQWdCRCxJQUFJLENBQUM7SUFDdkIsT0FBTztRQUNMQyxnQkFBZ0JELElBQUksQ0FBQztRQUNyQkMsZ0JBQWdCRCxJQUFJLENBQUM7UUFDckJDLGdCQUFnQkQsSUFBSSxDQUFDO0lBQ3ZCO0lBRUEsT0FBT0M7QUFDVCIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvcGFnZXMvYXBpL2FpL2dlbmVyYXRlLXJlc3BvbnNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFJIFJlc3BvbnNlIEdlbmVyYXRpb24gQVBJXG4vLyBDcmVhdGVzIHRhaWxvcmVkIGVtYWlsIHJlc3BvbnNlcyBmb3IgZGlmZmVyZW50IGxlYWQgdHlwZXMgYW5kIHNjZW5hcmlvc1xuaW1wb3J0IHR5cGUgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSBcIm5leHRcIjtcbmltcG9ydCB7IFxuICBnZW5lcmF0ZVJGUFJlc3BvbnNlLCBcbiAgZ2VuZXJhdGVDb25zdHJ1Y3Rpb25SZXNwb25zZSwgXG4gIGdlbmVyYXRlRm9sbG93VXBSZXNwb25zZSxcbiAgdHlwZSBSZXNwb25zZUNvbnRleHQgXG59IGZyb20gXCJAL2xpYi9haVJlc3BvbnNlVGVtcGxhdGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgeyBcbiAgICAgIHJlc3BvbnNlVHlwZSA9ICdyZnAnLFxuICAgICAgbGVhZERhdGEsXG4gICAgICBjdXN0b21Db250ZXh0ID0ge31cbiAgICB9ID0gcmVxLmJvZHk7XG5cbiAgICBpZiAoIWxlYWREYXRhICYmICFjdXN0b21Db250ZXh0LmxlYWRUeXBlKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ0xlYWQgZGF0YSBvciBjb250ZXh0IHJlcXVpcmVkJyB9KTtcbiAgICB9XG5cbiAgICAvLyBCdWlsZCBjb250ZXh0IGZyb20gbGVhZCBkYXRhIG9yIGN1c3RvbSBpbnB1dFxuICAgIGNvbnN0IGNvbnRleHQ6IFJlc3BvbnNlQ29udGV4dCA9IHtcbiAgICAgIGxlYWRUeXBlOiBsZWFkRGF0YT8ubGVhZFR5cGUgfHwgY3VzdG9tQ29udGV4dC5sZWFkVHlwZSB8fCAnd2FybScsXG4gICAgICBzb3VyY2VUeXBlOiBsZWFkRGF0YT8uc291cmNlVHlwZSB8fCBjdXN0b21Db250ZXh0LnNvdXJjZVR5cGUgfHwgJycsXG4gICAgICBsZWFkVGl0bGU6IGxlYWREYXRhPy50aXRsZSB8fCBjdXN0b21Db250ZXh0LmxlYWRUaXRsZSxcbiAgICAgIGNvbXBhbnlOYW1lOiBsZWFkRGF0YT8uY29tcGFueSB8fCBjdXN0b21Db250ZXh0LmNvbXBhbnlOYW1lLFxuICAgICAgY29udGFjdE5hbWU6IGN1c3RvbUNvbnRleHQuY29udGFjdE5hbWUsXG4gICAgICBsb2NhdGlvbjogW2xlYWREYXRhPy5jaXR5LCBsZWFkRGF0YT8uc3RhdGVdLmZpbHRlcihCb29sZWFuKS5qb2luKCcsICcpIHx8IGN1c3RvbUNvbnRleHQubG9jYXRpb24sXG4gICAgICBwcm9qZWN0RGV0YWlsczogbGVhZERhdGE/LnNlcnZpY2VEZXNjcmlwdGlvbiB8fCBjdXN0b21Db250ZXh0LnByb2plY3REZXRhaWxzLFxuICAgICAgZXN0aW1hdGVkVmFsdWU6IGN1c3RvbUNvbnRleHQuZXN0aW1hdGVkVmFsdWUsXG4gICAgICB1cmdlbmN5TGV2ZWw6IGN1c3RvbUNvbnRleHQudXJnZW5jeUxldmVsLFxuICAgICAgc3BlY2lhbFJlcXVpcmVtZW50czogY3VzdG9tQ29udGV4dC5zcGVjaWFsUmVxdWlyZW1lbnRzLFxuICAgICAgLi4uY3VzdG9tQ29udGV4dFxuICAgIH07XG5cbiAgICBsZXQgcmVzcG9uc2VUZW1wbGF0ZTtcblxuICAgIC8vIEdlbmVyYXRlIGFwcHJvcHJpYXRlIHJlc3BvbnNlIGJhc2VkIG9uIHR5cGVcbiAgICBzd2l0Y2ggKHJlc3BvbnNlVHlwZSkge1xuICAgICAgY2FzZSAncmZwJzpcbiAgICAgICAgcmVzcG9uc2VUZW1wbGF0ZSA9IGF3YWl0IGdlbmVyYXRlUkZQUmVzcG9uc2UoY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY29uc3RydWN0aW9uJzpcbiAgICAgICAgcmVzcG9uc2VUZW1wbGF0ZSA9IGF3YWl0IGdlbmVyYXRlQ29uc3RydWN0aW9uUmVzcG9uc2UoY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZm9sbG93dXAnOlxuICAgICAgICByZXNwb25zZVRlbXBsYXRlID0gYXdhaXQgZ2VuZXJhdGVGb2xsb3dVcFJlc3BvbnNlKGNvbnRleHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIEF1dG8tZGV0ZWN0IGJhc2VkIG9uIGxlYWQgY2hhcmFjdGVyaXN0aWNzXG4gICAgICAgIGlmIChjb250ZXh0LnNvdXJjZVR5cGUgPT09ICdSRlAnIHx8IGNvbnRleHQubGVhZFR5cGUgPT09ICdob3QnKSB7XG4gICAgICAgICAgcmVzcG9uc2VUZW1wbGF0ZSA9IGF3YWl0IGdlbmVyYXRlUkZQUmVzcG9uc2UoY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5zb3VyY2VUeXBlID09PSAnU1lTVEVNJyB8fCBjb250ZXh0LmxlYWRUaXRsZT8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnY29uc3RydWN0aW9uJykpIHtcbiAgICAgICAgICByZXNwb25zZVRlbXBsYXRlID0gYXdhaXQgZ2VuZXJhdGVDb25zdHJ1Y3Rpb25SZXNwb25zZShjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNwb25zZVRlbXBsYXRlID0gYXdhaXQgZ2VuZXJhdGVGb2xsb3dVcFJlc3BvbnNlKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRW5oYW5jZSByZXNwb25zZSB3aXRoIGFkZGl0aW9uYWwgYnVzaW5lc3MgaW50ZWxsaWdlbmNlXG4gICAgY29uc3QgZW5oYW5jZWRSZXNwb25zZSA9IHtcbiAgICAgIHJlc3BvbnNlVGVtcGxhdGUsXG4gICAgICByZXNwb25zZU1ldGFkYXRhOiB7XG4gICAgICAgIGdlbmVyYXRlZEZvcjogY29udGV4dC5sZWFkVGl0bGUgfHwgJ0xlYWQgb3Bwb3J0dW5pdHknLFxuICAgICAgICB0YXJnZXRBdWRpZW5jZTogY29udGV4dC5jb21wYW55TmFtZSB8fCAnUHJvc3BlY3QnLFxuICAgICAgICByZXNwb25zZVR5cGUsXG4gICAgICAgIGxlYWRUeXBlOiBjb250ZXh0LmxlYWRUeXBlLFxuICAgICAgICBlc3RpbWF0ZWRSZWFkVGltZTogY2FsY3VsYXRlUmVhZFRpbWUocmVzcG9uc2VUZW1wbGF0ZSksXG4gICAgICAgIHN1Z2dlc3RlZFNlbmRUaW1lOiBnZXRTdWdnZXN0ZWRTZW5kVGltZShjb250ZXh0KSxcbiAgICAgICAga2V5UGVyc29uYWxpemF0aW9uUG9pbnRzOiBleHRyYWN0UGVyc29uYWxpemF0aW9uUG9pbnRzKGNvbnRleHQpXG4gICAgICB9LFxuICAgICAgYnVzaW5lc3NDb250ZXh0OiB7XG4gICAgICAgIHN0cmF0ZWdpY1ZhbHVlOiBhc3Nlc3NTdHJhdGVnaWNWYWx1ZShjb250ZXh0KSxcbiAgICAgICAgY29tcGV0aXRpdmVQcmlvcml0eTogZ2V0Q29tcGV0aXRpdmVQcmlvcml0eShjb250ZXh0KSxcbiAgICAgICAgcmVsYXRpb25zaGlwU3RhZ2U6IGRldGVybWluZVJlbGF0aW9uc2hpcFN0YWdlKGNvbnRleHQpLFxuICAgICAgICBuZXh0U3RlcFJlY29tbWVuZGF0aW9uczogZ2V0TmV4dFN0ZXBSZWNvbW1lbmRhdGlvbnMoY29udGV4dCwgcmVzcG9uc2VUeXBlKVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgcmVzcG9uc2U6IGVuaGFuY2VkUmVzcG9uc2UsXG4gICAgICBnZW5lcmF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdSZXNwb25zZSBnZW5lcmF0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdSZXNwb25zZSBnZW5lcmF0aW9uIGZhaWxlZCdcbiAgICB9KTtcbiAgfVxufVxuXG4vLyBDYWxjdWxhdGUgZXN0aW1hdGVkIHJlYWRpbmcgdGltZVxuZnVuY3Rpb24gY2FsY3VsYXRlUmVhZFRpbWUodGVtcGxhdGU6IGFueSk6IHN0cmluZyB7XG4gIGNvbnN0IHRvdGFsV29yZHMgPSBbXG4gICAgdGVtcGxhdGUuZ3JlZXRpbmcsXG4gICAgdGVtcGxhdGUubWFpbkNvbnRlbnQsXG4gICAgdGVtcGxhdGUuY2FsbFRvQWN0aW9uLFxuICAgIHRlbXBsYXRlLmNsb3NpbmdcbiAgXS5qb2luKCcgJykuc3BsaXQoJyAnKS5sZW5ndGg7XG5cbiAgY29uc3QgcmVhZGluZ1RpbWVNaW51dGVzID0gTWF0aC5jZWlsKHRvdGFsV29yZHMgLyAyMDApOyAvLyBBdmVyYWdlIHJlYWRpbmcgc3BlZWRcbiAgcmV0dXJuIGAke3JlYWRpbmdUaW1lTWludXRlc30gbWludXRlJHtyZWFkaW5nVGltZU1pbnV0ZXMgPiAxID8gJ3MnIDogJyd9YDtcbn1cblxuLy8gU3VnZ2VzdCBvcHRpbWFsIHNlbmQgdGltZSBiYXNlZCBvbiBsZWFkIGNoYXJhY3RlcmlzdGljc1xuZnVuY3Rpb24gZ2V0U3VnZ2VzdGVkU2VuZFRpbWUoY29udGV4dDogUmVzcG9uc2VDb250ZXh0KTogc3RyaW5nIHtcbiAgaWYgKGNvbnRleHQubGVhZFR5cGUgPT09ICdob3QnIHx8IGNvbnRleHQuc291cmNlVHlwZSA9PT0gJ1JGUCcpIHtcbiAgICByZXR1cm4gJ1NlbmQgaW1tZWRpYXRlbHkgKHdpdGhpbiAyIGhvdXJzKSc7XG4gIH0gZWxzZSBpZiAoY29udGV4dC5sZWFkVHlwZSA9PT0gJ3dhcm0nKSB7XG4gICAgcmV0dXJuICdTZW5kIHdpdGhpbiAyNCBob3VycyBkdXJpbmcgYnVzaW5lc3MgaG91cnMnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnU2VuZCBkdXJpbmcgb3B0aW1hbCBlbmdhZ2VtZW50IHRpbWVzIChUdWVzZGF5LVRodXJzZGF5LCAxMC0xMSBBTSknO1xuICB9XG59XG5cbi8vIEV4dHJhY3Qga2V5IHBlcnNvbmFsaXphdGlvbiBwb2ludHNcbmZ1bmN0aW9uIGV4dHJhY3RQZXJzb25hbGl6YXRpb25Qb2ludHMoY29udGV4dDogUmVzcG9uc2VDb250ZXh0KTogc3RyaW5nW10ge1xuICBjb25zdCBwb2ludHMgPSBbXTtcbiAgXG4gIGlmIChjb250ZXh0LmxvY2F0aW9uKSBwb2ludHMucHVzaChgTG9jYWwgdG8gJHtjb250ZXh0LmxvY2F0aW9ufWApO1xuICBpZiAoY29udGV4dC5jb21wYW55TmFtZSkgcG9pbnRzLnB1c2goYENvbXBhbnk6ICR7Y29udGV4dC5jb21wYW55TmFtZX1gKTtcbiAgaWYgKGNvbnRleHQuY29udGFjdE5hbWUpIHBvaW50cy5wdXNoKGBDb250YWN0OiAke2NvbnRleHQuY29udGFjdE5hbWV9YCk7XG4gIGlmIChjb250ZXh0LnByb2plY3REZXRhaWxzKSBwb2ludHMucHVzaCgnUHJvamVjdC1zcGVjaWZpYyBkZXRhaWxzIGluY2x1ZGVkJyk7XG4gIGlmIChjb250ZXh0LnNwZWNpYWxSZXF1aXJlbWVudHMpIHBvaW50cy5wdXNoKCdTcGVjaWFsIHJlcXVpcmVtZW50cyBhZGRyZXNzZWQnKTtcbiAgXG4gIHJldHVybiBwb2ludHM7XG59XG5cbi8vIEFzc2VzcyBzdHJhdGVnaWMgdmFsdWUgb2YgdGhlIG9wcG9ydHVuaXR5XG5mdW5jdGlvbiBhc3Nlc3NTdHJhdGVnaWNWYWx1ZShjb250ZXh0OiBSZXNwb25zZUNvbnRleHQpOiBzdHJpbmcge1xuICBpZiAoY29udGV4dC5lc3RpbWF0ZWRWYWx1ZSAmJiBjb250ZXh0LmVzdGltYXRlZFZhbHVlID4gNTAwMDAwKSByZXR1cm4gJ0hpZ2gnO1xuICBpZiAoY29udGV4dC5sZWFkVHlwZSA9PT0gJ2hvdCcpIHJldHVybiAnSGlnaCc7XG4gIGlmIChjb250ZXh0LmxvY2F0aW9uPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkZW52ZXInKSAmJiBjb250ZXh0LmVzdGltYXRlZFZhbHVlICYmIGNvbnRleHQuZXN0aW1hdGVkVmFsdWUgPiAxMDAwMDApIHJldHVybiAnSGlnaCc7XG4gIGlmIChjb250ZXh0LmxvY2F0aW9uPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdncmVlbGV5JykgfHwgY29udGV4dC5sb2NhdGlvbj8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnc3RlcmxpbmcnKSkgcmV0dXJuICdNZWRpdW0tSGlnaCc7XG4gIHJldHVybiAnTWVkaXVtJztcbn1cblxuLy8gRGV0ZXJtaW5lIGNvbXBldGl0aXZlIHByaW9yaXR5IGxldmVsXG5mdW5jdGlvbiBnZXRDb21wZXRpdGl2ZVByaW9yaXR5KGNvbnRleHQ6IFJlc3BvbnNlQ29udGV4dCk6IHN0cmluZyB7XG4gIGlmIChjb250ZXh0LmxlYWRUeXBlID09PSAnaG90JyAmJiBjb250ZXh0LnNvdXJjZVR5cGUgPT09ICdSRlAnKSByZXR1cm4gJ1VyZ2VudCc7XG4gIGlmIChjb250ZXh0LnVyZ2VuY3lMZXZlbCA9PT0gJ2ltbWVkaWF0ZScpIHJldHVybiAnVXJnZW50JztcbiAgaWYgKGNvbnRleHQubGVhZFR5cGUgPT09ICdob3QnKSByZXR1cm4gJ0hpZ2gnO1xuICBpZiAoY29udGV4dC5sZWFkVHlwZSA9PT0gJ3dhcm0nKSByZXR1cm4gJ01lZGl1bSc7XG4gIHJldHVybiAnU3RhbmRhcmQnO1xufVxuXG4vLyBEZXRlcm1pbmUgY3VycmVudCByZWxhdGlvbnNoaXAgc3RhZ2VcbmZ1bmN0aW9uIGRldGVybWluZVJlbGF0aW9uc2hpcFN0YWdlKGNvbnRleHQ6IFJlc3BvbnNlQ29udGV4dCk6IHN0cmluZyB7XG4gIGlmIChjb250ZXh0LnNvdXJjZVR5cGUgPT09ICdSRlAnKSByZXR1cm4gJ0luaXRpYWwgb3Bwb3J0dW5pdHknO1xuICBpZiAoY29udGV4dC5sZWFkVHlwZSA9PT0gJ2hvdCcpIHJldHVybiAnQWN0aXZlIGludGVyZXN0JztcbiAgaWYgKGNvbnRleHQubGVhZFR5cGUgPT09ICd3YXJtJykgcmV0dXJuICdSZWxhdGlvbnNoaXAgYnVpbGRpbmcnO1xuICByZXR1cm4gJ0Vhcmx5IG51cnR1cmluZyc7XG59XG5cbi8vIEdldCBuZXh0IHN0ZXAgcmVjb21tZW5kYXRpb25zXG5mdW5jdGlvbiBnZXROZXh0U3RlcFJlY29tbWVuZGF0aW9ucyhjb250ZXh0OiBSZXNwb25zZUNvbnRleHQsIHJlc3BvbnNlVHlwZTogc3RyaW5nKTogc3RyaW5nW10ge1xuICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBbXTtcbiAgXG4gIGlmIChyZXNwb25zZVR5cGUgPT09ICdyZnAnKSB7XG4gICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ1ByZXBhcmUgY2FwYWJpbGl0eSBzdGF0ZW1lbnQnKTtcbiAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnUmVzZWFyY2ggYWdlbmN5IGJhY2tncm91bmQnKTtcbiAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnU2NoZWR1bGUgcHJlLXByb3Bvc2FsIG1lZXRpbmcgaWYgcG9zc2libGUnKTtcbiAgfSBlbHNlIGlmIChyZXNwb25zZVR5cGUgPT09ICdjb25zdHJ1Y3Rpb24nKSB7XG4gICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ01vbml0b3IgY29uc3RydWN0aW9uIHByb2dyZXNzJyk7XG4gICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0Nvbm5lY3Qgd2l0aCBwcm9qZWN0IG1hbmFnZXInKTtcbiAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnUHJlcGFyZSBwb3N0LWNvbnN0cnVjdGlvbiBzZXJ2aWNlcyBvdmVydmlldycpO1xuICB9IGVsc2Uge1xuICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdTY2hlZHVsZSBmb2xsb3ctdXAgY2FsbCcpO1xuICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdQcmVwYXJlIGN1c3RvbWl6ZWQgcHJvcG9zYWwnKTtcbiAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnUmVzZWFyY2ggY2xpZW50IGJhY2tncm91bmQnKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbn0iXSwibmFtZXMiOlsiZ2VuZXJhdGVSRlBSZXNwb25zZSIsImdlbmVyYXRlQ29uc3RydWN0aW9uUmVzcG9uc2UiLCJnZW5lcmF0ZUZvbGxvd1VwUmVzcG9uc2UiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwicmVzcG9uc2VUeXBlIiwibGVhZERhdGEiLCJjdXN0b21Db250ZXh0IiwiYm9keSIsImxlYWRUeXBlIiwiY29udGV4dCIsInNvdXJjZVR5cGUiLCJsZWFkVGl0bGUiLCJ0aXRsZSIsImNvbXBhbnlOYW1lIiwiY29tcGFueSIsImNvbnRhY3ROYW1lIiwibG9jYXRpb24iLCJjaXR5Iiwic3RhdGUiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsInByb2plY3REZXRhaWxzIiwic2VydmljZURlc2NyaXB0aW9uIiwiZXN0aW1hdGVkVmFsdWUiLCJ1cmdlbmN5TGV2ZWwiLCJzcGVjaWFsUmVxdWlyZW1lbnRzIiwicmVzcG9uc2VUZW1wbGF0ZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJlbmhhbmNlZFJlc3BvbnNlIiwicmVzcG9uc2VNZXRhZGF0YSIsImdlbmVyYXRlZEZvciIsInRhcmdldEF1ZGllbmNlIiwiZXN0aW1hdGVkUmVhZFRpbWUiLCJjYWxjdWxhdGVSZWFkVGltZSIsInN1Z2dlc3RlZFNlbmRUaW1lIiwiZ2V0U3VnZ2VzdGVkU2VuZFRpbWUiLCJrZXlQZXJzb25hbGl6YXRpb25Qb2ludHMiLCJleHRyYWN0UGVyc29uYWxpemF0aW9uUG9pbnRzIiwiYnVzaW5lc3NDb250ZXh0Iiwic3RyYXRlZ2ljVmFsdWUiLCJhc3Nlc3NTdHJhdGVnaWNWYWx1ZSIsImNvbXBldGl0aXZlUHJpb3JpdHkiLCJnZXRDb21wZXRpdGl2ZVByaW9yaXR5IiwicmVsYXRpb25zaGlwU3RhZ2UiLCJkZXRlcm1pbmVSZWxhdGlvbnNoaXBTdGFnZSIsIm5leHRTdGVwUmVjb21tZW5kYXRpb25zIiwiZ2V0TmV4dFN0ZXBSZWNvbW1lbmRhdGlvbnMiLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJnZW5lcmF0ZWRBdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImNvbnNvbGUiLCJFcnJvciIsIm1lc3NhZ2UiLCJ0ZW1wbGF0ZSIsInRvdGFsV29yZHMiLCJncmVldGluZyIsIm1haW5Db250ZW50IiwiY2FsbFRvQWN0aW9uIiwiY2xvc2luZyIsInNwbGl0IiwibGVuZ3RoIiwicmVhZGluZ1RpbWVNaW51dGVzIiwiTWF0aCIsImNlaWwiLCJwb2ludHMiLCJwdXNoIiwicmVjb21tZW5kYXRpb25zIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/ai/generate-response.ts\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fai%2Fgenerate-response&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fai%2Fgenerate-response.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();