"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/leads.list";
exports.ids = ["pages/api/leads.list"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fleads.list&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fleads.list.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fleads.list&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fleads.list.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_leads_list_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/pages/api/leads.list.ts */ \"(api-node)/./src/pages/api/leads.list.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_leads_list_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_leads_list_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/leads.list\",\n        pathname: \"/api/leads.list\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_leads_list_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/leads.list\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/leads.list\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fleads.list&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fleads.list.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// src/lib/prisma.ts\n\nconst prisma = global.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0\n});\nif (true) global.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9CQUFvQjtBQUMwQjtBQVF2QyxNQUFNQyxTQUNYQyxPQUFPRCxNQUFNLElBQ2IsSUFBSUQsd0RBQVlBLENBQUM7SUFDZkcsS0FBS0MsS0FBc0MsR0FBRztRQUFDO1FBQVM7UUFBUztLQUFPLEdBQUcsQ0FBUztBQUN0RixHQUFHO0FBRUwsSUFBSUEsSUFBcUMsRUFBRUYsT0FBT0QsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvbGliL3ByaXNtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL3ByaXNtYS50c1xuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSBcIkBwcmlzbWEvY2xpZW50XCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gQWxsb3cgZ2xvYmFsIGB2YXJgIHJlZGVjbGFyYXRpb24gaW4gZGV2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID1cbiAgZ2xvYmFsLnByaXNtYSA/P1xuICBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICBsb2c6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgPyBbXCJxdWVyeVwiLCBcImVycm9yXCIsIFwid2FyblwiXSA6IFtcImVycm9yXCJdLFxuICB9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgZ2xvYmFsLnByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJnbG9iYWwiLCJsb2ciLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/rbac.ts":
/*!*************************!*\
  !*** ./src/lib/rbac.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PERMS: () => (/* binding */ PERMS),\n/* harmony export */   assertPermission: () => (/* binding */ assertPermission),\n/* harmony export */   getEmailFromReq: () => (/* binding */ getEmailFromReq),\n/* harmony export */   getOrgIdFromReq: () => (/* binding */ getOrgIdFromReq)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n// src/lib/rbac.ts\n\n/**\n * Enterprise-Grade Permission Catalog\n * Granular read/write permissions for all business modules\n * Keep codes in sync with seed.\n */ const PERMS = {\n    // Dashboard & Analytics\n    DASHBOARD_VIEW: \"dashboard:view\",\n    ANALYTICS_READ: \"analytics:read\",\n    REPORTS_READ: \"reports:read\",\n    REPORTS_CREATE: \"reports:create\",\n    REPORTS_EXPORT: \"reports:export\",\n    // Lead Management\n    LEAD_READ: \"lead:read\",\n    LEAD_CREATE: \"lead:create\",\n    LEAD_UPDATE: \"lead:update\",\n    LEAD_DELETE: \"lead:delete\",\n    LEAD_EXPORT: \"lead:export\",\n    LEAD_ASSIGN: \"lead:assign\",\n    LEAD_CONVERT: \"lead:convert\",\n    // Job Management\n    JOB_READ: \"job:read\",\n    JOB_CREATE: \"job:create\",\n    JOB_UPDATE: \"job:update\",\n    JOB_DELETE: \"job:delete\",\n    JOB_ASSIGN: \"job:assign\",\n    JOB_SCHEDULE: \"job:schedule\",\n    JOB_COMPLETE: \"job:complete\",\n    // Workforce Management\n    EMPLOYEE_READ: \"employee:read\",\n    EMPLOYEE_CREATE: \"employee:create\",\n    EMPLOYEE_UPDATE: \"employee:update\",\n    EMPLOYEE_DELETE: \"employee:delete\",\n    EMPLOYEE_SCHEDULE: \"employee:schedule\",\n    PAYROLL_READ: \"payroll:read\",\n    PAYROLL_MANAGE: \"payroll:manage\",\n    TIMECLOCK_READ: \"timeclock:read\",\n    TIMECLOCK_MANAGE: \"timeclock:manage\",\n    // HR Management\n    HR_READ: \"hr:read\",\n    HR_MANAGE: \"hr:manage\",\n    HR_HIRE: \"hr:hire\",\n    HR_TERMINATE: \"hr:terminate\",\n    TRAINING_READ: \"training:read\",\n    TRAINING_MANAGE: \"training:manage\",\n    TRAINING_ASSIGN: \"training:assign\",\n    // Client & Customer Management\n    CLIENT_READ: \"client:read\",\n    CLIENT_CREATE: \"client:create\",\n    CLIENT_UPDATE: \"client:update\",\n    CLIENT_DELETE: \"client:delete\",\n    CLIENT_COMMUNICATE: \"client:communicate\",\n    // Financial Management\n    BILLING_READ: \"billing:read\",\n    BILLING_MANAGE: \"billing:manage\",\n    INVOICE_READ: \"invoice:read\",\n    INVOICE_CREATE: \"invoice:create\",\n    INVOICE_UPDATE: \"invoice:update\",\n    INVOICE_DELETE: \"invoice:delete\",\n    PAYMENT_READ: \"payment:read\",\n    PAYMENT_PROCESS: \"payment:process\",\n    REVENUE_READ: \"revenue:read\",\n    REVENUE_MANAGE: \"revenue:manage\",\n    // Operations & Scheduling\n    SCHEDULE_READ: \"schedule:read\",\n    SCHEDULE_MANAGE: \"schedule:manage\",\n    OPERATIONS_READ: \"operations:read\",\n    OPERATIONS_MANAGE: \"operations:manage\",\n    INVENTORY_READ: \"inventory:read\",\n    INVENTORY_MANAGE: \"inventory:manage\",\n    // System Administration\n    USER_READ: \"user:read\",\n    USER_CREATE: \"user:create\",\n    USER_UPDATE: \"user:update\",\n    USER_DELETE: \"user:delete\",\n    USER_IMPERSONATE: \"user:impersonate\",\n    PASSWORD_RESET: \"password:reset\",\n    ROLES_READ: \"roles:read\",\n    ROLES_MANAGE: \"roles:manage\",\n    SYSTEM_SETTINGS: \"system:settings\",\n    SYSTEM_BACKUP: \"system:backup\",\n    AUDIT_READ: \"audit:read\",\n    // Provider Portal (White-label)\n    PROVIDER_DASHBOARD: \"provider:dashboard\",\n    PROVIDER_BILLING: \"provider:billing\",\n    PROVIDER_ANALYTICS: \"provider:analytics\",\n    PROVIDER_SETTINGS: \"provider:settings\",\n    PROVIDER_CLIENTS: \"provider:clients\",\n    // Document & Asset Management\n    DOCUMENT_READ: \"document:read\",\n    DOCUMENT_CREATE: \"document:create\",\n    DOCUMENT_UPDATE: \"document:update\",\n    DOCUMENT_DELETE: \"document:delete\",\n    MEDIA_READ: \"media:read\",\n    MEDIA_UPLOAD: \"media:upload\",\n    MEDIA_DELETE: \"media:delete\"\n};\n/**\n * Email that should bypass RBAC permission checks entirely.\n * If DEV_USER_EMAIL is set in the environment, any request from that\n * email address will be treated as having all permissions. This is\n * useful for development and automated testing. In production you\n * should leave DEV_USER_EMAIL unset.\n */ const DEV_USER_EMAIL = process.env.DEV_USER_EMAIL?.toLowerCase() || null;\n/**\n * Extract current user's email from cookie or header.\n * - Cookie: mv_user=<email>\n * - Header: x-mv-user: <email>  (useful for scripts/tests)\n */ function getEmailFromReq(req) {\n    const fromCookie = req.cookies?.mv_user;\n    const fromHeader = req.headers[\"x-mv-user\"] || req.headers[\"x-mvuser\"];\n    const raw = (Array.isArray(fromCookie) ? fromCookie[0] : fromCookie) ?? fromHeader ?? \"\";\n    const email = raw?.toString().trim().toLowerCase();\n    return email || null;\n}\n/** Look up orgId for current user (used to scope queries). */ async function getOrgIdFromReq(req) {\n    const email = getEmailFromReq(req);\n    if (!email) return null;\n    // Development bypass: if this is the dev user, return a fixed orgId\n    // if provided via DEV_ORG_ID, otherwise fall through to DB lookup.\n    if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n        // Use DEV_ORG_ID if provided, else null to indicate no org\n        const devOrg = process.env.DEV_ORG_ID;\n        if (devOrg) return devOrg;\n        // As a fallback, attempt to fetch the first org from the database\n        try {\n            const firstOrg = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.findFirst({\n                select: {\n                    id: true\n                }\n            });\n            return firstOrg?.id ?? null;\n        } catch  {\n            return null;\n        }\n    }\n    const u = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n        where: {\n            email\n        },\n        select: {\n            orgId: true\n        }\n    });\n    return u?.orgId ?? null;\n}\n/**\n * Fetch user's effective permissions from RBAC tables.\n * Falls back to legacy User.role for OWNER/MANAGER/STAFF convenience.\n */ async function getUserPermCodes(userId, legacyRole) {\n    const roleLinks = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacUserRole.findMany({\n        where: {\n            userId\n        },\n        select: {\n            roleId: true\n        }\n    });\n    const roleIds = roleLinks.map((r)=>r.roleId);\n    const perms = roleIds.length ? await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacRolePermission.findMany({\n        where: {\n            roleId: {\n                in: roleIds\n            }\n        },\n        include: {\n            permission: true\n        }\n    }) : [];\n    const codes = new Set(perms.map((rp)=>rp.permission.code));\n    // Legacy role convenience (non-blocking): give sensible defaults based on enterprise role hierarchy\n    switch((legacyRole || \"\").toUpperCase()){\n        case \"OWNER\":\n            // Owners get full system access - all permissions\n            Object.values(PERMS).forEach((c)=>codes.add(c));\n            break;\n        case \"MANAGER\":\n            // Managers get operational control but limited system administration\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.ANALYTICS_READ,\n                PERMS.REPORTS_READ,\n                PERMS.REPORTS_CREATE,\n                PERMS.REPORTS_EXPORT,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT,\n                PERMS.LEAD_ASSIGN,\n                PERMS.LEAD_CONVERT,\n                PERMS.JOB_READ,\n                PERMS.JOB_CREATE,\n                PERMS.JOB_UPDATE,\n                PERMS.JOB_DELETE,\n                PERMS.JOB_ASSIGN,\n                PERMS.JOB_SCHEDULE,\n                PERMS.JOB_COMPLETE,\n                PERMS.EMPLOYEE_READ,\n                PERMS.EMPLOYEE_UPDATE,\n                PERMS.EMPLOYEE_SCHEDULE,\n                PERMS.PAYROLL_READ,\n                PERMS.TIMECLOCK_READ,\n                PERMS.TIMECLOCK_MANAGE,\n                PERMS.TRAINING_READ,\n                PERMS.TRAINING_ASSIGN,\n                PERMS.CLIENT_READ,\n                PERMS.CLIENT_CREATE,\n                PERMS.CLIENT_UPDATE,\n                PERMS.CLIENT_COMMUNICATE,\n                PERMS.BILLING_READ,\n                PERMS.INVOICE_READ,\n                PERMS.INVOICE_CREATE,\n                PERMS.INVOICE_UPDATE,\n                PERMS.PAYMENT_READ,\n                PERMS.REVENUE_READ,\n                PERMS.SCHEDULE_READ,\n                PERMS.SCHEDULE_MANAGE,\n                PERMS.OPERATIONS_READ,\n                PERMS.OPERATIONS_MANAGE,\n                PERMS.INVENTORY_READ,\n                PERMS.INVENTORY_MANAGE,\n                PERMS.DOCUMENT_READ,\n                PERMS.DOCUMENT_CREATE,\n                PERMS.DOCUMENT_UPDATE,\n                PERMS.MEDIA_READ,\n                PERMS.MEDIA_UPLOAD\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"STAFF\":\n            // Staff get basic operational access - mostly read with limited write\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.JOB_READ,\n                PERMS.JOB_UPDATE,\n                PERMS.TIMECLOCK_READ,\n                PERMS.TRAINING_READ,\n                PERMS.CLIENT_READ,\n                PERMS.SCHEDULE_READ,\n                PERMS.OPERATIONS_READ,\n                PERMS.INVENTORY_READ,\n                PERMS.DOCUMENT_READ,\n                PERMS.MEDIA_READ\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"ACCOUNTANT\":\n            // Accountants get financial and HR management access\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.ANALYTICS_READ,\n                PERMS.REPORTS_READ,\n                PERMS.REPORTS_CREATE,\n                PERMS.REPORTS_EXPORT,\n                PERMS.EMPLOYEE_READ,\n                PERMS.PAYROLL_READ,\n                PERMS.PAYROLL_MANAGE,\n                PERMS.TIMECLOCK_READ,\n                PERMS.HR_READ,\n                PERMS.BILLING_READ,\n                PERMS.BILLING_MANAGE,\n                PERMS.INVOICE_READ,\n                PERMS.INVOICE_CREATE,\n                PERMS.INVOICE_UPDATE,\n                PERMS.INVOICE_DELETE,\n                PERMS.PAYMENT_READ,\n                PERMS.PAYMENT_PROCESS,\n                PERMS.REVENUE_READ,\n                PERMS.REVENUE_MANAGE,\n                PERMS.DOCUMENT_READ,\n                PERMS.DOCUMENT_CREATE,\n                PERMS.AUDIT_READ\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"PROVIDER\":\n            // Provider gets provider portal access and client management\n            [\n                PERMS.PROVIDER_DASHBOARD,\n                PERMS.PROVIDER_BILLING,\n                PERMS.PROVIDER_ANALYTICS,\n                PERMS.PROVIDER_SETTINGS,\n                PERMS.PROVIDER_CLIENTS,\n                PERMS.ANALYTICS_READ,\n                PERMS.REPORTS_READ,\n                PERMS.BILLING_READ,\n                PERMS.REVENUE_READ\n            ].forEach((c)=>codes.add(c));\n            break;\n    }\n    return codes;\n}\n/**\n * Assert that current request is from an authenticated user with a given permission.\n * Writes 401/403 to res if not allowed. Returns true if allowed, false otherwise.\n */ async function assertPermission(req, res, required) {\n    try {\n        const email = getEmailFromReq(req);\n        if (!email) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        // Development bypass: if the incoming email matches the DEV_USER_EMAIL\n        // then skip any database lookups and allow the request. This permits\n        // automated tests and development sessions to exercise any API\n        // regardless of the user's persisted role or permissions. If no\n        // DEV_USER_EMAIL is configured, this block has no effect.\n        if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n            return true;\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                email\n            },\n            select: {\n                id: true,\n                role: true\n            }\n        });\n        if (!user) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        const codes = await getUserPermCodes(user.id, user.role);\n        if (!codes.has(required)) {\n            res.status(403).json({\n                ok: false,\n                error: \"Forbidden\"\n            });\n            return false;\n        }\n        return true;\n    } catch (e) {\n        console.error(\"assertPermission error:\", e);\n        res.status(500).json({\n            ok: false,\n            error: \"Internal Server Error\"\n        });\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/rbac.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/leads.list.ts":
/*!*************************************!*\
  !*** ./src/pages/api/leads.list.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n/* harmony import */ var _lib_rbac__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/rbac */ \"(api-node)/./src/lib/rbac.ts\");\n// src/pages/api/leads.list.ts\n\n\nconst config = {\n    api: {\n        bodyParser: false\n    }\n}; // GET-only\nfunction toDateOrUndefined(v) {\n    if (!v) return undefined;\n    const d = new Date(v);\n    return isNaN(d.getTime()) ? undefined : d;\n}\nasync function handler(req, res) {\n    res.setHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n    try {\n        if (req.method !== \"GET\") {\n            res.setHeader(\"Allow\", \"GET\");\n            return res.status(405).json({\n                ok: false,\n                error: \"Method Not Allowed\"\n            });\n        }\n        if (!await (0,_lib_rbac__WEBPACK_IMPORTED_MODULE_1__.assertPermission)(req, res, _lib_rbac__WEBPACK_IMPORTED_MODULE_1__.PERMS.LEAD_READ)) return;\n        // Safely extract query parameters. Next.js types query values as string | string[] | undefined.\n        const { q, sourceType, postal, from, to, page, pageSize } = req.query;\n        const qStr = Array.isArray(q) ? q[0] : q;\n        const sourceTypeStr = Array.isArray(sourceType) ? sourceType[0] : sourceType;\n        const postalStr = Array.isArray(postal) ? postal[0] : postal;\n        const fromStr = Array.isArray(from) ? from[0] : from;\n        const toStr = Array.isArray(to) ? to[0] : to;\n        const pageStr = Array.isArray(page) ? page[0] : page;\n        const pageSizeStr = Array.isArray(pageSize) ? pageSize[0] : pageSize;\n        const pg = Math.max(1, parseInt(pageStr ?? \"1\", 10) || 1);\n        const ps = Math.min(100, Math.max(1, parseInt(pageSizeStr ?? \"20\", 10) || 20));\n        const skip = (pg - 1) * ps;\n        const createdFrom = toDateOrUndefined(fromStr);\n        const createdTo = toDateOrUndefined(toStr);\n        const where = {};\n        if (qStr) {\n            where.OR = [\n                {\n                    publicId: {\n                        contains: qStr,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    company: {\n                        contains: qStr,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    contactName: {\n                        contains: qStr,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    email: {\n                        contains: qStr,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    phoneE164: {\n                        contains: qStr,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    serviceCode: {\n                        contains: qStr,\n                        mode: \"insensitive\"\n                    }\n                }\n            ];\n        }\n        // sourceType must be cast to the Prisma enum. Uppercase ensures consistent matching.\n        if (sourceTypeStr) where.sourceType = sourceTypeStr.toUpperCase();\n        if (postalStr) {\n            where.OR = [\n                ...where.OR ?? [],\n                {\n                    postalCode: {\n                        contains: postalStr,\n                        mode: \"insensitive\"\n                    }\n                },\n                {\n                    zip: {\n                        contains: postalStr,\n                        mode: \"insensitive\"\n                    }\n                }\n            ];\n        }\n        if (createdFrom || createdTo) {\n            where.createdAt = {};\n            if (createdFrom) where.createdAt.gte = createdFrom;\n            if (createdTo) where.createdAt.lte = createdTo;\n        }\n        const [total, items] = await Promise.all([\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where\n            }),\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({\n                where,\n                skip,\n                take: ps,\n                orderBy: {\n                    createdAt: \"desc\"\n                },\n                select: {\n                    id: true,\n                    publicId: true,\n                    sourceType: true,\n                    sourceDetail: true,\n                    company: true,\n                    contactName: true,\n                    email: true,\n                    phoneE164: true,\n                    serviceCode: true,\n                    postalCode: true,\n                    zip: true,\n                    aiScore: true,\n                    systemGenerated: true,\n                    convertedAt: true,\n                    rfp: true,\n                    status: true,\n                    createdAt: true,\n                    // Include enrichmentJson so the UI can determine billing eligibility\n                    enrichmentJson: true\n                }\n            })\n        ]);\n        return res.status(200).json({\n            ok: true,\n            total,\n            page: pg,\n            pageSize: ps,\n            items\n        });\n    } catch (err) {\n        console.error(\"API /api/leads.list error:\", err);\n        const msg = err?.message || \"Internal Server Error\";\n        return res.status(500).json({\n            ok: false,\n            error: msg\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/leads.list.ts\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fleads.list&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fleads.list.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();