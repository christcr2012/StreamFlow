"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/dashboard/summary";
exports.ids = ["pages/api/dashboard/summary"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdashboard%2Fsummary&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fdashboard%2Fsummary.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdashboard%2Fsummary&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fdashboard%2Fsummary.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_dashboard_summary_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/pages/api/dashboard/summary.ts */ \"(api-node)/./src/pages/api/dashboard/summary.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_dashboard_summary_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_dashboard_summary_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/dashboard/summary\",\n        pathname: \"/api/dashboard/summary\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_dashboard_summary_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/dashboard/summary\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/dashboard/summary\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGZGFzaGJvYXJkJTJGc3VtbWFyeSZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnNyYyUyRnBhZ2VzJTJGYXBpJTJGZGFzaGJvYXJkJTJGc3VtbWFyeS50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUQ7QUFDQztBQUN1QztBQUNyQztBQUMxRDtBQUNpRTtBQUNPO0FBQ0Y7QUFDdEU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGdFQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxnRUFBUTtBQUNwQztBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLGFBQWEsT0FBb0MsSUFBSSxDQUFFO0FBQ3ZELHdCQUF3QixNQUF1QztBQUMvRCxDQUFDO0FBQ007QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsS0FBcUIsRUFBRSxFQUUxQjtBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3REFBd0Q7QUFDcEU7QUFDQTtBQUNBLHVCQUF1Qiw0RUFBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw2Q0FBNkMsRUFBNkM7QUFDMUYsNENBQTRDLEtBQXdDO0FBQ3BGLGlDQUFpQyxLQUFvQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsZ0ZBQWM7QUFDL0UsK0RBQStELHlDQUF5QztBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxRQUFRLEVBQUUsTUFBTTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGtCQUFrQjtBQUNsQix1Q0FBdUMsUUFBUSxFQUFFLFFBQVE7QUFDekQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsNkVBQTZFLGdGQUFjO0FBQzNGLGlDQUFpQyxRQUFRLEVBQUUsUUFBUTtBQUNuRCwwQkFBMEIsdUVBQVE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxRUFBUztBQUNqQixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VuZEVycm9yIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvYXBpLXV0aWxzXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3NyYy9wYWdlcy9hcGkvZGFzaGJvYXJkL3N1bW1hcnkudHNcIjtcbmltcG9ydCB7IGdldFRyYWNlciwgU3BhbktpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvdHJhY2UvdHJhY2VyXCI7XG5pbXBvcnQgeyBCYXNlU2VydmVyU3BhbiB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi90cmFjZS9jb25zdGFudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZGFzaGJvYXJkL3N1bW1hcnlcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kYXNoYm9hcmQvc3VtbWFyeVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kLFxuICAgIGRpc3REaXI6IHByb2Nlc3MuZW52Ll9fTkVYVF9SRUxBVElWRV9ESVNUX0RJUiB8fCAnJyxcbiAgICByZWxhdGl2ZVByb2plY3REaXI6IHByb2Nlc3MuZW52Ll9fTkVYVF9SRUxBVElWRV9QUk9KRUNUX0RJUiB8fCAnJ1xufSk7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcywgY3R4KSB7XG4gICAgbGV0IHNyY1BhZ2UgPSBcIi9hcGkvZGFzaGJvYXJkL3N1bW1hcnlcIjtcbiAgICAvLyB0dXJib3BhY2sgZG9lc24ndCBub3JtYWxpemUgYC9pbmRleGAgaW4gdGhlIHBhZ2UgbmFtZVxuICAgIC8vIHNvIHdlIG5lZWQgdG8gdG8gcHJvY2VzcyBkeW5hbWljIHJvdXRlcyBwcm9wZXJseVxuICAgIC8vIFRPRE86IGZpeCB0dXJib3BhY2sgcHJvdmlkaW5nIGRpZmZlcmluZyB2YWx1ZSBmcm9tIHdlYnBhY2tcbiAgICBpZiAocHJvY2Vzcy5lbnYuVFVSQk9QQUNLKSB7XG4gICAgICAgIHNyY1BhZ2UgPSBzcmNQYWdlLnJlcGxhY2UoL1xcL2luZGV4JC8sICcnKSB8fCAnLyc7XG4gICAgfVxuICAgIGNvbnN0IHByZXBhcmVSZXN1bHQgPSBhd2FpdCByb3V0ZU1vZHVsZS5wcmVwYXJlKHJlcSwgcmVzLCB7XG4gICAgICAgIHNyY1BhZ2VcbiAgICB9KTtcbiAgICBpZiAoIXByZXBhcmVSZXN1bHQpIHtcbiAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSA0MDA7XG4gICAgICAgIHJlcy5lbmQoJ0JhZCBSZXF1ZXN0Jyk7XG4gICAgICAgIGN0eC53YWl0VW50aWwgPT0gbnVsbCA/IHZvaWQgMCA6IGN0eC53YWl0VW50aWwuY2FsbChjdHgsIFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHF1ZXJ5LCBwYXJhbXMsIHByZXJlbmRlck1hbmlmZXN0LCByb3V0ZXJTZXJ2ZXJDb250ZXh0IH0gPSBwcmVwYXJlUmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlcS5tZXRob2QgfHwgJ0dFVCc7XG4gICAgICAgIGNvbnN0IHRyYWNlciA9IGdldFRyYWNlcigpO1xuICAgICAgICBjb25zdCBhY3RpdmVTcGFuID0gdHJhY2VyLmdldEFjdGl2ZVNjb3BlU3BhbigpO1xuICAgICAgICBjb25zdCBvblJlcXVlc3RFcnJvciA9IHJvdXRlTW9kdWxlLmluc3RydW1lbnRhdGlvbk9uUmVxdWVzdEVycm9yLmJpbmQocm91dGVNb2R1bGUpO1xuICAgICAgICBjb25zdCBpbnZva2VSb3V0ZU1vZHVsZSA9IGFzeW5jIChzcGFuKT0+cm91dGVNb2R1bGUucmVuZGVyKHJlcSwgcmVzLCB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucXVlcnksXG4gICAgICAgICAgICAgICAgICAgIC4uLnBhcmFtc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSZXZhbGlkYXRlSGVhZGVyS2V5czogcHJvY2Vzcy5lbnYuX19ORVhUX0FMTE9XRURfUkVWQUxJREFURV9IRUFERVJTLFxuICAgICAgICAgICAgICAgIG11bHRpWm9uZURyYWZ0TW9kZTogQm9vbGVhbihwcm9jZXNzLmVudi5fX05FWFRfTVVMVElfWk9ORV9EUkFGVF9NT0RFKSxcbiAgICAgICAgICAgICAgICB0cnVzdEhvc3RIZWFkZXI6IHByb2Nlc3MuZW52Ll9fTkVYVF9UUlVTVF9IT1NUX0hFQURFUixcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBnZXQgdGhpcyBmcm9tIGZyb20gcnVudGltZSBlbnYgc28gbWFuaWZlc3RcbiAgICAgICAgICAgICAgICAvLyBkb2Vzbid0IG5lZWQgdG8gbG9hZFxuICAgICAgICAgICAgICAgIHByZXZpZXdQcm9wczogcHJlcmVuZGVyTWFuaWZlc3QucHJldmlldyxcbiAgICAgICAgICAgICAgICBwcm9wYWdhdGVFcnJvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGV2OiByb3V0ZU1vZHVsZS5pc0RldixcbiAgICAgICAgICAgICAgICBwYWdlOiBcIi9hcGkvZGFzaGJvYXJkL3N1bW1hcnlcIixcbiAgICAgICAgICAgICAgICBpbnRlcm5hbFJldmFsaWRhdGU6IHJvdXRlclNlcnZlckNvbnRleHQgPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlclNlcnZlckNvbnRleHQucmV2YWxpZGF0ZSxcbiAgICAgICAgICAgICAgICBvbkVycm9yOiAoLi4uYXJncyk9Pm9uUmVxdWVzdEVycm9yKHJlcSwgLi4uYXJncylcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoKCk9PntcbiAgICAgICAgICAgICAgICBpZiAoIXNwYW4pIHJldHVybjtcbiAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgICAgICAnaHR0cC5zdGF0dXNfY29kZSc6IHJlcy5zdGF0dXNDb2RlLFxuICAgICAgICAgICAgICAgICAgICAnbmV4dC5yc2MnOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RTcGFuQXR0cmlidXRlcyA9IHRyYWNlci5nZXRSb290U3BhbkF0dHJpYnV0ZXMoKTtcbiAgICAgICAgICAgICAgICAvLyBXZSB3ZXJlIHVuYWJsZSB0byBnZXQgYXR0cmlidXRlcywgcHJvYmFibHkgT1RFTCBpcyBub3QgZW5hYmxlZFxuICAgICAgICAgICAgICAgIGlmICghcm9vdFNwYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJvb3RTcGFuQXR0cmlidXRlcy5nZXQoJ25leHQuc3Bhbl90eXBlJykgIT09IEJhc2VTZXJ2ZXJTcGFuLmhhbmRsZVJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBVbmV4cGVjdGVkIHJvb3Qgc3BhbiB0eXBlICcke3Jvb3RTcGFuQXR0cmlidXRlcy5nZXQoJ25leHQuc3Bhbl90eXBlJyl9Jy4gUGxlYXNlIHJlcG9ydCB0aGlzIE5leHQuanMgaXNzdWUgaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzYCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgcm91dGUgPSByb290U3BhbkF0dHJpYnV0ZXMuZ2V0KCduZXh0LnJvdXRlJyk7XG4gICAgICAgICAgICAgICAgaWYgKHJvdXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBgJHttZXRob2R9ICR7cm91dGV9YDtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICduZXh0LnJvdXRlJzogcm91dGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaHR0cC5yb3V0ZSc6IHJvdXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ25leHQuc3Bhbl9uYW1lJzogbmFtZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi51cGRhdGVOYW1lKG5hbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4udXBkYXRlTmFtZShgJHttZXRob2R9ICR7cmVxLnVybH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVE9ETzogYWN0aXZlU3BhbiBjb2RlIHBhdGggaXMgZm9yIHdoZW4gd3JhcHBlZCBieVxuICAgICAgICAvLyBuZXh0LXNlcnZlciBjYW4gYmUgcmVtb3ZlZCB3aGVuIHRoaXMgaXMgbm8gbG9uZ2VyIHVzZWRcbiAgICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgICAgIGF3YWl0IGludm9rZVJvdXRlTW9kdWxlKGFjdGl2ZVNwYW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdHJhY2VyLndpdGhQcm9wYWdhdGVkQ29udGV4dChyZXEuaGVhZGVycywgKCk9PnRyYWNlci50cmFjZShCYXNlU2VydmVyU3Bhbi5oYW5kbGVSZXF1ZXN0LCB7XG4gICAgICAgICAgICAgICAgICAgIHNwYW5OYW1lOiBgJHttZXRob2R9ICR7cmVxLnVybH1gLFxuICAgICAgICAgICAgICAgICAgICBraW5kOiBTcGFuS2luZC5TRVJWRVIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdodHRwLm1ldGhvZCc6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdodHRwLnRhcmdldCc6IHJlcS51cmxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGludm9rZVJvdXRlTW9kdWxlKSk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgcmUtdGhyb3cgaW4gZGV2IHRvIHNob3cgdGhlIGVycm9yIG92ZXJsYXlcbiAgICAgICAgaWYgKHJvdXRlTW9kdWxlLmlzRGV2KSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyBpcyB0ZWNobmljYWxseSBhbiBpbnZhcmlhbnQgYXMgZXJyb3IgaGFuZGxpbmdcbiAgICAgICAgLy8gc2hvdWxkIGJlIGRvbmUgaW5zaWRlIG9mIGFwaS1yZXNvbHZlciBvbkVycm9yXG4gICAgICAgIHNlbmRFcnJvcihyZXMsIDUwMCwgJ0ludGVybmFsIFNlcnZlciBFcnJvcicpO1xuICAgIH0gZmluYWxseXtcbiAgICAgICAgLy8gV2UgZG9uJ3QgYWxsb3cgYW55IHdhaXRVbnRpbCB3b3JrIGluIHBhZ2VzIEFQSSByb3V0ZXMgY3VycmVudGx5XG4gICAgICAgIC8vIHNvIGlmIGNhbGxiYWNrIGlzIHByZXNlbnQgcmV0dXJuIHdpdGggcmVzb2x2ZWQgcHJvbWlzZSBzaW5jZSBub1xuICAgICAgICAvLyBwZW5kaW5nIHdvcmtcbiAgICAgICAgY3R4LndhaXRVbnRpbCA9PSBudWxsID8gdm9pZCAwIDogY3R4LndhaXRVbnRpbC5jYWxsKGN0eCwgUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdashboard%2Fsummary&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fdashboard%2Fsummary.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/config/leadScoringConfig.ts":
/*!*****************************************!*\
  !*** ./src/config/leadScoringConfig.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * Lead Scoring Configuration - Northern Colorado Cleaning Business\n * \n * This module defines the scoring weights and modifiers used to prioritize leads\n * for a janitorial/cleaning business headquartered in Sterling, CO.\n * \n * ARCHITECTURE:\n * - Geographic Priority: Sterling (HQ) > Greeley > Fort Collins/Loveland > Denver\n * - Lead Type Modifiers: Hot (1.5x) > Warm (1.0x) > Cold (0.7x)\n * - Service Weights: Favor janitorial, carpet, floor care services\n * - Source Weights: Government RFPs get highest priority\n * \n * HOT vs WARM LEAD CLASSIFICATION:\n * - HOT: Actively seeking cleaning services (RFPs, solicitations) - get 50% boost\n * - WARM: May need services eventually (construction permits) - no modifier\n * - COLD: General prospects - 30% reduction\n * \n * FUTURE EXTENSIONS:\n * - Add seasonal modifiers (winter = higher indoor cleaning needs)\n * - Industry-specific weights (healthcare, schools get priority)\n * - Competition density scoring (fewer competitors = higher score)\n * - Customer lifetime value predictors\n * \n * CUSTOMIZATION:\n * - Adjust geoPriority weights based on service capacity and profitability\n * - Modify leadTypeModifiers.hot to be more/less aggressive on hot leads\n * - Add new serviceWeights for specialized services (move-in/out, post-construction)\n */ const config = {\n    geoPriority: {\n        // TIER 1: Sterling headquarters area (20+ points)\n        sterling: 25,\n        logan: 18,\n        // TIER 2: Primary service area (15-20 points)\n        greeley: 20,\n        evans: 15,\n        weld: 15,\n        // TIER 3: Secondary service area (10-12 points)\n        \"fort collins\": 12,\n        loveland: 12,\n        windsor: 10,\n        // TIER 4: Extended area (6-8 points)\n        longmont: 8,\n        boulder: 8,\n        // TIER 5: Denver metro - high value only (6-8 points)\n        denver: 8,\n        arvada: 6,\n        westminster: 6,\n        thornton: 6\n    },\n    serviceWeights: {\n        // CORE SERVICES (high margin, regular contracts)\n        janitorial: 20,\n        carpet: 15,\n        floorcare: 12,\n        // SPECIALTY SERVICES (growing demand)\n        disinfection: 8,\n        window: 5\n    },\n    sourceWeights: {\n        // HIGHEST VALUE SOURCES (pre-qualified, ready to buy)\n        LSA: 15,\n        RFP: 12,\n        // AUTOMATED SOURCES (consistent quality, scalable)\n        SYSTEM: 10,\n        // MANUAL SOURCES (variable quality, sales team dependent)\n        MANUAL: 5,\n        EMPLOYEE_REFERRAL: 0\n    },\n    leadTypeModifiers: {\n        // CRITICAL: These modifiers determine sales priority and response urgency\n        hot: 1.5,\n        // Examples: Active RFPs, inbound quote requests, existing customers\n        // Action: Respond within 2 hours, auto-SMS to sales team\n        warm: 1.0,\n        // Examples: Construction permits, new business openings, referrals\n        // Action: Educational email sequence, monthly follow-up\n        cold: 0.7\n    },\n    thresholds: {\n        // WORKFLOW AUTOMATION TRIGGERS - these determine lead routing and response\n        hot: 70,\n        // Actions: Immediate SMS alert, auto-assigned to senior rep,\n        // 2-hour response requirement, AI auto-response enabled\n        // Expected: ~15% of leads, 40%+ conversion rate\n        warm: 40\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (config);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/config/leadScoringConfig.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/leadScoring.ts":
/*!********************************!*\
  !*** ./src/lib/leadScoring.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSystemGenerated: () => (/* binding */ isSystemGenerated),\n/* harmony export */   scoreLead: () => (/* binding */ scoreLead)\n/* harmony export */ });\n/* harmony import */ var _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config/leadScoringConfig */ \"(api-node)/./src/config/leadScoringConfig.ts\");\n// src/lib/leadScoring.ts\n// Lead Scoring Engine - Northern Colorado Cleaning Business\n// Lead scoring utilities. Scoring is driven by a configuration file (see\n// src/config/leadScoringConfig.ts). Each lead is assigned a baseline score\n// which is adjusted based on geography, service keywords and the lead’s source\n// type. A list of reasons is returned alongside the numeric score.\n\n/**\n * Compute a lead score based on the lead’s attributes and the current scoring\n * configuration. Scores are clamped between 1 and 99. Reasons describe\n * which factors contributed to the score.\n */ function scoreLead(lead) {\n    let score = 50; // Baseline score - average lead with no special factors\n    const reasons = []; // Track scoring factors for transparency\n    const city = (lead.city || \"\").trim().toLowerCase();\n    const state = (lead.state || \"\").trim().toUpperCase();\n    const zip = (lead.zip || \"\").trim();\n    const svc = (lead.serviceCode || \"\").trim().toLowerCase();\n    const srcType = (lead.sourceType || \"\").trim().toUpperCase();\n    const detail = (lead.sourceDetail || \"\").trim().toLowerCase();\n    // Geographic weighting: state and priority cities/counties\n    if (state === \"CO\") {\n        score += 10;\n        reasons.push(\"Colorado service area\");\n    }\n    if (city && _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].geoPriority[city]) {\n        score += _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].geoPriority[city];\n        reasons.push(`Priority city: ${city}`);\n    }\n    // Recognize Logan/Weld county prefixes (806xx, 807xx) in ZIP\n    if (/^806|^807/.test(zip)) {\n        score += 8;\n        reasons.push(`ZIP in target bands (${zip.slice(0, 3)}xx)`);\n    }\n    // Service weighting: match substring within service code/description\n    for (const key of Object.keys(_config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].serviceWeights)){\n        if (svc.includes(key)) {\n            const pts = _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].serviceWeights[key];\n            score += pts;\n            reasons.push(`Service match: ${key}`);\n            break;\n        }\n    }\n    // Source weighting: use sourceType; fallback to heuristics based on detail\n    if (srcType) {\n        const pts = _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sourceWeights[srcType];\n        if (typeof pts === \"number\") {\n            score += pts;\n            reasons.push(`Source type: ${srcType}`);\n        }\n    }\n    // Additional boost if SAM/RFP keywords appear in detail\n    if (detail.includes(\"sam.gov\") || detail.includes(\"rfp\")) {\n        score += _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sourceWeights.RFP ?? 12;\n        reasons.push(\"Government RFP (SAM.gov)\");\n    }\n    // Service description keyword matching\n    const serviceDesc = (lead.serviceDescription || lead.title || \"\").toLowerCase();\n    for (const key of Object.keys(_config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].serviceWeights)){\n        if (serviceDesc.includes(key)) {\n            const pts = Math.floor(_config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].serviceWeights[key] * 0.5); // Half points for description match\n            score += pts;\n            reasons.push(`Service description match: ${key}`);\n            break;\n        }\n    }\n    // Apply lead type modifier (hot/warm/cold)\n    const leadType = lead.leadType?.toLowerCase();\n    if (leadType && _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].leadTypeModifiers[leadType]) {\n        const modifier = _config_leadScoringConfig__WEBPACK_IMPORTED_MODULE_0__[\"default\"].leadTypeModifiers[leadType];\n        const originalScore = score;\n        score = Math.round(score * modifier);\n        reasons.push(`${leadType.toUpperCase()} lead modifier: ${modifier}x (${originalScore} → ${score})`);\n    }\n    // Clamp between 1 and 99\n    score = Math.max(1, Math.min(99, Math.round(score)));\n    return {\n        score,\n        reasons\n    };\n}\n/**\n * Determine if a lead appears to be system-generated. This helper remains for\n * backwards compatibility. It checks the sourceDetail string for common\n * indicators. New code should prefer the systemGenerated flag on Lead.\n */ function isSystemGenerated(sourceDetail) {\n    const d = (sourceDetail || \"\").toLowerCase();\n    return d.includes(\"sam.gov\") || d.includes(\"rfp\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/leadScoring.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// src/lib/prisma.ts\n\nconst prisma = global.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0\n});\nif (true) global.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9CQUFvQjtBQUMwQjtBQVF2QyxNQUFNQyxTQUNYQyxPQUFPRCxNQUFNLElBQ2IsSUFBSUQsd0RBQVlBLENBQUM7SUFDZkcsS0FBS0MsS0FBc0MsR0FBRztRQUFDO1FBQVM7UUFBUztLQUFPLEdBQUcsQ0FBUztBQUN0RixHQUFHO0FBRUwsSUFBSUEsSUFBcUMsRUFBRUYsT0FBT0QsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvbGliL3ByaXNtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL3ByaXNtYS50c1xuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSBcIkBwcmlzbWEvY2xpZW50XCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gQWxsb3cgZ2xvYmFsIGB2YXJgIHJlZGVjbGFyYXRpb24gaW4gZGV2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID1cbiAgZ2xvYmFsLnByaXNtYSA/P1xuICBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICBsb2c6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgPyBbXCJxdWVyeVwiLCBcImVycm9yXCIsIFwid2FyblwiXSA6IFtcImVycm9yXCJdLFxuICB9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgZ2xvYmFsLnByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJnbG9iYWwiLCJsb2ciLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/rbac.ts":
/*!*************************!*\
  !*** ./src/lib/rbac.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PERMS: () => (/* binding */ PERMS),\n/* harmony export */   assertPermission: () => (/* binding */ assertPermission),\n/* harmony export */   getEmailFromReq: () => (/* binding */ getEmailFromReq),\n/* harmony export */   getOrgIdFromReq: () => (/* binding */ getOrgIdFromReq)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n// src/lib/rbac.ts\n\n/**\n * Enterprise-Grade Permission Catalog\n * Granular read/write permissions for all business modules\n * Keep codes in sync with seed.\n */ const PERMS = {\n    // Dashboard & Analytics\n    DASHBOARD_VIEW: \"dashboard:view\",\n    ANALYTICS_READ: \"analytics:read\",\n    REPORTS_READ: \"reports:read\",\n    REPORTS_CREATE: \"reports:create\",\n    REPORTS_EXPORT: \"reports:export\",\n    // Lead Management\n    LEAD_READ: \"lead:read\",\n    LEAD_CREATE: \"lead:create\",\n    LEAD_UPDATE: \"lead:update\",\n    LEAD_DELETE: \"lead:delete\",\n    LEAD_EXPORT: \"lead:export\",\n    LEAD_ASSIGN: \"lead:assign\",\n    LEAD_CONVERT: \"lead:convert\",\n    // Job Management\n    JOB_READ: \"job:read\",\n    JOB_CREATE: \"job:create\",\n    JOB_UPDATE: \"job:update\",\n    JOB_DELETE: \"job:delete\",\n    JOB_ASSIGN: \"job:assign\",\n    JOB_SCHEDULE: \"job:schedule\",\n    JOB_COMPLETE: \"job:complete\",\n    // Workforce Management\n    EMPLOYEE_READ: \"employee:read\",\n    EMPLOYEE_CREATE: \"employee:create\",\n    EMPLOYEE_UPDATE: \"employee:update\",\n    EMPLOYEE_DELETE: \"employee:delete\",\n    EMPLOYEE_SCHEDULE: \"employee:schedule\",\n    PAYROLL_READ: \"payroll:read\",\n    PAYROLL_MANAGE: \"payroll:manage\",\n    TIMECLOCK_READ: \"timeclock:read\",\n    TIMECLOCK_MANAGE: \"timeclock:manage\",\n    // HR Management\n    HR_READ: \"hr:read\",\n    HR_MANAGE: \"hr:manage\",\n    HR_HIRE: \"hr:hire\",\n    HR_TERMINATE: \"hr:terminate\",\n    TRAINING_READ: \"training:read\",\n    TRAINING_MANAGE: \"training:manage\",\n    TRAINING_ASSIGN: \"training:assign\",\n    // Client & Customer Management\n    CLIENT_READ: \"client:read\",\n    CLIENT_CREATE: \"client:create\",\n    CLIENT_UPDATE: \"client:update\",\n    CLIENT_DELETE: \"client:delete\",\n    CLIENT_COMMUNICATE: \"client:communicate\",\n    // Financial Management\n    BILLING_READ: \"billing:read\",\n    BILLING_MANAGE: \"billing:manage\",\n    INVOICE_READ: \"invoice:read\",\n    INVOICE_CREATE: \"invoice:create\",\n    INVOICE_UPDATE: \"invoice:update\",\n    INVOICE_DELETE: \"invoice:delete\",\n    PAYMENT_READ: \"payment:read\",\n    PAYMENT_PROCESS: \"payment:process\",\n    REVENUE_READ: \"revenue:read\",\n    REVENUE_MANAGE: \"revenue:manage\",\n    // Operations & Scheduling\n    SCHEDULE_READ: \"schedule:read\",\n    SCHEDULE_MANAGE: \"schedule:manage\",\n    OPERATIONS_READ: \"operations:read\",\n    OPERATIONS_MANAGE: \"operations:manage\",\n    INVENTORY_READ: \"inventory:read\",\n    INVENTORY_MANAGE: \"inventory:manage\",\n    // System Administration\n    USER_READ: \"user:read\",\n    USER_CREATE: \"user:create\",\n    USER_UPDATE: \"user:update\",\n    USER_DELETE: \"user:delete\",\n    USER_IMPERSONATE: \"user:impersonate\",\n    PASSWORD_RESET: \"password:reset\",\n    ROLES_READ: \"roles:read\",\n    ROLES_MANAGE: \"roles:manage\",\n    SYSTEM_SETTINGS: \"system:settings\",\n    SYSTEM_BACKUP: \"system:backup\",\n    AUDIT_READ: \"audit:read\",\n    // Provider Portal (White-label)\n    PROVIDER_DASHBOARD: \"provider:dashboard\",\n    PROVIDER_BILLING: \"provider:billing\",\n    PROVIDER_ANALYTICS: \"provider:analytics\",\n    PROVIDER_SETTINGS: \"provider:settings\",\n    PROVIDER_CLIENTS: \"provider:clients\",\n    // Document & Asset Management\n    DOCUMENT_READ: \"document:read\",\n    DOCUMENT_CREATE: \"document:create\",\n    DOCUMENT_UPDATE: \"document:update\",\n    DOCUMENT_DELETE: \"document:delete\",\n    MEDIA_READ: \"media:read\",\n    MEDIA_UPLOAD: \"media:upload\",\n    MEDIA_DELETE: \"media:delete\"\n};\n/**\n * Email that should bypass RBAC permission checks entirely.\n * If DEV_USER_EMAIL is set in the environment, any request from that\n * email address will be treated as having all permissions. This is\n * useful for development and automated testing. In production you\n * should leave DEV_USER_EMAIL unset.\n */ const DEV_USER_EMAIL = process.env.DEV_USER_EMAIL?.toLowerCase() || null;\n/**\n * Extract current user's email from cookie or header.\n * - Cookie: mv_user=<email>\n * - Header: x-mv-user: <email>  (useful for scripts/tests)\n */ function getEmailFromReq(req) {\n    const fromCookie = req.cookies?.mv_user;\n    const fromHeader = req.headers[\"x-mv-user\"] || req.headers[\"x-mvuser\"];\n    const raw = (Array.isArray(fromCookie) ? fromCookie[0] : fromCookie) ?? fromHeader ?? \"\";\n    const email = raw?.toString().trim().toLowerCase();\n    return email || null;\n}\n/** Look up orgId for current user (used to scope queries). */ async function getOrgIdFromReq(req) {\n    const email = getEmailFromReq(req);\n    if (!email) return null;\n    // Development bypass: if this is the dev user, return a fixed orgId\n    // if provided via DEV_ORG_ID, otherwise fall through to DB lookup.\n    if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n        // Use DEV_ORG_ID if provided, else null to indicate no org\n        const devOrg = process.env.DEV_ORG_ID;\n        if (devOrg) return devOrg;\n        // As a fallback, attempt to fetch the first org from the database\n        try {\n            const firstOrg = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.findFirst({\n                select: {\n                    id: true\n                }\n            });\n            return firstOrg?.id ?? null;\n        } catch  {\n            return null;\n        }\n    }\n    const u = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n        where: {\n            email\n        },\n        select: {\n            orgId: true\n        }\n    });\n    return u?.orgId ?? null;\n}\n/**\n * Fetch user's effective permissions from RBAC tables.\n * Falls back to legacy User.role for OWNER/MANAGER/STAFF convenience.\n */ async function getUserPermCodes(userId, legacyRole) {\n    const roleLinks = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacUserRole.findMany({\n        where: {\n            userId\n        },\n        select: {\n            roleId: true\n        }\n    });\n    const roleIds = roleLinks.map((r)=>r.roleId);\n    const perms = roleIds.length ? await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacRolePermission.findMany({\n        where: {\n            roleId: {\n                in: roleIds\n            }\n        },\n        include: {\n            permission: true\n        }\n    }) : [];\n    const codes = new Set(perms.map((rp)=>rp.permission.code));\n    // Legacy role convenience (non-blocking): give sensible defaults based on enterprise role hierarchy\n    switch((legacyRole || \"\").toUpperCase()){\n        case \"OWNER\":\n            // Owners get full system access - all permissions\n            Object.values(PERMS).forEach((c)=>codes.add(c));\n            break;\n        case \"MANAGER\":\n            // Managers get operational control but limited system administration\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.ANALYTICS_READ,\n                PERMS.REPORTS_READ,\n                PERMS.REPORTS_CREATE,\n                PERMS.REPORTS_EXPORT,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT,\n                PERMS.LEAD_ASSIGN,\n                PERMS.LEAD_CONVERT,\n                PERMS.JOB_READ,\n                PERMS.JOB_CREATE,\n                PERMS.JOB_UPDATE,\n                PERMS.JOB_DELETE,\n                PERMS.JOB_ASSIGN,\n                PERMS.JOB_SCHEDULE,\n                PERMS.JOB_COMPLETE,\n                PERMS.EMPLOYEE_READ,\n                PERMS.EMPLOYEE_UPDATE,\n                PERMS.EMPLOYEE_SCHEDULE,\n                PERMS.PAYROLL_READ,\n                PERMS.TIMECLOCK_READ,\n                PERMS.TIMECLOCK_MANAGE,\n                PERMS.TRAINING_READ,\n                PERMS.TRAINING_ASSIGN,\n                PERMS.CLIENT_READ,\n                PERMS.CLIENT_CREATE,\n                PERMS.CLIENT_UPDATE,\n                PERMS.CLIENT_COMMUNICATE,\n                PERMS.BILLING_READ,\n                PERMS.INVOICE_READ,\n                PERMS.INVOICE_CREATE,\n                PERMS.INVOICE_UPDATE,\n                PERMS.PAYMENT_READ,\n                PERMS.REVENUE_READ,\n                PERMS.SCHEDULE_READ,\n                PERMS.SCHEDULE_MANAGE,\n                PERMS.OPERATIONS_READ,\n                PERMS.OPERATIONS_MANAGE,\n                PERMS.INVENTORY_READ,\n                PERMS.INVENTORY_MANAGE,\n                PERMS.DOCUMENT_READ,\n                PERMS.DOCUMENT_CREATE,\n                PERMS.DOCUMENT_UPDATE,\n                PERMS.MEDIA_READ,\n                PERMS.MEDIA_UPLOAD\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"STAFF\":\n            // Staff get basic operational access - mostly read with limited write\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.JOB_READ,\n                PERMS.JOB_UPDATE,\n                PERMS.TIMECLOCK_READ,\n                PERMS.TRAINING_READ,\n                PERMS.CLIENT_READ,\n                PERMS.SCHEDULE_READ,\n                PERMS.OPERATIONS_READ,\n                PERMS.INVENTORY_READ,\n                PERMS.DOCUMENT_READ,\n                PERMS.MEDIA_READ\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"ACCOUNTANT\":\n            // Accountants get financial and HR management access\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.ANALYTICS_READ,\n                PERMS.REPORTS_READ,\n                PERMS.REPORTS_CREATE,\n                PERMS.REPORTS_EXPORT,\n                PERMS.EMPLOYEE_READ,\n                PERMS.PAYROLL_READ,\n                PERMS.PAYROLL_MANAGE,\n                PERMS.TIMECLOCK_READ,\n                PERMS.HR_READ,\n                PERMS.BILLING_READ,\n                PERMS.BILLING_MANAGE,\n                PERMS.INVOICE_READ,\n                PERMS.INVOICE_CREATE,\n                PERMS.INVOICE_UPDATE,\n                PERMS.INVOICE_DELETE,\n                PERMS.PAYMENT_READ,\n                PERMS.PAYMENT_PROCESS,\n                PERMS.REVENUE_READ,\n                PERMS.REVENUE_MANAGE,\n                PERMS.DOCUMENT_READ,\n                PERMS.DOCUMENT_CREATE,\n                PERMS.AUDIT_READ\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"PROVIDER\":\n            // Provider gets provider portal access and client management\n            [\n                PERMS.PROVIDER_DASHBOARD,\n                PERMS.PROVIDER_BILLING,\n                PERMS.PROVIDER_ANALYTICS,\n                PERMS.PROVIDER_SETTINGS,\n                PERMS.PROVIDER_CLIENTS,\n                PERMS.ANALYTICS_READ,\n                PERMS.REPORTS_READ,\n                PERMS.BILLING_READ,\n                PERMS.REVENUE_READ\n            ].forEach((c)=>codes.add(c));\n            break;\n    }\n    return codes;\n}\n/**\n * Assert that current request is from an authenticated user with a given permission.\n * Writes 401/403 to res if not allowed. Returns true if allowed, false otherwise.\n */ async function assertPermission(req, res, required) {\n    try {\n        const email = getEmailFromReq(req);\n        if (!email) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        // Development bypass: if the incoming email matches the DEV_USER_EMAIL\n        // then skip any database lookups and allow the request. This permits\n        // automated tests and development sessions to exercise any API\n        // regardless of the user's persisted role or permissions. If no\n        // DEV_USER_EMAIL is configured, this block has no effect.\n        if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n            return true;\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                email\n            },\n            select: {\n                id: true,\n                role: true\n            }\n        });\n        if (!user) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        const codes = await getUserPermCodes(user.id, user.role);\n        if (!codes.has(required)) {\n            res.status(403).json({\n                ok: false,\n                error: \"Forbidden\"\n            });\n            return false;\n        }\n        return true;\n    } catch (e) {\n        console.error(\"assertPermission error:\", e);\n        res.status(500).json({\n            ok: false,\n            error: \"Internal Server Error\"\n        });\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TTtZQUNmUyxRQUFRO2dCQUFFQyxJQUFJO2dCQUFNdUMsTUFBTTtZQUFLO1FBQ2pDO1FBRUEsSUFBSSxDQUFDckMsTUFBTTtZQUNUK0IsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsSUFBSTtnQkFBT0MsT0FBTztZQUFlO1lBQ3hELE9BQU87UUFDVDtRQUVBLE1BQU1oQixRQUFRLE1BQU1oQixpQkFBaUJKLEtBQUtGLEVBQUUsRUFBRUUsS0FBS3FDLElBQUk7UUFDdkQsSUFBSSxDQUFDakIsTUFBTWtCLEdBQUcsQ0FBQ04sV0FBVztZQUN4QkQsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFBRUMsSUFBSTtnQkFBT0MsT0FBTztZQUFZO1lBQ3JELE9BQU87UUFDVDtRQUNBLE9BQU87SUFDVCxFQUFFLE9BQU9HLEdBQVk7UUFDbkJDLFFBQVFKLEtBQUssQ0FBQywyQkFBMkJHO1FBQ3pDUixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLElBQUk7WUFBT0MsT0FBTztRQUF3QjtRQUNqRSxPQUFPO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvbGliL3JiYWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2xpYi9yYmFjLnRzXG5pbXBvcnQgdHlwZSB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tIFwibmV4dFwiO1xuaW1wb3J0IHsgcHJpc21hIGFzIGRiIH0gZnJvbSBcIkAvbGliL3ByaXNtYVwiO1xuXG4vKipcbiAqIEVudGVycHJpc2UtR3JhZGUgUGVybWlzc2lvbiBDYXRhbG9nXG4gKiBHcmFudWxhciByZWFkL3dyaXRlIHBlcm1pc3Npb25zIGZvciBhbGwgYnVzaW5lc3MgbW9kdWxlc1xuICogS2VlcCBjb2RlcyBpbiBzeW5jIHdpdGggc2VlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IFBFUk1TID0ge1xuICAvLyBEYXNoYm9hcmQgJiBBbmFseXRpY3NcbiAgREFTSEJPQVJEX1ZJRVc6IFwiZGFzaGJvYXJkOnZpZXdcIixcbiAgQU5BTFlUSUNTX1JFQUQ6IFwiYW5hbHl0aWNzOnJlYWRcIixcbiAgUkVQT1JUU19SRUFEOiBcInJlcG9ydHM6cmVhZFwiLFxuICBSRVBPUlRTX0NSRUFURTogXCJyZXBvcnRzOmNyZWF0ZVwiLFxuICBSRVBPUlRTX0VYUE9SVDogXCJyZXBvcnRzOmV4cG9ydFwiLFxuXG4gIC8vIExlYWQgTWFuYWdlbWVudFxuICBMRUFEX1JFQUQ6IFwibGVhZDpyZWFkXCIsXG4gIExFQURfQ1JFQVRFOiBcImxlYWQ6Y3JlYXRlXCIsXG4gIExFQURfVVBEQVRFOiBcImxlYWQ6dXBkYXRlXCIsXG4gIExFQURfREVMRVRFOiBcImxlYWQ6ZGVsZXRlXCIsXG4gIExFQURfRVhQT1JUOiBcImxlYWQ6ZXhwb3J0XCIsXG4gIExFQURfQVNTSUdOOiBcImxlYWQ6YXNzaWduXCIsXG4gIExFQURfQ09OVkVSVDogXCJsZWFkOmNvbnZlcnRcIixcblxuICAvLyBKb2IgTWFuYWdlbWVudFxuICBKT0JfUkVBRDogXCJqb2I6cmVhZFwiLFxuICBKT0JfQ1JFQVRFOiBcImpvYjpjcmVhdGVcIixcbiAgSk9CX1VQREFURTogXCJqb2I6dXBkYXRlXCIsXG4gIEpPQl9ERUxFVEU6IFwiam9iOmRlbGV0ZVwiLFxuICBKT0JfQVNTSUdOOiBcImpvYjphc3NpZ25cIixcbiAgSk9CX1NDSEVEVUxFOiBcImpvYjpzY2hlZHVsZVwiLFxuICBKT0JfQ09NUExFVEU6IFwiam9iOmNvbXBsZXRlXCIsXG5cbiAgLy8gV29ya2ZvcmNlIE1hbmFnZW1lbnRcbiAgRU1QTE9ZRUVfUkVBRDogXCJlbXBsb3llZTpyZWFkXCIsXG4gIEVNUExPWUVFX0NSRUFURTogXCJlbXBsb3llZTpjcmVhdGVcIixcbiAgRU1QTE9ZRUVfVVBEQVRFOiBcImVtcGxveWVlOnVwZGF0ZVwiLFxuICBFTVBMT1lFRV9ERUxFVEU6IFwiZW1wbG95ZWU6ZGVsZXRlXCIsXG4gIEVNUExPWUVFX1NDSEVEVUxFOiBcImVtcGxveWVlOnNjaGVkdWxlXCIsXG4gIFBBWVJPTExfUkVBRDogXCJwYXlyb2xsOnJlYWRcIixcbiAgUEFZUk9MTF9NQU5BR0U6IFwicGF5cm9sbDptYW5hZ2VcIixcbiAgVElNRUNMT0NLX1JFQUQ6IFwidGltZWNsb2NrOnJlYWRcIixcbiAgVElNRUNMT0NLX01BTkFHRTogXCJ0aW1lY2xvY2s6bWFuYWdlXCIsXG5cbiAgLy8gSFIgTWFuYWdlbWVudFxuICBIUl9SRUFEOiBcImhyOnJlYWRcIixcbiAgSFJfTUFOQUdFOiBcImhyOm1hbmFnZVwiLFxuICBIUl9ISVJFOiBcImhyOmhpcmVcIixcbiAgSFJfVEVSTUlOQVRFOiBcImhyOnRlcm1pbmF0ZVwiLFxuICBUUkFJTklOR19SRUFEOiBcInRyYWluaW5nOnJlYWRcIixcbiAgVFJBSU5JTkdfTUFOQUdFOiBcInRyYWluaW5nOm1hbmFnZVwiLFxuICBUUkFJTklOR19BU1NJR046IFwidHJhaW5pbmc6YXNzaWduXCIsXG5cbiAgLy8gQ2xpZW50ICYgQ3VzdG9tZXIgTWFuYWdlbWVudFxuICBDTElFTlRfUkVBRDogXCJjbGllbnQ6cmVhZFwiLFxuICBDTElFTlRfQ1JFQVRFOiBcImNsaWVudDpjcmVhdGVcIixcbiAgQ0xJRU5UX1VQREFURTogXCJjbGllbnQ6dXBkYXRlXCIsXG4gIENMSUVOVF9ERUxFVEU6IFwiY2xpZW50OmRlbGV0ZVwiLFxuICBDTElFTlRfQ09NTVVOSUNBVEU6IFwiY2xpZW50OmNvbW11bmljYXRlXCIsXG5cbiAgLy8gRmluYW5jaWFsIE1hbmFnZW1lbnRcbiAgQklMTElOR19SRUFEOiBcImJpbGxpbmc6cmVhZFwiLFxuICBCSUxMSU5HX01BTkFHRTogXCJiaWxsaW5nOm1hbmFnZVwiLFxuICBJTlZPSUNFX1JFQUQ6IFwiaW52b2ljZTpyZWFkXCIsXG4gIElOVk9JQ0VfQ1JFQVRFOiBcImludm9pY2U6Y3JlYXRlXCIsXG4gIElOVk9JQ0VfVVBEQVRFOiBcImludm9pY2U6dXBkYXRlXCIsXG4gIElOVk9JQ0VfREVMRVRFOiBcImludm9pY2U6ZGVsZXRlXCIsXG4gIFBBWU1FTlRfUkVBRDogXCJwYXltZW50OnJlYWRcIixcbiAgUEFZTUVOVF9QUk9DRVNTOiBcInBheW1lbnQ6cHJvY2Vzc1wiLFxuICBSRVZFTlVFX1JFQUQ6IFwicmV2ZW51ZTpyZWFkXCIsXG4gIFJFVkVOVUVfTUFOQUdFOiBcInJldmVudWU6bWFuYWdlXCIsXG5cbiAgLy8gT3BlcmF0aW9ucyAmIFNjaGVkdWxpbmdcbiAgU0NIRURVTEVfUkVBRDogXCJzY2hlZHVsZTpyZWFkXCIsXG4gIFNDSEVEVUxFX01BTkFHRTogXCJzY2hlZHVsZTptYW5hZ2VcIixcbiAgT1BFUkFUSU9OU19SRUFEOiBcIm9wZXJhdGlvbnM6cmVhZFwiLFxuICBPUEVSQVRJT05TX01BTkFHRTogXCJvcGVyYXRpb25zOm1hbmFnZVwiLFxuICBJTlZFTlRPUllfUkVBRDogXCJpbnZlbnRvcnk6cmVhZFwiLFxuICBJTlZFTlRPUllfTUFOQUdFOiBcImludmVudG9yeTptYW5hZ2VcIixcblxuICAvLyBTeXN0ZW0gQWRtaW5pc3RyYXRpb25cbiAgVVNFUl9SRUFEOiBcInVzZXI6cmVhZFwiLFxuICBVU0VSX0NSRUFURTogXCJ1c2VyOmNyZWF0ZVwiLFxuICBVU0VSX1VQREFURTogXCJ1c2VyOnVwZGF0ZVwiLFxuICBVU0VSX0RFTEVURTogXCJ1c2VyOmRlbGV0ZVwiLFxuICBVU0VSX0lNUEVSU09OQVRFOiBcInVzZXI6aW1wZXJzb25hdGVcIixcbiAgUEFTU1dPUkRfUkVTRVQ6IFwicGFzc3dvcmQ6cmVzZXRcIixcbiAgUk9MRVNfUkVBRDogXCJyb2xlczpyZWFkXCIsXG4gIFJPTEVTX01BTkFHRTogXCJyb2xlczptYW5hZ2VcIixcbiAgU1lTVEVNX1NFVFRJTkdTOiBcInN5c3RlbTpzZXR0aW5nc1wiLFxuICBTWVNURU1fQkFDS1VQOiBcInN5c3RlbTpiYWNrdXBcIixcbiAgQVVESVRfUkVBRDogXCJhdWRpdDpyZWFkXCIsXG5cbiAgLy8gUHJvdmlkZXIgUG9ydGFsIChXaGl0ZS1sYWJlbClcbiAgUFJPVklERVJfREFTSEJPQVJEOiBcInByb3ZpZGVyOmRhc2hib2FyZFwiLFxuICBQUk9WSURFUl9CSUxMSU5HOiBcInByb3ZpZGVyOmJpbGxpbmdcIixcbiAgUFJPVklERVJfQU5BTFlUSUNTOiBcInByb3ZpZGVyOmFuYWx5dGljc1wiLFxuICBQUk9WSURFUl9TRVRUSU5HUzogXCJwcm92aWRlcjpzZXR0aW5nc1wiLFxuICBQUk9WSURFUl9DTElFTlRTOiBcInByb3ZpZGVyOmNsaWVudHNcIixcblxuICAvLyBEb2N1bWVudCAmIEFzc2V0IE1hbmFnZW1lbnRcbiAgRE9DVU1FTlRfUkVBRDogXCJkb2N1bWVudDpyZWFkXCIsXG4gIERPQ1VNRU5UX0NSRUFURTogXCJkb2N1bWVudDpjcmVhdGVcIixcbiAgRE9DVU1FTlRfVVBEQVRFOiBcImRvY3VtZW50OnVwZGF0ZVwiLFxuICBET0NVTUVOVF9ERUxFVEU6IFwiZG9jdW1lbnQ6ZGVsZXRlXCIsXG4gIE1FRElBX1JFQUQ6IFwibWVkaWE6cmVhZFwiLFxuICBNRURJQV9VUExPQUQ6IFwibWVkaWE6dXBsb2FkXCIsXG4gIE1FRElBX0RFTEVURTogXCJtZWRpYTpkZWxldGVcIixcbn0gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBQZXJtQ29kZSA9ICh0eXBlb2YgUEVSTVMpW2tleW9mIHR5cGVvZiBQRVJNU107XG5cbi8qKlxuICogRW1haWwgdGhhdCBzaG91bGQgYnlwYXNzIFJCQUMgcGVybWlzc2lvbiBjaGVja3MgZW50aXJlbHkuXG4gKiBJZiBERVZfVVNFUl9FTUFJTCBpcyBzZXQgaW4gdGhlIGVudmlyb25tZW50LCBhbnkgcmVxdWVzdCBmcm9tIHRoYXRcbiAqIGVtYWlsIGFkZHJlc3Mgd2lsbCBiZSB0cmVhdGVkIGFzIGhhdmluZyBhbGwgcGVybWlzc2lvbnMuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3IgZGV2ZWxvcG1lbnQgYW5kIGF1dG9tYXRlZCB0ZXN0aW5nLiBJbiBwcm9kdWN0aW9uIHlvdVxuICogc2hvdWxkIGxlYXZlIERFVl9VU0VSX0VNQUlMIHVuc2V0LlxuICovXG5jb25zdCBERVZfVVNFUl9FTUFJTCA9IHByb2Nlc3MuZW52LkRFVl9VU0VSX0VNQUlMPy50b0xvd2VyQ2FzZSgpIHx8IG51bGw7XG5cbi8qKlxuICogRXh0cmFjdCBjdXJyZW50IHVzZXIncyBlbWFpbCBmcm9tIGNvb2tpZSBvciBoZWFkZXIuXG4gKiAtIENvb2tpZTogbXZfdXNlcj08ZW1haWw+XG4gKiAtIEhlYWRlcjogeC1tdi11c2VyOiA8ZW1haWw+ICAodXNlZnVsIGZvciBzY3JpcHRzL3Rlc3RzKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW1haWxGcm9tUmVxKHJlcTogTmV4dEFwaVJlcXVlc3QpOiBzdHJpbmcgfCBudWxsIHtcbiAgY29uc3QgZnJvbUNvb2tpZSA9IHJlcS5jb29raWVzPy5tdl91c2VyO1xuICBjb25zdCBmcm9tSGVhZGVyID0gKHJlcS5oZWFkZXJzW1wieC1tdi11c2VyXCJdIHx8IHJlcS5oZWFkZXJzW1wieC1tdnVzZXJcIl0pIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgY29uc3QgcmF3ID0gKEFycmF5LmlzQXJyYXkoZnJvbUNvb2tpZSkgPyBmcm9tQ29va2llWzBdIDogZnJvbUNvb2tpZSkgPz8gZnJvbUhlYWRlciA/PyBcIlwiO1xuICBjb25zdCBlbWFpbCA9IHJhdz8udG9TdHJpbmcoKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIGVtYWlsIHx8IG51bGw7XG59XG5cbi8qKiBMb29rIHVwIG9yZ0lkIGZvciBjdXJyZW50IHVzZXIgKHVzZWQgdG8gc2NvcGUgcXVlcmllcykuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0T3JnSWRGcm9tUmVxKHJlcTogTmV4dEFwaVJlcXVlc3QpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgY29uc3QgZW1haWwgPSBnZXRFbWFpbEZyb21SZXEocmVxKTtcbiAgaWYgKCFlbWFpbCkgcmV0dXJuIG51bGw7XG5cbiAgLy8gRGV2ZWxvcG1lbnQgYnlwYXNzOiBpZiB0aGlzIGlzIHRoZSBkZXYgdXNlciwgcmV0dXJuIGEgZml4ZWQgb3JnSWRcbiAgLy8gaWYgcHJvdmlkZWQgdmlhIERFVl9PUkdfSUQsIG90aGVyd2lzZSBmYWxsIHRocm91Z2ggdG8gREIgbG9va3VwLlxuICBpZiAoREVWX1VTRVJfRU1BSUwgJiYgZW1haWwgPT09IERFVl9VU0VSX0VNQUlMKSB7XG4gICAgLy8gVXNlIERFVl9PUkdfSUQgaWYgcHJvdmlkZWQsIGVsc2UgbnVsbCB0byBpbmRpY2F0ZSBubyBvcmdcbiAgICBjb25zdCBkZXZPcmcgPSBwcm9jZXNzLmVudi5ERVZfT1JHX0lEO1xuICAgIGlmIChkZXZPcmcpIHJldHVybiBkZXZPcmc7XG4gICAgLy8gQXMgYSBmYWxsYmFjaywgYXR0ZW1wdCB0byBmZXRjaCB0aGUgZmlyc3Qgb3JnIGZyb20gdGhlIGRhdGFiYXNlXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGZpcnN0T3JnID0gYXdhaXQgZGIub3JnLmZpbmRGaXJzdCh7IHNlbGVjdDogeyBpZDogdHJ1ZSB9IH0pO1xuICAgICAgcmV0dXJuIGZpcnN0T3JnPy5pZCA/PyBudWxsO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGNvbnN0IHUgPSBhd2FpdCBkYi51c2VyLmZpbmRVbmlxdWUoeyB3aGVyZTogeyBlbWFpbCB9LCBzZWxlY3Q6IHsgb3JnSWQ6IHRydWUgfSB9KTtcbiAgcmV0dXJuIHU/Lm9yZ0lkID8/IG51bGw7XG59XG5cbi8qKlxuICogRmV0Y2ggdXNlcidzIGVmZmVjdGl2ZSBwZXJtaXNzaW9ucyBmcm9tIFJCQUMgdGFibGVzLlxuICogRmFsbHMgYmFjayB0byBsZWdhY3kgVXNlci5yb2xlIGZvciBPV05FUi9NQU5BR0VSL1NUQUZGIGNvbnZlbmllbmNlLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRVc2VyUGVybUNvZGVzKHVzZXJJZDogc3RyaW5nLCBsZWdhY3lSb2xlPzogc3RyaW5nIHwgbnVsbCk6IFByb21pc2U8U2V0PHN0cmluZz4+IHtcbiAgY29uc3Qgcm9sZUxpbmtzID0gYXdhaXQgZGIucmJhY1VzZXJSb2xlLmZpbmRNYW55KHtcbiAgICB3aGVyZTogeyB1c2VySWQgfSxcbiAgICBzZWxlY3Q6IHsgcm9sZUlkOiB0cnVlIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHJvbGVJZHMgPSByb2xlTGlua3MubWFwKChyKSA9PiByLnJvbGVJZCk7XG4gIGNvbnN0IHBlcm1zID0gcm9sZUlkcy5sZW5ndGhcbiAgICA/IGF3YWl0IGRiLnJiYWNSb2xlUGVybWlzc2lvbi5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7IHJvbGVJZDogeyBpbjogcm9sZUlkcyB9IH0sXG4gICAgICAgIGluY2x1ZGU6IHsgcGVybWlzc2lvbjogdHJ1ZSB9LFxuICAgICAgfSlcbiAgICA6IFtdO1xuXG4gIGNvbnN0IGNvZGVzID0gbmV3IFNldDxzdHJpbmc+KHBlcm1zLm1hcCgocnApID0+IHJwLnBlcm1pc3Npb24uY29kZSkpO1xuXG4gIC8vIExlZ2FjeSByb2xlIGNvbnZlbmllbmNlIChub24tYmxvY2tpbmcpOiBnaXZlIHNlbnNpYmxlIGRlZmF1bHRzIGJhc2VkIG9uIGVudGVycHJpc2Ugcm9sZSBoaWVyYXJjaHlcbiAgc3dpdGNoICgobGVnYWN5Um9sZSB8fCBcIlwiKS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgY2FzZSBcIk9XTkVSXCI6XG4gICAgICAvLyBPd25lcnMgZ2V0IGZ1bGwgc3lzdGVtIGFjY2VzcyAtIGFsbCBwZXJtaXNzaW9uc1xuICAgICAgT2JqZWN0LnZhbHVlcyhQRVJNUykuZm9yRWFjaChjID0+IGNvZGVzLmFkZChjKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiTUFOQUdFUlwiOlxuICAgICAgLy8gTWFuYWdlcnMgZ2V0IG9wZXJhdGlvbmFsIGNvbnRyb2wgYnV0IGxpbWl0ZWQgc3lzdGVtIGFkbWluaXN0cmF0aW9uXG4gICAgICBbXG4gICAgICAgIFBFUk1TLkRBU0hCT0FSRF9WSUVXLCBQRVJNUy5BTkFMWVRJQ1NfUkVBRCwgUEVSTVMuUkVQT1JUU19SRUFELCBQRVJNUy5SRVBPUlRTX0NSRUFURSwgUEVSTVMuUkVQT1JUU19FWFBPUlQsXG4gICAgICAgIFBFUk1TLkxFQURfUkVBRCwgUEVSTVMuTEVBRF9DUkVBVEUsIFBFUk1TLkxFQURfVVBEQVRFLCBQRVJNUy5MRUFEX0RFTEVURSwgUEVSTVMuTEVBRF9FWFBPUlQsIFBFUk1TLkxFQURfQVNTSUdOLCBQRVJNUy5MRUFEX0NPTlZFUlQsXG4gICAgICAgIFBFUk1TLkpPQl9SRUFELCBQRVJNUy5KT0JfQ1JFQVRFLCBQRVJNUy5KT0JfVVBEQVRFLCBQRVJNUy5KT0JfREVMRVRFLCBQRVJNUy5KT0JfQVNTSUdOLCBQRVJNUy5KT0JfU0NIRURVTEUsIFBFUk1TLkpPQl9DT01QTEVURSxcbiAgICAgICAgUEVSTVMuRU1QTE9ZRUVfUkVBRCwgUEVSTVMuRU1QTE9ZRUVfVVBEQVRFLCBQRVJNUy5FTVBMT1lFRV9TQ0hFRFVMRSwgUEVSTVMuUEFZUk9MTF9SRUFELCBQRVJNUy5USU1FQ0xPQ0tfUkVBRCwgUEVSTVMuVElNRUNMT0NLX01BTkFHRSxcbiAgICAgICAgUEVSTVMuVFJBSU5JTkdfUkVBRCwgUEVSTVMuVFJBSU5JTkdfQVNTSUdOLCBQRVJNUy5DTElFTlRfUkVBRCwgUEVSTVMuQ0xJRU5UX0NSRUFURSwgUEVSTVMuQ0xJRU5UX1VQREFURSwgUEVSTVMuQ0xJRU5UX0NPTU1VTklDQVRFLFxuICAgICAgICBQRVJNUy5CSUxMSU5HX1JFQUQsIFBFUk1TLklOVk9JQ0VfUkVBRCwgUEVSTVMuSU5WT0lDRV9DUkVBVEUsIFBFUk1TLklOVk9JQ0VfVVBEQVRFLCBQRVJNUy5QQVlNRU5UX1JFQUQsIFBFUk1TLlJFVkVOVUVfUkVBRCxcbiAgICAgICAgUEVSTVMuU0NIRURVTEVfUkVBRCwgUEVSTVMuU0NIRURVTEVfTUFOQUdFLCBQRVJNUy5PUEVSQVRJT05TX1JFQUQsIFBFUk1TLk9QRVJBVElPTlNfTUFOQUdFLCBQRVJNUy5JTlZFTlRPUllfUkVBRCwgUEVSTVMuSU5WRU5UT1JZX01BTkFHRSxcbiAgICAgICAgUEVSTVMuRE9DVU1FTlRfUkVBRCwgUEVSTVMuRE9DVU1FTlRfQ1JFQVRFLCBQRVJNUy5ET0NVTUVOVF9VUERBVEUsIFBFUk1TLk1FRElBX1JFQUQsIFBFUk1TLk1FRElBX1VQTE9BRFxuICAgICAgXS5mb3JFYWNoKGMgPT4gY29kZXMuYWRkKGMpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJTVEFGRlwiOlxuICAgICAgLy8gU3RhZmYgZ2V0IGJhc2ljIG9wZXJhdGlvbmFsIGFjY2VzcyAtIG1vc3RseSByZWFkIHdpdGggbGltaXRlZCB3cml0ZVxuICAgICAgW1xuICAgICAgICBQRVJNUy5EQVNIQk9BUkRfVklFVywgUEVSTVMuTEVBRF9SRUFELCBQRVJNUy5MRUFEX0NSRUFURSwgUEVSTVMuTEVBRF9VUERBVEUsXG4gICAgICAgIFBFUk1TLkpPQl9SRUFELCBQRVJNUy5KT0JfVVBEQVRFLCBQRVJNUy5USU1FQ0xPQ0tfUkVBRCwgUEVSTVMuVFJBSU5JTkdfUkVBRCxcbiAgICAgICAgUEVSTVMuQ0xJRU5UX1JFQUQsIFBFUk1TLlNDSEVEVUxFX1JFQUQsIFBFUk1TLk9QRVJBVElPTlNfUkVBRCwgUEVSTVMuSU5WRU5UT1JZX1JFQUQsXG4gICAgICAgIFBFUk1TLkRPQ1VNRU5UX1JFQUQsIFBFUk1TLk1FRElBX1JFQURcbiAgICAgIF0uZm9yRWFjaChjID0+IGNvZGVzLmFkZChjKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiQUNDT1VOVEFOVFwiOlxuICAgICAgLy8gQWNjb3VudGFudHMgZ2V0IGZpbmFuY2lhbCBhbmQgSFIgbWFuYWdlbWVudCBhY2Nlc3NcbiAgICAgIFtcbiAgICAgICAgUEVSTVMuREFTSEJPQVJEX1ZJRVcsIFBFUk1TLkFOQUxZVElDU19SRUFELCBQRVJNUy5SRVBPUlRTX1JFQUQsIFBFUk1TLlJFUE9SVFNfQ1JFQVRFLCBQRVJNUy5SRVBPUlRTX0VYUE9SVCxcbiAgICAgICAgUEVSTVMuRU1QTE9ZRUVfUkVBRCwgUEVSTVMuUEFZUk9MTF9SRUFELCBQRVJNUy5QQVlST0xMX01BTkFHRSwgUEVSTVMuVElNRUNMT0NLX1JFQUQsIFBFUk1TLkhSX1JFQUQsXG4gICAgICAgIFBFUk1TLkJJTExJTkdfUkVBRCwgUEVSTVMuQklMTElOR19NQU5BR0UsIFBFUk1TLklOVk9JQ0VfUkVBRCwgUEVSTVMuSU5WT0lDRV9DUkVBVEUsIFBFUk1TLklOVk9JQ0VfVVBEQVRFLCBQRVJNUy5JTlZPSUNFX0RFTEVURSxcbiAgICAgICAgUEVSTVMuUEFZTUVOVF9SRUFELCBQRVJNUy5QQVlNRU5UX1BST0NFU1MsIFBFUk1TLlJFVkVOVUVfUkVBRCwgUEVSTVMuUkVWRU5VRV9NQU5BR0UsXG4gICAgICAgIFBFUk1TLkRPQ1VNRU5UX1JFQUQsIFBFUk1TLkRPQ1VNRU5UX0NSRUFURSwgUEVSTVMuQVVESVRfUkVBRFxuICAgICAgXS5mb3JFYWNoKGMgPT4gY29kZXMuYWRkKGMpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUk9WSURFUlwiOlxuICAgICAgLy8gUHJvdmlkZXIgZ2V0cyBwcm92aWRlciBwb3J0YWwgYWNjZXNzIGFuZCBjbGllbnQgbWFuYWdlbWVudFxuICAgICAgW1xuICAgICAgICBQRVJNUy5QUk9WSURFUl9EQVNIQk9BUkQsIFBFUk1TLlBST1ZJREVSX0JJTExJTkcsIFBFUk1TLlBST1ZJREVSX0FOQUxZVElDUywgUEVSTVMuUFJPVklERVJfU0VUVElOR1MsIFBFUk1TLlBST1ZJREVSX0NMSUVOVFMsXG4gICAgICAgIFBFUk1TLkFOQUxZVElDU19SRUFELCBQRVJNUy5SRVBPUlRTX1JFQUQsIFBFUk1TLkJJTExJTkdfUkVBRCwgUEVSTVMuUkVWRU5VRV9SRUFEXG4gICAgICBdLmZvckVhY2goYyA9PiBjb2Rlcy5hZGQoYykpO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gY29kZXM7XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgY3VycmVudCByZXF1ZXN0IGlzIGZyb20gYW4gYXV0aGVudGljYXRlZCB1c2VyIHdpdGggYSBnaXZlbiBwZXJtaXNzaW9uLlxuICogV3JpdGVzIDQwMS80MDMgdG8gcmVzIGlmIG5vdCBhbGxvd2VkLiBSZXR1cm5zIHRydWUgaWYgYWxsb3dlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXNzZXJ0UGVybWlzc2lvbihcbiAgcmVxOiBOZXh0QXBpUmVxdWVzdCxcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2UsXG4gIHJlcXVpcmVkOiBQZXJtQ29kZVxuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZW1haWwgPSBnZXRFbWFpbEZyb21SZXEocmVxKTtcbiAgICBpZiAoIWVtYWlsKSB7XG4gICAgICByZXMuc3RhdHVzKDQwMSkuanNvbih7IG9rOiBmYWxzZSwgZXJyb3I6IFwiVW5hdXRob3JpemVkXCIgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gRGV2ZWxvcG1lbnQgYnlwYXNzOiBpZiB0aGUgaW5jb21pbmcgZW1haWwgbWF0Y2hlcyB0aGUgREVWX1VTRVJfRU1BSUxcbiAgICAvLyB0aGVuIHNraXAgYW55IGRhdGFiYXNlIGxvb2t1cHMgYW5kIGFsbG93IHRoZSByZXF1ZXN0LiBUaGlzIHBlcm1pdHNcbiAgICAvLyBhdXRvbWF0ZWQgdGVzdHMgYW5kIGRldmVsb3BtZW50IHNlc3Npb25zIHRvIGV4ZXJjaXNlIGFueSBBUElcbiAgICAvLyByZWdhcmRsZXNzIG9mIHRoZSB1c2VyJ3MgcGVyc2lzdGVkIHJvbGUgb3IgcGVybWlzc2lvbnMuIElmIG5vXG4gICAgLy8gREVWX1VTRVJfRU1BSUwgaXMgY29uZmlndXJlZCwgdGhpcyBibG9jayBoYXMgbm8gZWZmZWN0LlxuICAgIGlmIChERVZfVVNFUl9FTUFJTCAmJiBlbWFpbCA9PT0gREVWX1VTRVJfRU1BSUwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBkYi51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgZW1haWwgfSxcbiAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgcm9sZTogdHJ1ZSB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICByZXMuc3RhdHVzKDQwMSkuanNvbih7IG9rOiBmYWxzZSwgZXJyb3I6IFwiVW5hdXRob3JpemVkXCIgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgY29kZXMgPSBhd2FpdCBnZXRVc2VyUGVybUNvZGVzKHVzZXIuaWQsIHVzZXIucm9sZSk7XG4gICAgaWYgKCFjb2Rlcy5oYXMocmVxdWlyZWQpKSB7XG4gICAgICByZXMuc3RhdHVzKDQwMykuanNvbih7IG9rOiBmYWxzZSwgZXJyb3I6IFwiRm9yYmlkZGVuXCIgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlOiB1bmtub3duKSB7XG4gICAgY29uc29sZS5lcnJvcihcImFzc2VydFBlcm1pc3Npb24gZXJyb3I6XCIsIGUpO1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgb2s6IGZhbHNlLCBlcnJvcjogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIiB9KTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJwcmlzbWEiLCJkYiIsIlBFUk1TIiwiREFTSEJPQVJEX1ZJRVciLCJBTkFMWVRJQ1NfUkVBRCIsIlJFUE9SVFNfUkVBRCIsIlJFUE9SVFNfQ1JFQVRFIiwiUkVQT1JUU19FWFBPUlQiLCJMRUFEX1JFQUQiLCJMRUFEX0NSRUFURSIsIkxFQURfVVBEQVRFIiwiTEVBRF9ERUxFVEUiLCJMRUFEX0VYUE9SVCIsIkxFQURfQVNTSUdOIiwiTEVBRF9DT05WRVJUIiwiSk9CX1JFQUQiLCJKT0JfQ1JFQVRFIiwiSk9CX1VQREFURSIsIkpPQl9ERUxFVEUiLCJKT0JfQVNTSUdOIiwiSk9CX1NDSEVEVUxFIiwiSk9CX0NPTVBMRVRFIiwiRU1QTE9ZRUVfUkVBRCIsIkVNUExPWUVFX0NSRUFURSIsIkVNUExPWUVFX1VQREFURSIsIkVNUExPWUVFX0RFTEVURSIsIkVNUExPWUVFX1NDSEVEVUxFIiwiUEFZUk9MTF9SRUFEIiwiUEFZUk9MTF9NQU5BR0UiLCJUSU1FQ0xPQ0tfUkVBRCIsIlRJTUVDTE9DS19NQU5BR0UiLCJIUl9SRUFEIiwiSFJfTUFOQUdFIiwiSFJfSElSRSIsIkhSX1RFUk1JTkFURSIsIlRSQUlOSU5HX1JFQUQiLCJUUkFJTklOR19NQU5BR0UiLCJUUkFJTklOR19BU1NJR04iLCJDTElFTlRfUkVBRCIsIkNMSUVOVF9DUkVBVEUiLCJDTElFTlRfVVBEQVRFIiwiQ0xJRU5UX0RFTEVURSIsIkNMSUVOVF9DT01NVU5JQ0FURSIsIkJJTExJTkdfUkVBRCIsIkJJTExJTkdfTUFOQUdFIiwiSU5WT0lDRV9SRUFEIiwiSU5WT0lDRV9DUkVBVEUiLCJJTlZPSUNFX1VQREFURSIsIklOVk9JQ0VfREVMRVRFIiwiUEFZTUVOVF9SRUFEIiwiUEFZTUVOVF9QUk9DRVNTIiwiUkVWRU5VRV9SRUFEIiwiUkVWRU5VRV9NQU5BR0UiLCJTQ0hFRFVMRV9SRUFEIiwiU0NIRURVTEVfTUFOQUdFIiwiT1BFUkFUSU9OU19SRUFEIiwiT1BFUkFUSU9OU19NQU5BR0UiLCJJTlZFTlRPUllfUkVBRCIsIklOVkVOVE9SWV9NQU5BR0UiLCJVU0VSX1JFQUQiLCJVU0VSX0NSRUFURSIsIlVTRVJfVVBEQVRFIiwiVVNFUl9ERUxFVEUiLCJVU0VSX0lNUEVSU09OQVRFIiwiUEFTU1dPUkRfUkVTRVQiLCJST0xFU19SRUFEIiwiUk9MRVNfTUFOQUdFIiwiU1lTVEVNX1NFVFRJTkdTIiwiU1lTVEVNX0JBQ0tVUCIsIkFVRElUX1JFQUQiLCJQUk9WSURFUl9EQVNIQk9BUkQiLCJQUk9WSURFUl9CSUxMSU5HIiwiUFJPVklERVJfQU5BTFlUSUNTIiwiUFJPVklERVJfU0VUVElOR1MiLCJQUk9WSURFUl9DTElFTlRTIiwiRE9DVU1FTlRfUkVBRCIsIkRPQ1VNRU5UX0NSRUFURSIsIkRPQ1VNRU5UX1VQREFURSIsIkRPQ1VNRU5UX0RFTEVURSIsIk1FRElBX1JFQUQiLCJNRURJQV9VUExPQUQiLCJNRURJQV9ERUxFVEUiLCJERVZfVVNFUl9FTUFJTCIsInByb2Nlc3MiLCJlbnYiLCJ0b0xvd2VyQ2FzZSIsImdldEVtYWlsRnJvbVJlcSIsInJlcSIsImZyb21Db29raWUiLCJjb29raWVzIiwibXZfdXNlciIsImZyb21IZWFkZXIiLCJoZWFkZXJzIiwicmF3IiwiQXJyYXkiLCJpc0FycmF5IiwiZW1haWwiLCJ0b1N0cmluZyIsInRyaW0iLCJnZXRPcmdJZEZyb21SZXEiLCJkZXZPcmciLCJERVZfT1JHX0lEIiwiZmlyc3RPcmciLCJvcmciLCJmaW5kRmlyc3QiLCJzZWxlY3QiLCJpZCIsInUiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwib3JnSWQiLCJnZXRVc2VyUGVybUNvZGVzIiwidXNlcklkIiwibGVnYWN5Um9sZSIsInJvbGVMaW5rcyIsInJiYWNVc2VyUm9sZSIsImZpbmRNYW55Iiwicm9sZUlkIiwicm9sZUlkcyIsIm1hcCIsInIiLCJwZXJtcyIsImxlbmd0aCIsInJiYWNSb2xlUGVybWlzc2lvbiIsImluIiwiaW5jbHVkZSIsInBlcm1pc3Npb24iLCJjb2RlcyIsIlNldCIsInJwIiwiY29kZSIsInRvVXBwZXJDYXNlIiwiT2JqZWN0IiwidmFsdWVzIiwiZm9yRWFjaCIsImMiLCJhZGQiLCJhc3NlcnRQZXJtaXNzaW9uIiwicmVzIiwicmVxdWlyZWQiLCJzdGF0dXMiLCJqc29uIiwib2siLCJlcnJvciIsInJvbGUiLCJoYXMiLCJlIiwiY29uc29sZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/rbac.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/reportingWindow.ts":
/*!************************************!*\
  !*** ./src/lib/reportingWindow.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TZ: () => (/* binding */ DEFAULT_TZ),\n/* harmony export */   arrayFirst: () => (/* binding */ arrayFirst),\n/* harmony export */   computeWindow: () => (/* binding */ computeWindow),\n/* harmony export */   currentMonthRange: () => (/* binding */ currentMonthRange),\n/* harmony export */   currentMonthRangeISO: () => (/* binding */ currentMonthRangeISO),\n/* harmony export */   endOfDayUTC: () => (/* binding */ endOfDayUTC),\n/* harmony export */   parseDateOnly: () => (/* binding */ parseDateOnly),\n/* harmony export */   parseLimit: () => (/* binding */ parseLimit),\n/* harmony export */   readStringFilter: () => (/* binding */ readStringFilter)\n/* harmony export */ });\n// src/lib/reportingWindow.ts\n/** Default business timezone for “This Month” calculations. */ const DEFAULT_TZ = process.env.DEFAULT_TZ || \"America/Denver\";\n/* ----------------------------------------------------------------------------\n * Basic date helpers (existing behavior preserved)\n * ------------------------------------------------------------------------- */ function parseDateOnly(s) {\n    if (!s) return null;\n    const m = /^(\\d{4})-(\\d{2})-(\\d{2})$/.exec(s);\n    if (!m) return null;\n    const d = new Date(Date.UTC(+m[1], +m[2] - 1, +m[3]));\n    return isNaN(d.getTime()) ? null : d;\n}\n/** Inclusive day window: `from` at 00:00 UTC, `to` at the given day 00:00 UTC. */ function computeWindow(q) {\n    const now = new Date();\n    const endQ = arrayFirst(q.end);\n    const startQ = arrayFirst(q.start);\n    const rangeQ = arrayFirst(q.range);\n    // Normalize to a clean UTC day boundary for TODAY\n    const todayUTC = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()));\n    const end = parseDateOnly(endQ) ?? todayUTC;\n    const start = parseDateOnly(startQ);\n    if (start && end) {\n        const from = start <= end ? start : end;\n        const to = end >= start ? end : start;\n        return {\n            from,\n            to,\n            label: \"custom\"\n        };\n    }\n    const map = {\n        d7: 7,\n        d30: 30,\n        d90: 90,\n        all: 365\n    };\n    const days = map[rangeQ || \"d30\"] ?? 30;\n    const from = new Date(end);\n    from.setUTCDate(from.getUTCDate() - days + 1);\n    return {\n        from,\n        to: end,\n        label: rangeQ || \"d30\"\n    };\n}\n/** 23:59:59.999 UTC of the given date */ function endOfDayUTC(d) {\n    return new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), 23, 59, 59, 999));\n}\n/** Helper to safely read the first value of a query param (array or string). */ function arrayFirst(v) {\n    return Array.isArray(v) ? v[0] : v;\n}\n/** Parse optional `limit` with sane defaults and a hard cap. */ function parseLimit(q, def = 10000, cap = 100000) {\n    const raw = arrayFirst(q.limit);\n    const n = Math.max(parseInt(raw || String(def), 10) || def, 1);\n    return Math.min(n, cap);\n}\n/** Read optional string filters (e.g., status, sourceType). */ function readStringFilter(q, key) {\n    const raw = q[key];\n    const v = Array.isArray(raw) ? raw[0] : raw;\n    if (v && typeof v === \"string\") {\n        const trimmed = v.trim();\n        return trimmed ? trimmed : undefined;\n    }\n    return undefined;\n}\n/* ----------------------------------------------------------------------------\n * Step 7.1 AUGMENT — Timezone-aware “current month” window (no extra deps)\n *\n * Purpose:\n *   Provide an accurate “This Month” range for dashboards & billing rollups\n *   in a business timezone (default America/Denver), handling DST correctly.\n *\n * What you get:\n *   currentMonthRange(tz) → { from, to }\n *     - `from` = 00:00:00.000 at local time on the 1st of this month, as a UTC Date\n *     - `to`   = 23:59:59.999 at local time on the last day of this month, as a UTC Date\n *\n * Implementation notes:\n *   - Uses Intl APIs to derive local Y/M/D and numeric UTC offset for a given tz.\n *   - Avoids adding date-fns/date-fns-tz dependencies.\n * ------------------------------------------------------------------------- */ /** Extracts Y/M/D for a given Date as seen in a target IANA timezone. */ function getYMDInTZ(d, timeZone) {\n    const f = new Intl.DateTimeFormat(\"en-CA\", {\n        timeZone,\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\"\n    });\n    const parts = f.formatToParts(d);\n    const y = Number(parts.find((p)=>p.type === \"year\")?.value);\n    const m = Number(parts.find((p)=>p.type === \"month\")?.value);\n    const day = Number(parts.find((p)=>p.type === \"day\")?.value);\n    return {\n        y,\n        m,\n        day\n    };\n}\n/** Parses a TZ offset like \"GMT-06:00\" → minutes (-360). */ function parseGmtOffsetToMinutes(label) {\n    // Expect strings like \"GMT-06:00\" / \"GMT+05:30\"\n    const m = /GMT([+-])(\\d{2}):(\\d{2})/.exec(label);\n    if (!m) return null;\n    const sign = m[1] === \"-\" ? -1 : 1;\n    const hh = Number(m[2]);\n    const mm = Number(m[3]);\n    return sign * (hh * 60 + mm);\n}\n/** Gets the numeric offset, in minutes, of `timeZone` at instant `d`. */ function tzOffsetMinutesAt(d, timeZone) {\n    // Use timeZoneName: 'shortOffset' to get labels like \"GMT-06:00\"\n    const fmt = new Intl.DateTimeFormat(\"en-US\", {\n        timeZone,\n        timeZoneName: \"shortOffset\",\n        hour12: false,\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n    });\n    const parts = fmt.formatToParts(d);\n    const label = parts.find((p)=>p.type === \"timeZoneName\")?.value || \"\";\n    const mins = parseGmtOffsetToMinutes(label);\n    // Fallback: compute offset via wall-clock comparison if parsing fails\n    if (mins == null) {\n        const asLocal = new Date(fmt.format(d).replace(/(\\d{2})\\/(\\d{2})\\/(\\d{4}), (\\d{2}):(\\d{2}).*/, \"$3-$1-$2T$4:$5:00Z\"));\n        const diff = (asLocal.getTime() - d.getTime()) / 60000;\n        return Math.round(diff);\n    }\n    return mins;\n}\n/**\n * Returns the UTC instant corresponding to LOCAL midnight (00:00:00.000) for\n * the given Y/M/D in `timeZone`.\n */ function localMidnightUTC(y, m1, d, timeZone) {\n    // Create an approximate UTC instant for that date\n    const approxUTC = new Date(Date.UTC(y, m1 - 1, d, 0, 0, 0, 0));\n    // Get the correct offset at that local date\n    const offsetMin = tzOffsetMinutesAt(approxUTC, timeZone);\n    // Local midnight = UTC - offset\n    return new Date(approxUTC.getTime() - offsetMin * 60000);\n}\n/**\n * Returns the UTC instant corresponding to LOCAL 23:59:59.999 for the given\n * Y/M/D in `timeZone`.\n */ function localEndOfDayUTC(y, m1, d, timeZone) {\n    const approxUTC = new Date(Date.UTC(y, m1 - 1, d, 23, 59, 59, 999));\n    const offsetMin = tzOffsetMinutesAt(approxUTC, timeZone);\n    return new Date(approxUTC.getTime() - offsetMin * 60000);\n}\n/**\n * Step 7.1: “This Month” range in a target business timezone (default: America/Denver).\n * - from: first day of this month at 00:00 local (as a UTC Date)\n * - to:   last day of this month at 23:59:59.999 local (as a UTC Date)\n */ function currentMonthRange(tz = DEFAULT_TZ) {\n    const now = new Date();\n    const { y, m } = getYMDInTZ(now, tz); // month is 1–12\n    const firstLocalUTC = localMidnightUTC(y, m, 1, tz);\n    // Find number of days in this month (in target TZ) by moving to next month day 0.\n    const nextMonth = m === 12 ? 1 : m + 1;\n    const nextMonthYear = m === 12 ? y + 1 : y;\n    // Last day number = day component of \"the day before the 1st of next month\"\n    const lastOfMonthDate = new Date(Date.UTC(nextMonthYear, nextMonth - 1, 1));\n    lastOfMonthDate.setUTCDate(0); // move to last day of current month\n    const lastDayNum = lastOfMonthDate.getUTCDate();\n    const lastLocalUTC = localEndOfDayUTC(y, m, lastDayNum, tz);\n    return {\n        from: firstLocalUTC,\n        to: lastLocalUTC\n    };\n}\n/**\n * Convenience: Returns ISO strings for UI/debug.\n */ function currentMonthRangeISO(tz = DEFAULT_TZ) {\n    const { from, to } = currentMonthRange(tz);\n    return {\n        from: from.toISOString(),\n        to: to.toISOString()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/reportingWindow.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/dashboard/summary.ts":
/*!********************************************!*\
  !*** ./src/pages/api/dashboard/summary.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n/* harmony import */ var _lib_rbac__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/rbac */ \"(api-node)/./src/lib/rbac.ts\");\n/* harmony import */ var _lib_leadScoring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/leadScoring */ \"(api-node)/./src/lib/leadScoring.ts\");\n/* harmony import */ var _lib_reportingWindow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/reportingWindow */ \"(api-node)/./src/lib/reportingWindow.ts\");\n// src/pages/api/dashboard/summary.ts\n\n\n\n\nasync function handler(req, res) {\n    try {\n        if (!await (0,_lib_rbac__WEBPACK_IMPORTED_MODULE_1__.assertPermission)(req, res, _lib_rbac__WEBPACK_IMPORTED_MODULE_1__.PERMS.DASHBOARD_VIEW)) return;\n        // --- Step 7.1 augment: timezone-aware \"This Month\" window (America/Denver by default)\n        const { from: periodStart, to: periodEnd } = (0,_lib_reportingWindow__WEBPACK_IMPORTED_MODULE_3__.currentMonthRange)();\n        const now = new Date();\n        // ---- Recent block (unchanged intent): last 90 days by CREATED date for generic KPIs/trend\n        const recent = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({\n            where: {\n                createdAt: {\n                    gte: new Date(now.getTime() - 90 * 24 * 3600 * 1000)\n                }\n            },\n            orderBy: {\n                createdAt: \"desc\"\n            },\n            select: {\n                id: true,\n                createdAt: true,\n                convertedAt: true,\n                status: true,\n                sourceType: true,\n                sourceDetail: true,\n                systemGenerated: true,\n                aiScore: true,\n                enrichmentJson: true\n            }\n        });\n        const total = recent.length;\n        let converted = 0;\n        let rfp = 0;\n        const HOT_SCORE_THRESHOLD = Number(process.env.HOT_SCORE_THRESHOLD ?? 70);\n        let hot = 0;\n        let cold = 0;\n        const trendBuckets = {};\n        const trendStart = new Date(now.getTime() - 30 * 24 * 3600 * 1000);\n        // We will compute month billables via a dedicated conversion-scoped query below.\n        // Initialize here to keep the response shape identical.\n        let monthBillableCount = 0;\n        let monthBillableAmountUSD = 0;\n        for (const l of recent){\n            const st = (l.status || \"\").toString().toUpperCase();\n            const srcType = (l.sourceType || \"\").toString().toUpperCase();\n            // narrow enrichmentJson safely\n            const ej = l.enrichmentJson ?? {};\n            if (srcType === \"RFP\" || l.systemGenerated || (0,_lib_leadScoring__WEBPACK_IMPORTED_MODULE_2__.isSystemGenerated)(l.sourceDetail ?? \"\")) {\n                rfp++;\n            }\n            if (st === \"CONVERTED\" || st === \"WON\" || st === \"CLOSED-WON\") {\n                converted++;\n            }\n            const score = typeof l.aiScore === \"number\" ? l.aiScore : null;\n            if (score !== null) {\n                if (score >= HOT_SCORE_THRESHOLD) hot++;\n                else cold++;\n            }\n            const createdAt = l.createdAt ? new Date(l.createdAt) : null;\n            if (createdAt && createdAt >= trendStart) {\n                const key = createdAt.toISOString().slice(0, 10);\n                if (!trendBuckets[key]) trendBuckets[key] = {\n                    newLeads: 0,\n                    converted: 0\n                };\n                trendBuckets[key].newLeads++;\n            }\n            const convAt = l.convertedAt ? new Date(l.convertedAt) : null;\n            if (st === \"CONVERTED\" && convAt && convAt >= trendStart) {\n                const key = convAt.toISOString().slice(0, 10);\n                if (!trendBuckets[key]) trendBuckets[key] = {\n                    newLeads: 0,\n                    converted: 0\n                };\n                trendBuckets[key].converted++;\n            }\n        }\n        // ---- Accurate month billables: query by CONVERTED date within the month window\n        // Includes leads created long ago but converted this month.\n        const monthConverted = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({\n            where: {\n                // statuses: your dataset sometimes uses WON/CLOSED-WON; we treat them as converted as well\n                // If your enum is strict, feel free to narrow to 'CONVERTED' only.\n                convertedAt: {\n                    gte: periodStart,\n                    lte: periodEnd\n                },\n                // \"System-generated\" guard: either explicit field or sourceType flag\n                OR: [\n                    {\n                        sourceType: \"SYSTEM\"\n                    },\n                    {\n                        systemGenerated: true\n                    }\n                ]\n            },\n            select: {\n                id: true,\n                convertedAt: true,\n                status: true,\n                sourceType: true,\n                systemGenerated: true,\n                enrichmentJson: true\n            }\n        });\n        for (const l of monthConverted){\n            const ej = l.enrichmentJson ?? {};\n            const billing = ej.billing ?? {};\n            // Bill only if the conversion is marked eligible and not yet billed\n            if (billing.billableEligible === true && !billing.billedAt) {\n                monthBillableCount++;\n                const price = Number(billing.unitPriceCents || 0) / 100;\n                monthBillableAmountUSD += price;\n            }\n        }\n        const trend = Object.keys(trendBuckets).sort().map((d)=>({\n                date: d,\n                ...trendBuckets[d]\n            }));\n        return res.status(200).json({\n            ok: true,\n            kpis: {\n                totalLeads90d: total,\n                converted90d: converted,\n                rfp90d: rfp,\n                monthBillableCount,\n                monthBillableAmountUSD,\n                periodStartISO: periodStart.toISOString(),\n                periodEndISO: periodEnd.toISOString(),\n                hot90d: hot,\n                cold90d: cold,\n                trend\n            }\n        });\n    } catch (e) {\n        const msg = e?.message ?? \"Internal Error\";\n        // eslint-disable-next-line no-console\n        console.error(\"/api/dashboard/summary error:\", e);\n        return res.status(500).json({\n            ok: false,\n            error: msg\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/dashboard/summary.ts\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fdashboard%2Fsummary&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fdashboard%2Fsummary.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();