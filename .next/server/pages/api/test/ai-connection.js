"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/test/ai-connection";
exports.ids = ["pages/api/test/ai-connection"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftest%2Fai-connection&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Ftest%2Fai-connection.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftest%2Fai-connection&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Ftest%2Fai-connection.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_test_ai_connection_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/pages/api/test/ai-connection.ts */ \"(api-node)/./src/pages/api/test/ai-connection.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_test_ai_connection_ts__WEBPACK_IMPORTED_MODULE_4__]);\n_src_pages_api_test_ai_connection_ts__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_test_ai_connection_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_test_ai_connection_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/test/ai-connection\",\n        pathname: \"/api/test/ai-connection\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_test_ai_connection_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/test/ai-connection\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/test/ai-connection\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftest%2Fai-connection&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Ftest%2Fai-connection.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/lib/aiHelper.ts":
/*!*****************************!*\
  !*** ./src/lib/aiHelper.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeLead: () => (/* binding */ analyzeLead),\n/* harmony export */   analyzeRFP: () => (/* binding */ analyzeRFP),\n/* harmony export */   generatePricingAdvice: () => (/* binding */ generatePricingAdvice),\n/* harmony export */   testAIConnection: () => (/* binding */ testAIConnection)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__]);\nopenai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// src/lib/aiHelper.ts\n// AI Integration Library - Lead Analysis and Business Intelligence\n//\n// PURPOSE:\n// Provides AI-powered analysis for lead generation, RFP evaluation, and business advice.\n// Uses OpenAI GPT-4o Mini for cost-effective analysis while maintaining high quality.\n//\n// FEATURES:\n// - Lead quality analysis and scoring enhancement\n// - RFP evaluation and bidding strategy recommendations  \n// - Pricing optimization suggestions\n// - Response template generation\n// - Competitive analysis insights\n//\n// COST OPTIMIZATION:\n// - Uses GPT-4o Mini ($0.15 input + $0.60 output per million tokens)\n// - Structured prompts to minimize token usage\n// - Caches common responses to reduce repeated calls\n// - Estimated cost: $15-25/month for active cleaning business\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n// However, we use GPT-4o Mini for cost efficiency - 15x cheaper than GPT-5\nconst MODEL = \"gpt-4o-mini\";\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/**\n * Analyze lead quality and provide actionable business intelligence\n * Enhances basic lead scoring with AI insights about opportunity and strategy\n */ async function analyzeLead(leadData) {\n    try {\n        const prompt = `\nAs an expert cleaning services business consultant, analyze this lead and provide actionable intelligence:\n\nLEAD DETAILS:\n- Title: ${leadData.title || 'N/A'}\n- Description: ${leadData.description || 'N/A'}\n- Location: ${leadData.location || 'N/A'}\n- Source: ${leadData.sourceType || 'N/A'}\n- Agency/Client: ${leadData.agency || 'N/A'}\n- Estimated Value: ${leadData.estimatedValue ? `$${leadData.estimatedValue.toLocaleString()}` : 'N/A'}\n- Requirements: ${leadData.requirements || 'N/A'}\n\nBUSINESS CONTEXT:\n- Northern Colorado cleaning business based in Sterling\n- Specializes in commercial janitorial, post-construction cleanup, carpet cleaning\n- Competes on speed, quality, and local presence\n- Serves government, healthcare, education, and commercial sectors\n\nRespond with JSON in this exact format:\n{\n  \"qualityScore\": number (1-100),\n  \"urgencyLevel\": \"immediate|high|medium|low\",\n  \"keyOpportunities\": [\"specific opportunity 1\", \"opportunity 2\"],\n  \"potentialChallenges\": [\"challenge 1\", \"challenge 2\"],\n  \"recommendedAction\": \"specific next step\",\n  \"estimatedValue\": \"value range estimate\",\n  \"confidence\": number (0-1)\n}\n`;\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 800\n        });\n        const analysis = JSON.parse(response.choices[0].message.content || '{}');\n        // Validate and provide defaults\n        return {\n            qualityScore: Math.max(1, Math.min(100, analysis.qualityScore || 50)),\n            urgencyLevel: [\n                'immediate',\n                'high',\n                'medium',\n                'low'\n            ].includes(analysis.urgencyLevel) ? analysis.urgencyLevel : 'medium',\n            keyOpportunities: Array.isArray(analysis.keyOpportunities) ? analysis.keyOpportunities : [],\n            potentialChallenges: Array.isArray(analysis.potentialChallenges) ? analysis.potentialChallenges : [],\n            recommendedAction: analysis.recommendedAction || 'Review lead details and follow up',\n            estimatedValue: analysis.estimatedValue || 'Unable to estimate',\n            confidence: Math.max(0, Math.min(1, analysis.confidence || 0.7))\n        };\n    } catch (error) {\n        console.error('AI lead analysis error:', error);\n        // Return safe defaults if AI fails\n        return {\n            qualityScore: 50,\n            urgencyLevel: 'medium',\n            keyOpportunities: [\n                'Standard cleaning opportunity'\n            ],\n            potentialChallenges: [\n                'Limited information available'\n            ],\n            recommendedAction: 'Contact lead for more details',\n            estimatedValue: 'Requires assessment',\n            confidence: 0.3\n        };\n    }\n}\n/**\n * Generate RFP bidding strategy and response recommendations\n * Provides competitive intelligence and positioning advice\n */ async function analyzeRFP(rfpData) {\n    try {\n        const prompt = `\nAs a government contracting expert for cleaning services, analyze this RFP and provide a winning strategy:\n\nRFP DETAILS:\n- Title: ${rfpData.title || 'N/A'}\n- Description: ${rfpData.description || 'N/A'}\n- Requirements: ${rfpData.requirements || 'N/A'}\n- Agency: ${rfpData.agency || 'N/A'}\n- Deadline: ${rfpData.responseDeadline || 'N/A'}\n- Estimated Value: ${rfpData.estimatedValue ? `$${rfpData.estimatedValue.toLocaleString()}` : 'N/A'}\n- Location: ${rfpData.location || 'N/A'}\n\nCOMPANY PROFILE:\n- Regional cleaning company based in Sterling, Colorado\n- 10+ years experience in government, healthcare, education contracts\n- NAICS 561720 (Janitorial Services), bonded and insured\n- Local presence advantage in Northern Colorado\n- Known for reliability, compliance, and competitive pricing\n\nRespond with JSON in this exact format:\n{\n  \"competitiveLandscape\": \"analysis of likely competition\",\n  \"keyRequirements\": [\"requirement 1\", \"requirement 2\"],\n  \"pricingStrategy\": \"recommended pricing approach\",\n  \"winFactors\": [\"factor 1\", \"factor 2\"],\n  \"riskFactors\": [\"risk 1\", \"risk 2\"],\n  \"responseTemplate\": \"outline for RFP response\"\n}\n`;\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 1000\n        });\n        const strategy = JSON.parse(response.choices[0].message.content || '{}');\n        return {\n            competitiveLandscape: strategy.competitiveLandscape || 'Analysis not available',\n            keyRequirements: Array.isArray(strategy.keyRequirements) ? strategy.keyRequirements : [],\n            pricingStrategy: strategy.pricingStrategy || 'Competitive pricing recommended',\n            winFactors: Array.isArray(strategy.winFactors) ? strategy.winFactors : [],\n            riskFactors: Array.isArray(strategy.riskFactors) ? strategy.riskFactors : [],\n            responseTemplate: strategy.responseTemplate || 'Standard RFP response template'\n        };\n    } catch (error) {\n        console.error('AI RFP analysis error:', error);\n        return {\n            competitiveLandscape: 'Analysis unavailable',\n            keyRequirements: [\n                'Review RFP requirements'\n            ],\n            pricingStrategy: 'Research market rates',\n            winFactors: [\n                'Local presence',\n                'Competitive pricing'\n            ],\n            riskFactors: [\n                'Limited information'\n            ],\n            responseTemplate: 'Standard response format needed'\n        };\n    }\n}\n/**\n * Generate pricing recommendations based on project details\n * Considers market rates, project complexity, and competitive factors\n */ async function generatePricingAdvice(projectData) {\n    try {\n        const prompt = `\nAs a commercial cleaning pricing expert in Northern Colorado, provide pricing recommendations:\n\nPROJECT DETAILS:\n- Service Type: ${projectData.serviceType || 'General cleaning'}\n- Square Footage: ${projectData.squareFootage || 'Unknown'}\n- Frequency: ${projectData.frequency || 'Unknown'}\n- Location: ${projectData.location || 'Northern Colorado'}\n- Special Requirements: ${projectData.specialRequirements || 'Standard cleaning'}\n- Timeline: ${projectData.timeline || 'Standard'}\n- Client Type: ${projectData.clientType || 'Commercial'}\n\nMARKET CONTEXT:\n- Northern Colorado rates: $0.08-0.15/sq ft for basic janitorial\n- Post-construction cleanup: $0.20-0.35/sq ft\n- Carpet cleaning: $0.25-0.50/sq ft\n- Government contracts typically 10-20% below commercial rates\n- Local competition from regional and national chains\n\nRespond with JSON in this exact format:\n{\n  \"suggestedRange\": {\"min\": number, \"max\": number},\n  \"priceJustification\": \"explanation of pricing rationale\",\n  \"competitiveFactors\": [\"factor 1\", \"factor 2\"],\n  \"valueProposition\": \"key selling points for this price\",\n  \"negotiationTips\": [\"tip 1\", \"tip 2\"]\n}\n`;\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 800\n        });\n        const pricing = JSON.parse(response.choices[0].message.content || '{}');\n        return {\n            suggestedRange: {\n                min: pricing.suggestedRange?.min || 1000,\n                max: pricing.suggestedRange?.max || 5000\n            },\n            priceJustification: pricing.priceJustification || 'Competitive market rate',\n            competitiveFactors: Array.isArray(pricing.competitiveFactors) ? pricing.competitiveFactors : [],\n            valueProposition: pricing.valueProposition || 'Quality service at competitive rates',\n            negotiationTips: Array.isArray(pricing.negotiationTips) ? pricing.negotiationTips : []\n        };\n    } catch (error) {\n        console.error('AI pricing analysis error:', error);\n        return {\n            suggestedRange: {\n                min: 1000,\n                max: 5000\n            },\n            priceJustification: 'Market research needed',\n            competitiveFactors: [\n                'Local market conditions'\n            ],\n            valueProposition: 'Reliable local service',\n            negotiationTips: [\n                'Emphasize quality and reliability'\n            ]\n        };\n    }\n}\n/**\n * Test OpenAI API connection and functionality\n * Returns simple analysis to verify everything is working\n */ async function testAIConnection() {\n    try {\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"user\",\n                    content: \"Respond with JSON: {\\\"status\\\": \\\"working\\\", \\\"message\\\": \\\"AI integration successful\\\"}\"\n                }\n            ],\n            response_format: {\n                type: \"json_object\"\n            },\n            max_tokens: 100\n        });\n        const result = JSON.parse(response.choices[0].message.content || '{}');\n        return {\n            success: true,\n            message: result.message || 'AI connection verified',\n            model: MODEL\n        };\n    } catch (error) {\n        return {\n            success: false,\n            message: `AI connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            model: MODEL\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/aiHelper.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/test/ai-connection.ts":
/*!*********************************************!*\
  !*** ./src/pages/api/test/ai-connection.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_aiHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/aiHelper */ \"(api-node)/./src/lib/aiHelper.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_aiHelper__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_aiHelper__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Test endpoint to verify OpenAI API integration\n\nasync function handler(req, res) {\n    if (req.method !== 'GET') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    try {\n        const result = await (0,_lib_aiHelper__WEBPACK_IMPORTED_MODULE_0__.testAIConnection)();\n        if (result.success) {\n            res.status(200).json({\n                success: true,\n                message: 'AI integration working perfectly!',\n                model: result.model,\n                ready: true\n            });\n        } else {\n            res.status(500).json({\n                success: false,\n                error: result.message,\n                model: result.model,\n                ready: false\n            });\n        }\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            ready: false\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9wYWdlcy9hcGkvdGVzdC9haS1jb25uZWN0aW9uLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsaURBQWlEO0FBRUM7QUFFbkMsZUFBZUMsUUFBUUMsR0FBbUIsRUFBRUMsR0FBb0I7SUFDN0UsSUFBSUQsSUFBSUUsTUFBTSxLQUFLLE9BQU87UUFDeEIsT0FBT0QsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxPQUFPO1FBQXFCO0lBQzVEO0lBRUEsSUFBSTtRQUNGLE1BQU1DLFNBQVMsTUFBTVIsK0RBQWdCQTtRQUVyQyxJQUFJUSxPQUFPQyxPQUFPLEVBQUU7WUFDbEJOLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7Z0JBQ25CRyxTQUFTO2dCQUNUQyxTQUFTO2dCQUNUQyxPQUFPSCxPQUFPRyxLQUFLO2dCQUNuQkMsT0FBTztZQUNUO1FBQ0YsT0FBTztZQUNMVCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUNuQkcsU0FBUztnQkFDVEYsT0FBT0MsT0FBT0UsT0FBTztnQkFDckJDLE9BQU9ILE9BQU9HLEtBQUs7Z0JBQ25CQyxPQUFPO1lBQ1Q7UUFDRjtJQUNGLEVBQUUsT0FBT0wsT0FBTztRQUNkSixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQ25CRyxTQUFTO1lBQ1RGLE9BQU9BLGlCQUFpQk0sUUFBUU4sTUFBTUcsT0FBTyxHQUFHO1lBQ2hERSxPQUFPO1FBQ1Q7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NyYy9wYWdlcy9hcGkvdGVzdC9haS1jb25uZWN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRlc3QgZW5kcG9pbnQgdG8gdmVyaWZ5IE9wZW5BSSBBUEkgaW50ZWdyYXRpb25cbmltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gXCJuZXh0XCI7XG5pbXBvcnQgeyB0ZXN0QUlDb25uZWN0aW9uIH0gZnJvbSBcIkAvbGliL2FpSGVscGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdHRVQnKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgZXJyb3I6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZXN0QUlDb25uZWN0aW9uKCk7XG4gICAgXG4gICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICdBSSBpbnRlZ3JhdGlvbiB3b3JraW5nIHBlcmZlY3RseSEnLFxuICAgICAgICBtb2RlbDogcmVzdWx0Lm1vZGVsLFxuICAgICAgICByZWFkeTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiByZXN1bHQubWVzc2FnZSxcbiAgICAgICAgbW9kZWw6IHJlc3VsdC5tb2RlbCxcbiAgICAgICAgcmVhZHk6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICByZWFkeTogZmFsc2VcbiAgICB9KTtcbiAgfVxufSJdLCJuYW1lcyI6WyJ0ZXN0QUlDb25uZWN0aW9uIiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsInJlc3VsdCIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwibW9kZWwiLCJyZWFkeSIsIkVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/test/ai-connection.ts\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ftest%2Fai-connection&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Ftest%2Fai-connection.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();