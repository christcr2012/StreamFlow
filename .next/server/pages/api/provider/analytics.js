"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/provider/analytics";
exports.ids = ["pages/api/provider/analytics"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprovider%2Fanalytics&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fprovider%2Fanalytics.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprovider%2Fanalytics&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fprovider%2Fanalytics.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_provider_analytics_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/pages/api/provider/analytics.ts */ \"(api-node)/./src/pages/api/provider/analytics.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_provider_analytics_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_provider_analytics_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/provider/analytics\",\n        pathname: \"/api/provider/analytics\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_provider_analytics_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/provider/analytics\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/provider/analytics\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprovider%2Fanalytics&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fprovider%2Fanalytics.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// src/lib/prisma.ts\n\nconst prisma = global.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0\n});\nif (true) global.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9CQUFvQjtBQUMwQjtBQVF2QyxNQUFNQyxTQUNYQyxPQUFPRCxNQUFNLElBQ2IsSUFBSUQsd0RBQVlBLENBQUM7SUFDZkcsS0FBS0MsS0FBc0MsR0FBRztRQUFDO1FBQVM7UUFBUztLQUFPLEdBQUcsQ0FBUztBQUN0RixHQUFHO0FBRUwsSUFBSUEsSUFBcUMsRUFBRUYsT0FBT0QsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvbGliL3ByaXNtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL3ByaXNtYS50c1xuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSBcIkBwcmlzbWEvY2xpZW50XCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gQWxsb3cgZ2xvYmFsIGB2YXJgIHJlZGVjbGFyYXRpb24gaW4gZGV2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID1cbiAgZ2xvYmFsLnByaXNtYSA/P1xuICBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICBsb2c6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgPyBbXCJxdWVyeVwiLCBcImVycm9yXCIsIFwid2FyblwiXSA6IFtcImVycm9yXCJdLFxuICB9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgZ2xvYmFsLnByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJnbG9iYWwiLCJsb2ciLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/rbac.ts":
/*!*************************!*\
  !*** ./src/lib/rbac.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PERMS: () => (/* binding */ PERMS),\n/* harmony export */   assertPermission: () => (/* binding */ assertPermission),\n/* harmony export */   getEmailFromReq: () => (/* binding */ getEmailFromReq),\n/* harmony export */   getOrgIdFromReq: () => (/* binding */ getOrgIdFromReq)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n// src/lib/rbac.ts\n\n/**\n * Permission catalog. Keep codes in sync with seed.\n */ const PERMS = {\n    DASHBOARD_VIEW: \"dashboard:view\",\n    LEAD_READ: \"lead:read\",\n    LEAD_CREATE: \"lead:create\",\n    LEAD_UPDATE: \"lead:update\",\n    LEAD_DELETE: \"lead:delete\",\n    LEAD_EXPORT: \"lead:export\",\n    ROLES_MANAGE: \"roles:manage\",\n    BILLING_MANAGE: \"billing:manage\"\n};\n/**\n * Email that should bypass RBAC permission checks entirely.\n * If DEV_USER_EMAIL is set in the environment, any request from that\n * email address will be treated as having all permissions. This is\n * useful for development and automated testing. In production you\n * should leave DEV_USER_EMAIL unset.\n */ const DEV_USER_EMAIL = process.env.DEV_USER_EMAIL?.toLowerCase() || null;\n/**\n * Extract current user's email from cookie or header.\n * - Cookie: mv_user=<email>\n * - Header: x-mv-user: <email>  (useful for scripts/tests)\n */ function getEmailFromReq(req) {\n    const fromCookie = req.cookies?.mv_user;\n    const fromHeader = req.headers[\"x-mv-user\"] || req.headers[\"x-mvuser\"];\n    const raw = (Array.isArray(fromCookie) ? fromCookie[0] : fromCookie) ?? fromHeader ?? \"\";\n    const email = raw?.toString().trim().toLowerCase();\n    return email || null;\n}\n/** Look up orgId for current user (used to scope queries). */ async function getOrgIdFromReq(req) {\n    const email = getEmailFromReq(req);\n    if (!email) return null;\n    // Development bypass: if this is the dev user, return a fixed orgId\n    // if provided via DEV_ORG_ID, otherwise fall through to DB lookup.\n    if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n        // Use DEV_ORG_ID if provided, else null to indicate no org\n        const devOrg = process.env.DEV_ORG_ID;\n        if (devOrg) return devOrg;\n        // As a fallback, attempt to fetch the first org from the database\n        try {\n            const firstOrg = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.findFirst({\n                select: {\n                    id: true\n                }\n            });\n            return firstOrg?.id ?? null;\n        } catch  {\n            return null;\n        }\n    }\n    const u = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n        where: {\n            email\n        },\n        select: {\n            orgId: true\n        }\n    });\n    return u?.orgId ?? null;\n}\n/**\n * Fetch user's effective permissions from RBAC tables.\n * Falls back to legacy User.role for OWNER/MANAGER/STAFF convenience.\n */ async function getUserPermCodes(userId, legacyRole) {\n    const roleLinks = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacUserRole.findMany({\n        where: {\n            userId\n        },\n        select: {\n            roleId: true\n        }\n    });\n    const roleIds = roleLinks.map((r)=>r.roleId);\n    const perms = roleIds.length ? await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacRolePermission.findMany({\n        where: {\n            roleId: {\n                in: roleIds\n            }\n        },\n        include: {\n            permission: true\n        }\n    }) : [];\n    const codes = new Set(perms.map((rp)=>rp.permission.code));\n    // Legacy role convenience (non-blocking): give sensible defaults\n    switch((legacyRole || \"\").toUpperCase()){\n        case \"OWNER\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT,\n                PERMS.ROLES_MANAGE,\n                PERMS.BILLING_MANAGE\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"MANAGER\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"STAFF\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE\n            ].forEach((c)=>codes.add(c));\n            break;\n    }\n    return codes;\n}\n/**\n * Assert that current request is from an authenticated user with a given permission.\n * Writes 401/403 to res if not allowed. Returns true if allowed, false otherwise.\n */ async function assertPermission(req, res, required) {\n    try {\n        const email = getEmailFromReq(req);\n        if (!email) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        // Development bypass: if the incoming email matches the DEV_USER_EMAIL\n        // then skip any database lookups and allow the request. This permits\n        // automated tests and development sessions to exercise any API\n        // regardless of the user's persisted role or permissions. If no\n        // DEV_USER_EMAIL is configured, this block has no effect.\n        if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n            return true;\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                email\n            },\n            select: {\n                id: true,\n                role: true\n            }\n        });\n        if (!user) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        const codes = await getUserPermCodes(user.id, user.role);\n        if (!codes.has(required)) {\n            res.status(403).json({\n                ok: false,\n                error: \"Forbidden\"\n            });\n            return false;\n        }\n        return true;\n    } catch (e) {\n        console.error(\"assertPermission error:\", e);\n        res.status(500).json({\n            ok: false,\n            error: \"Internal Server Error\"\n        });\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/rbac.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/provider/analytics.ts":
/*!*********************************************!*\
  !*** ./src/pages/api/provider/analytics.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n/* harmony import */ var _lib_rbac__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/rbac */ \"(api-node)/./src/lib/rbac.ts\");\n// src/pages/api/provider/analytics.ts\n\n\n// Ensure only providers can access this endpoint\nasync function ensureProvider(req, res) {\n    const email = (0,_lib_rbac__WEBPACK_IMPORTED_MODULE_1__.getEmailFromReq)(req);\n    if (!email) {\n        res.status(401).json({\n            ok: false,\n            error: \"Unauthorized\"\n        });\n        return null;\n    }\n    const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n        where: {\n            email\n        },\n        select: {\n            id: true,\n            role: true\n        }\n    });\n    if (!user || user.role !== 'PROVIDER') {\n        res.status(403).json({\n            ok: false,\n            error: \"Provider access required\"\n        });\n        return null;\n    }\n    return user;\n}\nfunction getDateRange(range) {\n    const now = new Date();\n    let startDate;\n    switch(range){\n        case '30d':\n            startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n            break;\n        case '90d':\n            startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n            break;\n        case '6m':\n            startDate = new Date(now.getFullYear(), now.getMonth() - 6, 1);\n            break;\n        case '1y':\n            startDate = new Date(now.getFullYear() - 1, now.getMonth(), 1);\n            break;\n        default:\n            startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n    }\n    return {\n        startDate,\n        endDate: now\n    };\n}\nasync function handler(req, res) {\n    try {\n        if (req.method !== 'GET') {\n            res.setHeader('Allow', 'GET');\n            return res.status(405).json({\n                ok: false,\n                error: 'Method not allowed'\n            });\n        }\n        const user = await ensureProvider(req, res);\n        if (!user) return;\n        const range = req.query.range || '90d';\n        const { startDate, endDate } = getDateRange(range);\n        // Overview metrics\n        const totalLeads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n            where: {\n                createdAt: {\n                    gte: startDate,\n                    lte: endDate\n                }\n            }\n        });\n        const convertedLeads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n            where: {\n                convertedAt: {\n                    not: null,\n                    gte: startDate,\n                    lte: endDate\n                },\n                enrichmentJson: {\n                    path: [\n                        'billing',\n                        'billableEligible'\n                    ],\n                    equals: true\n                }\n            }\n        });\n        const conversionRate = totalLeads > 0 ? convertedLeads / totalLeads * 100 : 0;\n        const totalRevenue = convertedLeads * 100;\n        // Get client count for average calculation\n        const clientCount = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.count();\n        const averageRevenuePerClient = clientCount > 0 ? totalRevenue / clientCount : 0;\n        // Calculate growth rate (compare to previous period)\n        const periodLength = endDate.getTime() - startDate.getTime();\n        const previousStartDate = new Date(startDate.getTime() - periodLength);\n        const previousConvertedLeads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n            where: {\n                convertedAt: {\n                    not: null,\n                    gte: previousStartDate,\n                    lt: startDate\n                },\n                enrichmentJson: {\n                    path: [\n                        'billing',\n                        'billableEligible'\n                    ],\n                    equals: true\n                }\n            }\n        });\n        const previousRevenue = previousConvertedLeads * 100;\n        const growthRate = previousRevenue > 0 ? (totalRevenue - previousRevenue) / previousRevenue * 100 : 0;\n        // Monthly breakdown - get last 6 months\n        const monthlyData = [];\n        for(let i = 5; i >= 0; i--){\n            const monthStart = new Date(endDate.getFullYear(), endDate.getMonth() - i, 1);\n            const monthEnd = new Date(endDate.getFullYear(), endDate.getMonth() - i + 1, 0, 23, 59, 59);\n            const monthLeads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where: {\n                    createdAt: {\n                        gte: monthStart,\n                        lte: monthEnd\n                    }\n                }\n            });\n            const monthConversions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where: {\n                    convertedAt: {\n                        gte: monthStart,\n                        lte: monthEnd\n                    },\n                    enrichmentJson: {\n                        path: [\n                            'billing',\n                            'billableEligible'\n                        ],\n                        equals: true\n                    }\n                }\n            });\n            const monthRevenue = monthConversions * 100;\n            // AI cost calculation with configurable limit\n            // TODO: Replace with actual AI usage tracking from aiMeter system\n            const estimatedAiCost = monthLeads * 0.02 + monthConversions * 0.1;\n            const maxAiCostPerMonth = 50; // Default limit - should come from provider settings\n            const aiCost = Math.min(estimatedAiCost, maxAiCostPerMonth);\n            const profit = monthRevenue - aiCost;\n            monthlyData.push({\n                month: monthStart.toISOString(),\n                leads: monthLeads,\n                conversions: monthConversions,\n                revenue: monthRevenue,\n                aiCost,\n                profit\n            });\n        }\n        // Client performance - get top performing clients in the period\n        const orgs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.findMany({\n            select: {\n                id: true,\n                name: true\n            }\n        });\n        const clientPerformance = await Promise.all(orgs.map(async (org)=>{\n            const leads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where: {\n                    orgId: org.id,\n                    createdAt: {\n                        gte: startDate,\n                        lte: endDate\n                    }\n                }\n            });\n            const conversions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where: {\n                    orgId: org.id,\n                    convertedAt: {\n                        gte: startDate,\n                        lte: endDate\n                    },\n                    enrichmentJson: {\n                        path: [\n                            'billing',\n                            'billableEligible'\n                        ],\n                        equals: true\n                    }\n                }\n            });\n            const revenue = conversions * 100;\n            const conversionRate = leads > 0 ? conversions / leads * 100 : 0;\n            // Calculate growth vs previous period for this client\n            const previousConversions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where: {\n                    orgId: org.id,\n                    convertedAt: {\n                        gte: previousStartDate,\n                        lt: startDate\n                    },\n                    enrichmentJson: {\n                        path: [\n                            'billing',\n                            'billableEligible'\n                        ],\n                        equals: true\n                    }\n                }\n            });\n            const previousClientRevenue = previousConversions * 100;\n            const growth = previousClientRevenue > 0 ? (revenue - previousClientRevenue) / previousClientRevenue * 100 : 0;\n            return {\n                clientId: org.id,\n                clientName: org.name,\n                leads,\n                conversions,\n                revenue,\n                conversionRate,\n                growth\n            };\n        }));\n        // Sort by revenue and take top performers\n        clientPerformance.sort((a, b)=>b.revenue - a.revenue);\n        // Source breakdown - analyze lead sources\n        const allLeads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({\n            where: {\n                createdAt: {\n                    gte: startDate,\n                    lte: endDate\n                }\n            },\n            select: {\n                sourceType: true,\n                convertedAt: true,\n                enrichmentJson: true\n            }\n        });\n        const sourceStats = new Map();\n        allLeads.forEach((lead)=>{\n            const source = lead.sourceType || 'Unknown';\n            if (!sourceStats.has(source)) {\n                sourceStats.set(source, {\n                    leads: 0,\n                    conversions: 0,\n                    revenue: 0\n                });\n            }\n            const stats = sourceStats.get(source);\n            stats.leads++;\n            if (lead.convertedAt && lead.enrichmentJson && lead.enrichmentJson?.billing?.billableEligible) {\n                stats.conversions++;\n                stats.revenue += 100;\n            }\n        });\n        const sourceBreakdown = Array.from(sourceStats.entries()).map(([source, stats])=>({\n                source,\n                leads: stats.leads,\n                conversions: stats.conversions,\n                revenue: stats.revenue,\n                percentage: totalLeads > 0 ? stats.leads / totalLeads * 100 : 0\n            })).sort((a, b)=>b.revenue - a.revenue);\n        const analyticsData = {\n            overview: {\n                totalLeads,\n                convertedLeads,\n                conversionRate,\n                totalRevenue,\n                averageRevenuePerClient,\n                growthRate\n            },\n            monthly: monthlyData,\n            clientPerformance: clientPerformance.slice(0, 10),\n            sourceBreakdown: sourceBreakdown.slice(0, 10) // Top 10 sources\n        };\n        return res.status(200).json({\n            ok: true,\n            data: analyticsData\n        });\n    } catch (error) {\n        console.error('Provider analytics error:', error);\n        return res.status(500).json({\n            ok: false,\n            error: error.message || 'Failed to fetch analytics data'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/provider/analytics.ts\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprovider%2Fanalytics&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fprovider%2Fanalytics.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();