"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/provider/revenue";
exports.ids = ["pages/api/provider/revenue"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprovider%2Frevenue&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fprovider%2Frevenue.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprovider%2Frevenue&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fprovider%2Frevenue.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_provider_revenue_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/pages/api/provider/revenue.ts */ \"(api-node)/./src/pages/api/provider/revenue.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_provider_revenue_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_provider_revenue_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/provider/revenue\",\n        pathname: \"/api/provider/revenue\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_provider_revenue_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/provider/revenue\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/provider/revenue\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprovider%2Frevenue&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fprovider%2Frevenue.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// src/lib/prisma.ts\n\nconst prisma = global.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0\n});\nif (true) global.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9CQUFvQjtBQUMwQjtBQVF2QyxNQUFNQyxTQUNYQyxPQUFPRCxNQUFNLElBQ2IsSUFBSUQsd0RBQVlBLENBQUM7SUFDZkcsS0FBS0MsS0FBc0MsR0FBRztRQUFDO1FBQVM7UUFBUztLQUFPLEdBQUcsQ0FBUztBQUN0RixHQUFHO0FBRUwsSUFBSUEsSUFBcUMsRUFBRUYsT0FBT0QsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zcmMvbGliL3ByaXNtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL3ByaXNtYS50c1xuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSBcIkBwcmlzbWEvY2xpZW50XCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gQWxsb3cgZ2xvYmFsIGB2YXJgIHJlZGVjbGFyYXRpb24gaW4gZGV2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcbiAgdmFyIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID1cbiAgZ2xvYmFsLnByaXNtYSA/P1xuICBuZXcgUHJpc21hQ2xpZW50KHtcbiAgICBsb2c6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIgPyBbXCJxdWVyeVwiLCBcImVycm9yXCIsIFwid2FyblwiXSA6IFtcImVycm9yXCJdLFxuICB9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikgZ2xvYmFsLnByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJnbG9iYWwiLCJsb2ciLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/rbac.ts":
/*!*************************!*\
  !*** ./src/lib/rbac.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PERMS: () => (/* binding */ PERMS),\n/* harmony export */   assertPermission: () => (/* binding */ assertPermission),\n/* harmony export */   getEmailFromReq: () => (/* binding */ getEmailFromReq),\n/* harmony export */   getOrgIdFromReq: () => (/* binding */ getOrgIdFromReq)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n// src/lib/rbac.ts\n\n/**\n * Permission catalog. Keep codes in sync with seed.\n */ const PERMS = {\n    DASHBOARD_VIEW: \"dashboard:view\",\n    LEAD_READ: \"lead:read\",\n    LEAD_CREATE: \"lead:create\",\n    LEAD_UPDATE: \"lead:update\",\n    LEAD_DELETE: \"lead:delete\",\n    LEAD_EXPORT: \"lead:export\",\n    ROLES_MANAGE: \"roles:manage\",\n    BILLING_MANAGE: \"billing:manage\"\n};\n/**\n * Email that should bypass RBAC permission checks entirely.\n * If DEV_USER_EMAIL is set in the environment, any request from that\n * email address will be treated as having all permissions. This is\n * useful for development and automated testing. In production you\n * should leave DEV_USER_EMAIL unset.\n */ const DEV_USER_EMAIL = process.env.DEV_USER_EMAIL?.toLowerCase() || null;\n/**\n * Extract current user's email from cookie or header.\n * - Cookie: mv_user=<email>\n * - Header: x-mv-user: <email>  (useful for scripts/tests)\n */ function getEmailFromReq(req) {\n    const fromCookie = req.cookies?.mv_user;\n    const fromHeader = req.headers[\"x-mv-user\"] || req.headers[\"x-mvuser\"];\n    const raw = (Array.isArray(fromCookie) ? fromCookie[0] : fromCookie) ?? fromHeader ?? \"\";\n    const email = raw?.toString().trim().toLowerCase();\n    return email || null;\n}\n/** Look up orgId for current user (used to scope queries). */ async function getOrgIdFromReq(req) {\n    const email = getEmailFromReq(req);\n    if (!email) return null;\n    // Development bypass: if this is the dev user, return a fixed orgId\n    // if provided via DEV_ORG_ID, otherwise fall through to DB lookup.\n    if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n        // Use DEV_ORG_ID if provided, else null to indicate no org\n        const devOrg = process.env.DEV_ORG_ID;\n        if (devOrg) return devOrg;\n        // As a fallback, attempt to fetch the first org from the database\n        try {\n            const firstOrg = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.findFirst({\n                select: {\n                    id: true\n                }\n            });\n            return firstOrg?.id ?? null;\n        } catch  {\n            return null;\n        }\n    }\n    const u = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n        where: {\n            email\n        },\n        select: {\n            orgId: true\n        }\n    });\n    return u?.orgId ?? null;\n}\n/**\n * Fetch user's effective permissions from RBAC tables.\n * Falls back to legacy User.role for OWNER/MANAGER/STAFF convenience.\n */ async function getUserPermCodes(userId, legacyRole) {\n    const roleLinks = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacUserRole.findMany({\n        where: {\n            userId\n        },\n        select: {\n            roleId: true\n        }\n    });\n    const roleIds = roleLinks.map((r)=>r.roleId);\n    const perms = roleIds.length ? await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.rbacRolePermission.findMany({\n        where: {\n            roleId: {\n                in: roleIds\n            }\n        },\n        include: {\n            permission: true\n        }\n    }) : [];\n    const codes = new Set(perms.map((rp)=>rp.permission.code));\n    // Legacy role convenience (non-blocking): give sensible defaults\n    switch((legacyRole || \"\").toUpperCase()){\n        case \"OWNER\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT,\n                PERMS.ROLES_MANAGE,\n                PERMS.BILLING_MANAGE\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"MANAGER\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE,\n                PERMS.LEAD_DELETE,\n                PERMS.LEAD_EXPORT\n            ].forEach((c)=>codes.add(c));\n            break;\n        case \"STAFF\":\n            [\n                PERMS.DASHBOARD_VIEW,\n                PERMS.LEAD_READ,\n                PERMS.LEAD_CREATE,\n                PERMS.LEAD_UPDATE\n            ].forEach((c)=>codes.add(c));\n            break;\n    }\n    return codes;\n}\n/**\n * Assert that current request is from an authenticated user with a given permission.\n * Writes 401/403 to res if not allowed. Returns true if allowed, false otherwise.\n */ async function assertPermission(req, res, required) {\n    try {\n        const email = getEmailFromReq(req);\n        if (!email) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        // Development bypass: if the incoming email matches the DEV_USER_EMAIL\n        // then skip any database lookups and allow the request. This permits\n        // automated tests and development sessions to exercise any API\n        // regardless of the user's persisted role or permissions. If no\n        // DEV_USER_EMAIL is configured, this block has no effect.\n        if (DEV_USER_EMAIL && email === DEV_USER_EMAIL) {\n            return true;\n        }\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                email\n            },\n            select: {\n                id: true,\n                role: true\n            }\n        });\n        if (!user) {\n            res.status(401).json({\n                ok: false,\n                error: \"Unauthorized\"\n            });\n            return false;\n        }\n        const codes = await getUserPermCodes(user.id, user.role);\n        if (!codes.has(required)) {\n            res.status(403).json({\n                ok: false,\n                error: \"Forbidden\"\n            });\n            return false;\n        }\n        return true;\n    } catch (e) {\n        console.error(\"assertPermission error:\", e);\n        res.status(500).json({\n            ok: false,\n            error: \"Internal Server Error\"\n        });\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/rbac.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/provider/revenue.ts":
/*!*******************************************!*\
  !*** ./src/pages/api/provider/revenue.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./src/lib/prisma.ts\");\n/* harmony import */ var _lib_rbac__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/rbac */ \"(api-node)/./src/lib/rbac.ts\");\n// src/pages/api/provider/revenue.ts\n\n\n// Ensure only providers can access this endpoint\nasync function ensureProvider(req, res) {\n    const email = (0,_lib_rbac__WEBPACK_IMPORTED_MODULE_1__.getEmailFromReq)(req);\n    if (!email) {\n        res.status(401).json({\n            ok: false,\n            error: \"Unauthorized\"\n        });\n        return null;\n    }\n    const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n        where: {\n            email\n        },\n        select: {\n            id: true,\n            role: true\n        }\n    });\n    if (!user || user.role !== 'PROVIDER') {\n        res.status(403).json({\n            ok: false,\n            error: \"Provider access required\"\n        });\n        return null;\n    }\n    return user;\n}\nfunction getDateRange(range) {\n    const now = new Date();\n    let startDate;\n    switch(range){\n        case '30d':\n            startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n            break;\n        case '90d':\n            startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n            break;\n        case '6m':\n            startDate = new Date(now.getFullYear(), now.getMonth() - 6, 1);\n            break;\n        case '1y':\n            startDate = new Date(now.getFullYear() - 1, now.getMonth(), 1);\n            break;\n        default:\n            startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n    }\n    return {\n        startDate,\n        endDate: now\n    };\n}\nasync function handler(req, res) {\n    try {\n        if (req.method !== 'GET') {\n            res.setHeader('Allow', 'GET');\n            return res.status(405).json({\n                ok: false,\n                error: 'Method not allowed'\n            });\n        }\n        const user = await ensureProvider(req, res);\n        if (!user) return;\n        const range = req.query.range || '30d';\n        const { startDate, endDate } = getDateRange(range);\n        // Get current month for monthly calculations\n        const now = new Date();\n        const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n        // Revenue summary calculations\n        const totalConvertedLeads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n            where: {\n                convertedAt: {\n                    not: null\n                },\n                enrichmentJson: {\n                    path: [\n                        'billing',\n                        'billableEligible'\n                    ],\n                    equals: true\n                },\n                // CRITICAL: Exclude employee referrals from Provider revenue\n                NOT: {\n                    OR: [\n                        {\n                            sourceType: 'MANUAL_EMPLOYEE_REFERRAL'\n                        },\n                        {\n                            sourceType: 'EMPLOYEE_REFERRAL'\n                        },\n                        {\n                            enrichmentJson: {\n                                path: [\n                                    'billing',\n                                    'employeeRewardEligible'\n                                ],\n                                equals: true\n                            }\n                        }\n                    ]\n                }\n            }\n        });\n        const monthlyConvertedLeads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n            where: {\n                convertedAt: {\n                    gte: monthStart,\n                    lte: endDate\n                },\n                enrichmentJson: {\n                    path: [\n                        'billing',\n                        'billableEligible'\n                    ],\n                    equals: true\n                },\n                // CRITICAL: Exclude employee referrals from Provider revenue\n                NOT: {\n                    OR: [\n                        {\n                            sourceType: 'MANUAL_EMPLOYEE_REFERRAL'\n                        },\n                        {\n                            sourceType: 'EMPLOYEE_REFERRAL'\n                        },\n                        {\n                            enrichmentJson: {\n                                path: [\n                                    'billing',\n                                    'employeeRewardEligible'\n                                ],\n                                equals: true\n                            }\n                        }\n                    ]\n                }\n            }\n        });\n        const periodConvertedLeads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n            where: {\n                convertedAt: {\n                    gte: startDate,\n                    lte: endDate\n                },\n                enrichmentJson: {\n                    path: [\n                        'billing',\n                        'billableEligible'\n                    ],\n                    equals: true\n                },\n                // CRITICAL: Exclude employee referrals from Provider revenue\n                NOT: {\n                    OR: [\n                        {\n                            sourceType: 'MANUAL_EMPLOYEE_REFERRAL'\n                        },\n                        {\n                            sourceType: 'EMPLOYEE_REFERRAL'\n                        },\n                        {\n                            enrichmentJson: {\n                                path: [\n                                    'billing',\n                                    'employeeRewardEligible'\n                                ],\n                                equals: true\n                            }\n                        }\n                    ]\n                }\n            }\n        });\n        const totalRevenue = totalConvertedLeads * 100;\n        const monthlyRevenue = monthlyConvertedLeads * 100;\n        const pendingRevenue = 0; // Would be calculated from unpaid invoices\n        // AI cost calculation with configurable limit\n        // TODO: Replace with actual AI usage tracking from aiMeter system\n        const totalLeads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n            where: {\n                createdAt: {\n                    gte: monthStart,\n                    lte: endDate\n                },\n                // CRITICAL: Exclude employee referrals from Provider AI cost calculations\n                NOT: {\n                    OR: [\n                        {\n                            sourceType: 'MANUAL_EMPLOYEE_REFERRAL'\n                        },\n                        {\n                            sourceType: 'EMPLOYEE_REFERRAL'\n                        },\n                        {\n                            enrichmentJson: {\n                                path: [\n                                    'billing',\n                                    'employeeRewardEligible'\n                                ],\n                                equals: true\n                            }\n                        }\n                    ]\n                }\n            }\n        });\n        const estimatedAiCost = totalLeads * 0.02 + monthlyConvertedLeads * 0.1;\n        const maxAiCostPerMonth = 50; // Default limit - should come from provider settings\n        const aiCosts = Math.min(estimatedAiCost, maxAiCostPerMonth);\n        const netProfit = monthlyRevenue - aiCosts;\n        const profitMargin = monthlyRevenue > 0 ? netProfit / monthlyRevenue : 0;\n        const averageRevenuePerLead = periodConvertedLeads > 0 ? periodConvertedLeads * 100 / periodConvertedLeads : 100;\n        // Project monthly revenue based on current trends\n        const daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();\n        const daysSoFar = now.getDate();\n        const projectedMonthlyRevenue = daysSoFar > 0 ? monthlyRevenue / daysSoFar * daysInMonth : monthlyRevenue;\n        // Monthly breakdown - get last 6 months\n        const monthlyBreakdown = [];\n        for(let i = 5; i >= 0; i--){\n            const monthStart = new Date(endDate.getFullYear(), endDate.getMonth() - i, 1);\n            const monthEnd = new Date(endDate.getFullYear(), endDate.getMonth() - i + 1, 0, 23, 59, 59);\n            const leads = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where: {\n                    createdAt: {\n                        gte: monthStart,\n                        lte: monthEnd\n                    },\n                    // CRITICAL: Exclude employee referrals from Provider revenue calculations\n                    NOT: {\n                        OR: [\n                            {\n                                sourceType: 'MANUAL_EMPLOYEE_REFERRAL'\n                            },\n                            {\n                                sourceType: 'EMPLOYEE_REFERRAL'\n                            },\n                            {\n                                enrichmentJson: {\n                                    path: [\n                                        'billing',\n                                        'employeeRewardEligible'\n                                    ],\n                                    equals: true\n                                }\n                            }\n                        ]\n                    }\n                }\n            });\n            const conversions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where: {\n                    convertedAt: {\n                        gte: monthStart,\n                        lte: monthEnd\n                    },\n                    enrichmentJson: {\n                        path: [\n                            'billing',\n                            'billableEligible'\n                        ],\n                        equals: true\n                    },\n                    // CRITICAL: Exclude employee referrals from Provider revenue\n                    NOT: {\n                        OR: [\n                            {\n                                sourceType: 'MANUAL_EMPLOYEE_REFERRAL'\n                            },\n                            {\n                                sourceType: 'EMPLOYEE_REFERRAL'\n                            },\n                            {\n                                enrichmentJson: {\n                                    path: [\n                                        'billing',\n                                        'employeeRewardEligible'\n                                    ],\n                                    equals: true\n                                }\n                            }\n                        ]\n                    }\n                }\n            });\n            const revenue = conversions * 100;\n            // AI cost calculation with configurable limit\n            // TODO: Replace with actual AI usage tracking from aiMeter system\n            const estimatedAiCost = leads * 0.02 + conversions * 0.1;\n            const maxAiCostPerMonth = 50; // Default limit - should come from provider settings\n            const aiCost = Math.min(estimatedAiCost, maxAiCostPerMonth);\n            const netProfit = revenue - aiCost;\n            const profitMargin = revenue > 0 ? netProfit / revenue : 0;\n            monthlyBreakdown.push({\n                month: monthStart.toISOString(),\n                leads,\n                conversions,\n                revenue,\n                aiCost,\n                netProfit,\n                profitMargin\n            });\n        }\n        // Client revenue breakdown\n        const orgs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.org.findMany({\n            select: {\n                id: true,\n                name: true\n            }\n        });\n        const clientRevenue = await Promise.all(orgs.map(async (org)=>{\n            const monthlyConversions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where: {\n                    orgId: org.id,\n                    convertedAt: {\n                        gte: monthStart,\n                        lte: endDate\n                    },\n                    enrichmentJson: {\n                        path: [\n                            'billing',\n                            'billableEligible'\n                        ],\n                        equals: true\n                    },\n                    // CRITICAL: Exclude employee referrals from Provider revenue\n                    NOT: {\n                        OR: [\n                            {\n                                sourceType: 'MANUAL_EMPLOYEE_REFERRAL'\n                            },\n                            {\n                                sourceType: 'EMPLOYEE_REFERRAL'\n                            },\n                            {\n                                enrichmentJson: {\n                                    path: [\n                                        'billing',\n                                        'employeeRewardEligible'\n                                    ],\n                                    equals: true\n                                }\n                            }\n                        ]\n                    }\n                }\n            });\n            const totalConversions = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.count({\n                where: {\n                    orgId: org.id,\n                    convertedAt: {\n                        not: null\n                    },\n                    enrichmentJson: {\n                        path: [\n                            'billing',\n                            'billableEligible'\n                        ],\n                        equals: true\n                    },\n                    // CRITICAL: Exclude employee referrals from Provider revenue\n                    NOT: {\n                        OR: [\n                            {\n                                sourceType: 'MANUAL_EMPLOYEE_REFERRAL'\n                            },\n                            {\n                                sourceType: 'EMPLOYEE_REFERRAL'\n                            },\n                            {\n                                enrichmentJson: {\n                                    path: [\n                                        'billing',\n                                        'employeeRewardEligible'\n                                    ],\n                                    equals: true\n                                }\n                            }\n                        ]\n                    }\n                }\n            });\n            const monthlyRevenue = monthlyConversions * 100;\n            const totalRevenue = totalConversions * 100;\n            const averageRevenuePerConversion = totalConversions > 0 ? totalRevenue / totalConversions : 100;\n            // Mock payment status - would be calculated from actual billing records\n            const status = monthlyRevenue > 0 ? 'paid' : 'pending';\n            const lastPayment = monthlyRevenue > 0 ? new Date().toISOString() : null;\n            return {\n                clientId: org.id,\n                clientName: org.name,\n                monthlyRevenue,\n                totalRevenue,\n                conversions: totalConversions,\n                averageRevenuePerConversion,\n                lastPayment,\n                status\n            };\n        }));\n        // Sort by monthly revenue\n        clientRevenue.sort((a, b)=>b.monthlyRevenue - a.monthlyRevenue);\n        // Mock transaction history - would come from actual billing/payment records\n        const transactions = clientRevenue.slice(0, 10).flatMap((client)=>{\n            const clientTransactions = [];\n            if (client.monthlyRevenue > 0) {\n                clientTransactions.push({\n                    id: `txn_${client.clientId}_${Date.now()}`,\n                    clientId: client.clientId,\n                    clientName: client.clientName,\n                    amount: client.monthlyRevenue,\n                    type: 'lead_conversion',\n                    description: `${client.conversions} lead conversions`,\n                    createdAt: new Date().toISOString(),\n                    status: 'completed'\n                });\n            }\n            return clientTransactions;\n        });\n        // Add AI cost transactions\n        if (aiCosts > 0) {\n            transactions.unshift({\n                id: `ai_cost_${Date.now()}`,\n                clientId: 'system',\n                clientName: 'System AI Costs',\n                amount: aiCosts,\n                type: 'ai_cost',\n                description: 'Monthly AI processing costs',\n                createdAt: new Date().toISOString(),\n                status: 'completed'\n            });\n        }\n        // Sort transactions by date (newest first)\n        transactions.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n        const revenueData = {\n            summary: {\n                totalRevenue,\n                monthlyRevenue,\n                pendingRevenue,\n                aiCosts,\n                netProfit,\n                profitMargin,\n                averageRevenuePerLead,\n                projectedMonthlyRevenue\n            },\n            monthlyBreakdown,\n            clientRevenue: clientRevenue.slice(0, 10),\n            transactions: transactions.slice(0, 20) // Recent 20 transactions\n        };\n        return res.status(200).json({\n            ok: true,\n            data: revenueData\n        });\n    } catch (error) {\n        console.error('Provider revenue error:', error);\n        return res.status(500).json({\n            ok: false,\n            error: error.message || 'Failed to fetch revenue data'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/provider/revenue.ts\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fprovider%2Frevenue&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fprovider%2Frevenue.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();