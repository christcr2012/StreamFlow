generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Org {
  id           String   @id @default(cuid())
  name         String
  featureFlags Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // AI Cost Control & Monetization - PROVIDER MODEL
  aiMonthlyBudgetCents Int      @default(5000)  // $50 provider cost limit  
  aiCreditBalance     Int      @default(1000)   // 1k credits = $50 worth (1 credit = $0.05 client-facing)
  aiPlan              AiPlan   @default(BASE)   // Client subscription tier
  aiAlerts            Json     @default("{}")   // Usage alert thresholds

  // Stripe Subscription Management
  stripeCustomerId      String?   // Stripe customer ID for billing
  stripeSubscriptionId  String?   // Current active subscription ID
  subscriptionStatus    String?   // active, past_due, canceled, etc
  subscriptionStartDate DateTime? // When subscription started
  subscriptionEndDate   DateTime? // When subscription ends/ended

  // Back-relations
  auditLogs     AuditLog[]
  ledger        BillingLedger[]
  customers     Customer[]
  invoices      Invoice[]
  jobs          Job[]
  leads         Lead[]
  opportunities Opportunity[]
  payments      Payment[]
  referrals     Referral[]
  rfps          Rfp[]
  users         User[]
  rbacRoles     RbacRole[]      @relation("OrgRbacRoles")
  rbacUserRoles RbacUserRole[]  @relation("OrgRbacUserRoles")
  leadInvoices  LeadInvoice[]   @relation("OrgLeadInvoices")
  pricingPlan   PricingPlan?    @relation("OrgPricingPlan")
  aiUsageEvents AiUsageEvent[]  @relation("OrgAiUsageEvents")
  aiMonthlySummaries AiMonthlySummary[] @relation("OrgAiMonthlySummaries")
  leadActivities LeadActivity[]  @relation("OrgLeadActivities")
  leadTasks     LeadTask[]      @relation("OrgLeadTasks")
  
  // Multi-Portal Business OS Relations
  employeeProfiles EmployeeProfile[] @relation("OrgEmployeeProfiles")
  workOrders      WorkOrder[]       @relation("OrgWorkOrders")
  jobSites        JobSite[]         @relation("OrgJobSites")
  jobAssignments  JobAssignment[]   @relation("OrgJobAssignments")
  timesheets      TimesheetEntry[]  @relation("OrgTimesheets")
  jobChecklists   JobChecklistItem[] @relation("OrgJobChecklists")
  issueReports    IssueReport[]     @relation("OrgIssueReports")
  mediaAssets     MediaAsset[]      @relation("OrgMediaAssets")
  trainingModules TrainingModule[]  @relation("OrgTrainingModules")
  trainingCompletions TrainingCompletion[] @relation("OrgTrainingCompletions")
  
  // Enterprise Governance & Feature Control Relations
  securityPolicies SecurityPolicy[]   @relation("OrgSecurityPolicies")
  featureModules   FeatureModule[]    @relation("OrgFeatureModules")
  featureUsage     FeatureUsage[]     @relation("OrgFeatureUsage")
  budget           OrganizationBudget? @relation("OrgBudget")
  integrations     Integration[]      @relation("OrgIntegrations")
  supportSessions  SupportSession[]   @relation("OrgSupportSessions")
  auditEvents      AuditEvent[]       @relation("OrgAuditEvents")
  
  // Advanced Role Management Relations
  roleVersions       RoleVersion[]      @relation("OrgRoleVersions")
  roleTemplates      RoleTemplate[]     @relation("OrgRoleTemplates")
  permissionBundles  PermissionBundle[] @relation("OrgPermissionBundles")
  roleScopes         RoleScope[]        @relation("OrgRoleScopes")
  roleReviews        RoleReview[]       @relation("OrgRoleReviews")
  provisioningFlows  ProvisioningFlow[] @relation("OrgProvisioningFlows")
  
  // Temporary Elevation System
  temporaryElevations TemporaryElevation[] @relation("OrgTemporaryElevations")

  /// brandConfig stores white-label brand settings such as name, colors, and logo URL.
  /// It is JSON to allow arbitrary keys like { name: "Mountain Vista", color: "#123456", logoUrl: "https://..." }
  brandConfig Json? @default("{}")

  /// settingsJson stores arbitrary organization-level settings.  This can be used
  /// by owners to configure API keys or other preferences needed at runtime.
  settingsJson Json? @default("{}")
}

model User {
  id                 String   @id @default(cuid())
  orgId              String
  email              String   @unique
  name               String?
  role               Role     @default(STAFF)
  passwordHash       String?  @db.VarChar(255)
  mustChangePassword Boolean  @default(false)
  status             String   @default("active")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  org             Org            @relation(fields: [orgId], references: [id])
  rbacUserRoles   RbacUserRole[] @relation("UserRbacUserRoles")
  leadActivities  LeadActivity[] @relation("UserLeadActivities")
  assignedTasks   LeadTask[]     @relation("AssignedLeadTasks")
  createdTasks    LeadTask[]     @relation("CreatedLeadTasks")
  
  // Employee Portal Relations
  employeeProfile EmployeeProfile? @relation("UserEmployeeProfile")
  
  // Temporary Elevation Relations
  temporaryElevations TemporaryElevation[] @relation("UserTemporaryElevations")
  
  // User Session Relations
  sessions UserSession[] @relation("UserSessions")
  
  // Two-Factor Authentication Relations
  twoFactor UserTwoFactor[] @relation("UserTwoFactor")
  
  @@unique([orgId, id])  // Multi-tenant isolation
}

/// UserSession tracks active user login sessions for security and session management
model UserSession {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String   @unique  // Session identifier stored in cookie
  ipAddress   String?  // IP address when session was created
  userAgent   String?  // Browser/client user agent
  deviceInfo  String?  // Parsed device information (OS, browser)
  location    String?  // Geographic location (city, country)
  isActive    Boolean  @default(true)
  lastSeenAt  DateTime @default(now())
  expiresAt   DateTime // Session expiration time
  createdAt   DateTime @default(now())
  
  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionId])
  @@index([isActive])
}

/// UserTwoFactor stores two-factor authentication data for users
model UserTwoFactor {
  id            String   @id @default(cuid())
  userId        String   @unique  // One 2FA config per user
  isEnabled     Boolean  @default(false)
  totpSecret    String?  // Base32 encoded TOTP secret
  backupCodes   String[] // Array of backup codes (hashed)
  phoneNumber   String?  // Phone for SMS backup (E.164 format)
  verifiedAt    DateTime? // When 2FA was last verified/setup
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation("UserTwoFactor", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Lead {
  id              String     @id @default(cuid())
  orgId           String
  publicId        String     @unique
  sourceType      LeadSource
  identityHash    String
  company         String?
  contactName     String?
  email           String?
  phoneE164       String?
  website         String?
  serviceCode     String?
  zip             String?
  enrichmentJson  Json       @default("{}")
  aiScore         Int        @default(0)
  scoreFactors    Json       @default("{}")
  /// systemGenerated: true if lead came from SAM/automated import
  systemGenerated Boolean    @default(false)
  /// convertedAt: timestamp when lead was converted (if status changes to converted)
  convertedAt     DateTime?
  /// rfp: raw RFP metadata from SAM.gov
  rfp             Json?
  /// Status of the lead. Stored as an enum rather than string for consistency.
  status          LeadStatus @default(NEW)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  city            String?
  notes           String?
  sourceDetail    String?
  state           String?
  postalCode      String?    @db.VarChar(20)
  address         String?
  addressLine1    String?
  addressLine2    String?
  country         String?

  org             Org               @relation(fields: [orgId], references: [id])
  LeadInvoiceLine LeadInvoiceLine[]
  activities      LeadActivity[]    @relation("LeadActivities")
  tasks           LeadTask[]        @relation("LeadTasks")
  
  @@unique([orgId, id])  // Multi-tenant isolation
  @@index([orgId, createdAt])
  @@index([orgId, convertedAt])
  @@index([orgId, status])
  @@index([orgId, sourceType])
  @@index([orgId, identityHash])
}

model Customer {
  id           String   @id @default(cuid())
  orgId        String
  publicId     String   @unique
  company      String?
  primaryName  String?
  primaryEmail String?
  primaryPhone String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  org           Org           @relation(fields: [orgId], references: [id])
  invoices      Invoice[]
  jobs          Job[]
  workOrders    WorkOrder[]   @relation("CustomerWorkOrders")
  opportunities Opportunity[]
  
  @@unique([orgId, id])  // Multi-tenant isolation
}

model Opportunity {
  id             String    @id @default(cuid())
  orgId          String
  customerId     String
  valueType      ValueType @default(RELATIONSHIP)
  estValue       Decimal?  @db.Decimal(12, 2)
  stage          String    @default("new")
  ownerId        String?
  sourceLeadId   String?
  classification Json      @default("{}")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  customer Customer @relation(fields: [orgId, customerId], references: [orgId, id])
  org      Org      @relation(fields: [orgId], references: [id])
}

model Invoice {
  id         String   @id @default(cuid())
  orgId      String
  customerId String?
  amount     Decimal  @db.Decimal(12, 2)
  status     String   @default("draft")
  issuedAt   DateTime @default(now())
  items      Json     @default("[]")

  customer Customer? @relation(fields: [orgId, customerId], references: [orgId, id])
  org      Org       @relation(fields: [orgId], references: [id])
  payments Payment[]
  
  @@unique([orgId, id])  // Multi-tenant isolation
}

model Payment {
  id         String   @id @default(cuid())
  orgId      String
  invoiceId  String?
  amount     Decimal  @db.Decimal(12, 2)
  method     String   @default("stripe")
  receivedAt DateTime @default(now())
  reference  String?

  invoice Invoice? @relation(fields: [orgId, invoiceId], references: [orgId, id])
  org     Org      @relation(fields: [orgId], references: [id])
  
  @@unique([orgId, id])  // Multi-tenant isolation
}

model Rfp {
  id          String    @id @default(cuid())
  orgId       String
  publicId    String    @unique
  sourceSite  String
  title       String
  dueDate     DateTime?
  docs        Json      @default("[]")
  aiBidFit    Int?
  aiPriceHint Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  jobs Job[]
  org  Org   @relation(fields: [orgId], references: [id])
  
  @@unique([orgId, id])  // Multi-tenant isolation
}

model Job {
  id         String   @id @default(cuid())
  orgId      String
  customerId String?
  rfpId      String?
  status     String   @default("planned")
  schedule   Json     @default("{}")
  assignedTo String?
  checklist  Json     @default("[]")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer? @relation(fields: [orgId, customerId], references: [orgId, id])
  org      Org       @relation(fields: [orgId], references: [id])
  rfp      Rfp?      @relation(fields: [orgId, rfpId], references: [orgId, id])
  
  @@unique([orgId, id])  // Multi-tenant isolation
}

model Referral {
  id            String    @id @default(cuid())
  orgId         String
  employeeId    String?
  referredName  String
  referredEmail String?
  referredPhone String?
  status        String    @default("new")
  convertedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  org Org @relation(fields: [orgId], references: [id])
}

model BillingLedger {
  id        String     @id @default(cuid())
  orgId     String
  type      LedgerType
  amount    Decimal    @db.Decimal(12, 2)
  meta      Json       @default("{}")
  createdAt DateTime   @default(now())

  org Org @relation(fields: [orgId], references: [id])

  @@index([orgId, type])
}

/// LeadInvoice represents a monthly invoice for converted leads. This is separate from the
/// existing Invoice model used for customers/jobs. It aggregates lead conversions and
/// includes metadata to support billing and optional Stripe integration.
model LeadInvoice {
  id              String   @id @default(cuid())
  orgId           String   // Made required for multi-tenant isolation
  org             Org      @relation("OrgLeadInvoices", fields: [orgId], references: [id])
  number          String   @unique
  periodFrom      DateTime
  periodTo        DateTime
  status          String // "draft" | "open" | "paid" | "void" | "uncollectible"
  subtotalCents   Int
  taxCents        Int      @default(0)
  totalCents      Int
  currency        String   @default("usd")
  stripeInvoiceId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  /// Number of leads billed on this invoice (to support flat-per-lead billing)
  leadCount       Int      @default(0)

  lines LeadInvoiceLine[]
  
  @@unique([orgId, id])  // Multi-tenant isolation
}

/// LeadInvoiceLine represents an individual line item on a LeadInvoice. Each line is typically
/// associated with a converted lead, but generic fee/credit lines are also supported.
model LeadInvoiceLine {
  id        String      @id @default(cuid())
  orgId     String      // Added for multi-tenant isolation
  invoiceId String
  invoice   LeadInvoice @relation(fields: [orgId, invoiceId], references: [orgId, id])

  // Optional association back to a Lead for traceability.
  leadId String?
  lead   Lead?   @relation(fields: [orgId, leadId], references: [orgId, id])

  description    String
  quantity       Int      @default(1)
  unitPriceCents Int
  amountCents    Int
  source         String?
  createdAt      DateTime @default(now())

  @@index([invoiceId])
  @@index([leadId])
  @@index([orgId, leadId])
  @@index([orgId, invoiceId])
}

model AuditLog {
  id          String   @id @default(cuid())
  orgId       String
  actorUserId String?
  /// The entity type affected (e.g. 'lead', 'invoice', 'pricing', etc.)
  entity      String
  /// Identifier of the record affected
  entityId    String?
  /// Name of the field that was changed (nullable for record-level actions)
  field       String?
  /// Previous value (JSON) before the change, if applicable
  oldValue    Json?
  /// New value (JSON) after the change, if applicable
  newValue    Json?
  /// Free-form reason or comment describing why the change was made
  reason      String?
  createdAt   DateTime @default(now())

  org Org @relation(fields: [orgId], references: [id])
}

enum Role {
  OWNER
  MANAGER
  STAFF
  PROVIDER
  ACCOUNTANT
}

enum LeadSource {
  COLD
  HOT
  RFP
  MANUAL_EMPLOYEE_REFERRAL
  MANUAL_EXISTING_CUSTOMER
  MANUAL_NEW_CUSTOMER
  MANUAL_OTHER
  /// System-generated leads imported from external sources like SAM.gov
  SYSTEM
  /// Employee referrals (for internal referral program)
  EMPLOYEE_REFERRAL
  /// Manually added leads not fitting other categories
  MANUAL
  /// Leads imported from Local Service Ads or other lead sources
  LSA
}

enum ValueType {
  RELATIONSHIP
  JOB
}

enum LedgerType {
  CONVERSION_FEE
  PACK_PURCHASE
}

// === RBAC (namespaced to avoid collision with your existing Role enum) ===

model RbacPermission {
  id          String   @id @default(cuid())
  code        String   @unique // e.g. "lead:create"
  description String?
  createdAt   DateTime @default(now())

  rolePerms RbacRolePermission[]
}

model RbacRole {
  id        String   @id @default(cuid())
  orgId     String?
  // 👇 keep the named relation to match Org.rbacRoles
  org       Org?     @relation("OrgRbacRoles", fields: [orgId], references: [id])
  name      String
  slug      String
  isSystem  Boolean  @default(false)
  createdAt DateTime @default(now())

  rolePerms RbacRolePermission[]
  userRoles RbacUserRole[]
  
  // Advanced Role Management Relations
  versions  RoleVersion[] @relation("RoleVersions")
  scopes    RoleScope[]   @relation("RoleScopes")
  reviews   RoleReview[]  @relation("RoleReviews")

  @@unique([orgId, slug])
}

model RbacRolePermission {
  roleId       String
  permissionId String

  role       RbacRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission RbacPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model RbacUserRole {
  id     String  @id @default(cuid())
  userId String
  orgId  String?
  roleId String

  // 👇 named relations to match Org/User sides
  user User     @relation("UserRbacUserRoles", fields: [userId], references: [id], onDelete: Cascade)
  org  Org?     @relation("OrgRbacUserRoles", fields: [orgId], references: [id])
  role RbacRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, orgId])
}

// ===== ADVANCED ENTERPRISE ROLE MANAGEMENT =====

/// RoleVersion provides enterprise-grade role versioning and rollback capabilities
model RoleVersion {
  id          String   @id @default(cuid())
  roleId      String   
  orgId       String
  version     Int      // Version number (1, 2, 3, etc.)
  name        String   // Role name at this version
  description String?  
  
  // Version metadata
  changeReason String?  // Why this version was created
  changedBy   String   // User ID who made the change
  isActive    Boolean  @default(false) // Is this the active version?
  
  // Snapshot of permissions at this version
  permissions Json     // Array of permission codes at time of version
  config      Json     @default("{}") // Role configuration snapshot
  
  // Scoping information snapshot
  scopeConfig Json     @default("{}") // Scoping rules at time of version
  
  createdAt   DateTime @default(now())
  
  role RbacRole @relation("RoleVersions", fields: [roleId], references: [id], onDelete: Cascade)
  org  Org      @relation("OrgRoleVersions", fields: [orgId], references: [id])
  
  @@unique([roleId, version])
  @@index([orgId, roleId])
  @@index([isActive])
}

/// RoleTemplate provides industry-standard role templates and cloning capabilities
model RoleTemplate {
  id           String   @id @default(cuid())
  orgId        String?  // NULL for system-wide templates
  name         String   
  description  String?
  industry     String?  // e.g., "healthcare", "finance", "manufacturing"
  category     String?  // e.g., "management", "operations", "support"
  
  // Template configuration
  isSystemTemplate Boolean @default(false) // System vs custom template
  isPublic     Boolean  @default(false) // Can other orgs use this template?
  usageCount   Int      @default(0)     // How many times cloned
  
  // Template permissions and configuration
  permissions  Json     // Array of permission codes
  config       Json     @default("{}") // Default role configuration
  scopeConfig  Json     @default("{}") // Default scoping rules
  
  // Metadata
  tags         String[] @default([])    // Searchable tags
  complexity   String   @default("BASIC") // BASIC, INTERMEDIATE, ADVANCED
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?  // User ID who created this template
  
  org Org? @relation("OrgRoleTemplates", fields: [orgId], references: [id])
  
  @@index([orgId, industry])
  @@index([isSystemTemplate, isPublic])
  @@index([industry, category])
}

/// PermissionBundle creates reusable permission sets (e.g., "Supervisor Pack")
model PermissionBundle {
  id          String   @id @default(cuid())
  orgId       String
  name        String   // e.g., "Supervisor Pack", "Finance Access"
  description String?
  
  // Bundle configuration
  permissions Json     // Array of permission codes in this bundle
  category    String?  // e.g., "management", "finance", "operations"
  isReusable  Boolean  @default(true)
  
  // Usage tracking
  usageCount  Int      @default(0)
  
  // Metadata
  tags        String[] @default([])
  color       String?  // For UI categorization
  icon        String?  // Icon identifier
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // User ID who created this bundle
  
  org Org @relation("OrgPermissionBundles", fields: [orgId], references: [id])
  
  @@unique([orgId, name])
  @@index([orgId, category])
  @@index([isReusable])
}

/// RoleScope provides granular permission scoping by project, team, geography, etc.
model RoleScope {
  id        String   @id @default(cuid())
  roleId    String
  orgId     String
  
  // Scope definition
  scopeType String   // "project", "team", "geography", "department", "custom"
  scopeKey  String   // Identifier for the scope (project ID, team ID, etc.)
  scopeName String   // Human-readable name
  
  // Scope configuration
  permissions Json   // Permissions that apply to this scope
  restrictions Json  @default("{}") // Additional restrictions
  
  // Time-based scoping
  startDate DateTime?
  endDate   DateTime?
  timeZone  String?   // For geographic scoping
  
  // Metadata
  isActive  Boolean  @default(true)
  priority  Int      @default(0) // For resolving conflicts
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   // User ID who created this scope
  
  role RbacRole @relation("RoleScopes", fields: [roleId], references: [id], onDelete: Cascade)
  org  Org      @relation("OrgRoleScopes", fields: [orgId], references: [id])
  
  @@unique([roleId, scopeType, scopeKey])
  @@index([orgId, scopeType])
  @@index([isActive, startDate, endDate])
}

/// RoleReview manages periodic role review workflows for compliance
model RoleReview {
  id           String   @id @default(cuid())
  orgId        String
  roleId       String?  // NULL for org-wide reviews
  
  // Review details
  reviewType   String   // "periodic", "access_change", "compliance", "incident"
  status       String   @default("pending") // pending, in_progress, completed, overdue
  
  // Review configuration
  reviewFrequency String? // "monthly", "quarterly", "annually"
  nextReviewDate  DateTime?
  lastReviewDate  DateTime?
  
  // Review participants
  reviewerId   String   // Primary reviewer (User ID)
  approvers    String[] @default([]) // Additional approvers
  
  // Review findings
  findings     Json     @default("{}") // Review findings and recommendations
  actions      Json     @default("{}") // Actions taken
  riskLevel    String   @default("low") // low, medium, high, critical
  
  // Compliance tracking
  complianceFramework String[] @default([]) // SOC2, GDPR, HIPAA, etc.
  exceptions   Json     @default("{}") // Documented exceptions
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completedAt  DateTime?
  
  org  Org       @relation("OrgRoleReviews", fields: [orgId], references: [id])
  role RbacRole? @relation("RoleReviews", fields: [roleId], references: [id])
  
  @@index([orgId, status])
  @@index([nextReviewDate])
  @@index([reviewType, status])
}

/// ProvisioningFlow manages automated user provisioning with SCIM/SSO integration
model ProvisioningFlow {
  id          String   @id @default(cuid())
  orgId       String
  name        String   // e.g., "New Employee Onboarding", "Contractor Access"
  description String?
  
  // Flow configuration
  isActive    Boolean  @default(true)
  trigger     String   // "scim_create", "sso_login", "manual", "api"
  
  // Role assignment rules
  defaultRoles    String[] @default([]) // Default role IDs to assign
  conditionalRoles Json    @default("{}") // Conditional role assignment rules
  
  // Integration settings
  scimMapping     Json    @default("{}") // SCIM attribute mapping
  ssoGroupMapping Json    @default("{}") // SSO group to role mapping
  
  // Workflow steps
  steps           Json    @default("{}") // Provisioning workflow steps
  approvalRequired Boolean @default(false)
  approvers       String[] @default([])
  
  // Notification settings
  notifyUsers     Boolean @default(true)
  notifyManagers  Boolean @default(true)
  emailTemplate   String?
  
  // Security settings
  requireMFA      Boolean @default(false)
  ipRestrictions  String[] @default([])
  sessionDuration Int?    // Session duration in minutes
  
  // Usage tracking
  usageCount      Int     @default(0)
  successRate     Decimal @default(0) @db.Decimal(5, 2)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String   // User ID who created this flow
  
  org Org @relation("OrgProvisioningFlows", fields: [orgId], references: [id])
  
  @@unique([orgId, name])
  @@index([orgId, isActive])
  @@index([trigger])
}

/// TemporaryElevation provides just-in-time privilege elevation with auto-expiry and audit trails
model TemporaryElevation {
  id          String   @id @default(cuid())
  orgId       String
  userId      String   // User requesting elevation
  requestedBy String   // User ID who requested (could be self or manager)
  approvedBy  String?  // User ID who approved the elevation
  
  // Elevation details
  targetRole       String   // Role to temporarily elevate to
  currentRole      String   // User's current role
  reason           String   // Business justification for elevation
  requestedDuration Int     // Requested duration in minutes
  actualDuration   Int?     // Actual granted duration in minutes
  
  // Status and lifecycle
  status          ElevationStatus @default(PENDING)
  requestedAt     DateTime       @default(now())
  approvedAt      DateTime?      // When elevation was approved
  activatedAt     DateTime?      // When elevation became active
  expiresAt       DateTime?      // When elevation expires
  terminatedAt    DateTime?      // If manually terminated early
  
  // Security and audit
  approvalRequired Boolean @default(true)
  autoApproved    Boolean @default(false)
  emergencyAccess Boolean @default(false) // Emergency bypass flag
  ipAddress       String? // IP where request originated
  userAgent       String? // Browser/client info
  
  // Permissions snapshot
  grantedPermissions Json @default("{}") // Permissions granted during elevation
  previousPermissions Json @default("{}") // User's permissions before elevation
  
  // Monitoring and alerts
  usageTracked    Boolean @default(true)
  alertsSent      String[] @default([]) // Alert types sent
  reviewRequired  Boolean @default(false) // Post-elevation review needed
  
  // Termination details
  terminationReason String? // Why elevation was terminated
  terminatedBy     String? // Who terminated the elevation
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  org  Org  @relation("OrgTemporaryElevations", fields: [orgId], references: [id])
  user User @relation("UserTemporaryElevations", fields: [userId], references: [id])
  
  @@index([orgId, userId])
  @@index([status])
  @@index([expiresAt])
  @@index([requestedAt])
}

/// ElevationStatus tracks the lifecycle of temporary privilege elevation requests
enum ElevationStatus {
  PENDING     // Awaiting approval
  APPROVED    // Approved but not yet active
  ACTIVE      // Currently elevated
  EXPIRED     // Elevation period ended
  TERMINATED  // Manually terminated before expiry
  REJECTED    // Request was denied
  CANCELLED   // Cancelled by requester
}

/// ProviderConfig holds provider-level secrets and configuration separate from any organization.
/// These values are used for system integrations that the provider controls, such as SAM.gov or
/// Stripe secrets used when billing clients.  Only one row is typically used.  Use a simple
/// admin interface to update these values.
model ProviderConfig {
  id              String   @id @default(cuid())
  samApiKey       String?
  stripeSecretKey String?
  otherConfig     Json?    @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

/// PricingPlan defines how an organization is billed for leads. Each org can have only
/// one pricing plan record. A plan specifies the billing model (e.g. per-lead fixed fee)
/// and can include tiered structures or prepaid units via includedUnits and tiersJson.
model PricingPlan {
  // We keep FK as primary key to enforce 1:1 with Org
  orgId String @id
  /// Relation to organization (named to match Org.pricingPlan)
  org   Org    @relation("OrgPricingPlan", fields: [orgId], references: [id])

  /// Billing model used for this organization (per-lead, tiered, subscription, or hybrid)
  model         PricingModel @default(PER_LEAD_FIXED)
  /// ISO currency code (e.g. "usd")
  currency      String       @default("usd")
  /// Fixed unit price in cents for per-lead billing
  unitAmount    Int          @default(10000)
  /// JSON-encoded pricing tiers (used when model is TIERED or HYBRID)
  tiersJson     Json?
  /// Number of prepaid leads included before billing starts
  includedUnits Int          @default(0)
}

/// PricingModel enumerates the possible billing models for lead invoices.  The default is
/// PER_LEAD_FIXED which charges a flat fee per converted lead.  Additional models support
/// tiered pricing, subscription (monthly base fee), or hybrid structures.
enum PricingModel {
  PER_LEAD_FIXED
  TIERED
  SUBSCRIPTION
  HYBRID
}

/// LeadStatus defines the possible states of a lead in the CRM pipeline.
/// Tracks the complete journey from initial contact to final outcome.
enum LeadStatus {
  NEW                 // Initial lead, no contact made
  CONTACTED          // Initial contact made (call, email, etc.)
  QUALIFIED          // Lead shows interest and has budget/authority/need/timeline
  MEETING_SCHEDULED  // Meeting or call scheduled
  PROPOSAL_SENT      // Proposal or quote sent to prospect
  NEGOTIATION        // In negotiations, discussing terms
  WON                // Lead converted to customer (billable)
  CONVERTED          // Legacy status - equivalent to WON (backward compatibility)
  LOST               // Lead didn't convert, deal closed unsuccessfully
  NURTURING          // Lead not ready now but staying in touch for future
  FOLLOW_UP          // Requires follow-up action
  ON_HOLD            // Lead temporarily paused
  UNRESPONSIVE       // Lead not responding to communications
}

/// ActivityType defines the different types of interactions and communications
/// that can be logged for lead management and CRM tracking.
enum ActivityType {
  CALL_OUTBOUND      // Outbound phone call
  CALL_INBOUND       // Inbound phone call received  
  EMAIL_SENT         // Email sent to lead
  EMAIL_RECEIVED     // Email received from lead
  MEETING_SCHEDULED  // Meeting or appointment scheduled
  MEETING_COMPLETED  // Meeting or appointment completed
  PROPOSAL_SENT      // Proposal or quote sent
  CONTRACT_SENT      // Contract sent for signature
  FOLLOW_UP          // General follow-up activity
  NOTE               // Internal note or comment
  TASK_CREATED       // Task created for lead
  TASK_COMPLETED     // Task completed for lead
  STATUS_CHANGED     // Lead status changed
  DOCUMENT_SHARED    // Document or file shared
  PAYMENT_RECEIVED   // Payment received from customer
}

/// LeadActivity tracks all interactions, communications, and events
/// related to a specific lead for complete CRM functionality.
model LeadActivity {
  id          String       @id @default(cuid())
  leadId      String
  orgId       String
  userId      String       // User who performed the activity
  
  type        ActivityType
  title       String       // Brief title/summary of activity
  description String?      // Detailed description or notes
  
  // Scheduling fields for meetings and calls
  scheduledAt DateTime?    // When the activity is scheduled
  completedAt DateTime?    // When the activity was completed
  
  // Contact information for calls/emails
  contactMethod String?    // Phone, email, in-person, etc.
  duration      Int?       // Duration in minutes for calls/meetings
  
  // File attachments and links
  attachments   Json?      // Array of file references or URLs
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  lead        Lead         @relation("LeadActivities", fields: [orgId, leadId], references: [orgId, id], onDelete: Cascade)
  org         Org          @relation("OrgLeadActivities", fields: [orgId], references: [id])
  user        User         @relation("UserLeadActivities", fields: [orgId, userId], references: [orgId, id])
  
  @@index([leadId, createdAt])
  @@index([orgId, type])
  @@index([userId, createdAt])
}

/// LeadTask manages scheduled tasks, reminders, and follow-ups
/// for lead management and CRM workflow automation.
model LeadTask {
  id          String       @id @default(cuid())
  leadId      String
  orgId       String
  assignedTo  String       // User assigned to complete the task
  createdBy   String       // User who created the task
  
  title       String       // Task title
  description String?      // Task description or notes
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(PENDING)
  
  // Scheduling
  dueDate     DateTime?    // When task is due
  completedAt DateTime?    // When task was completed
  
  // Reminders
  reminderAt  DateTime?    // When to send reminder
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  lead        Lead         @relation("LeadTasks", fields: [orgId, leadId], references: [orgId, id], onDelete: Cascade)
  org         Org          @relation("OrgLeadTasks", fields: [orgId], references: [id])
  assignee    User         @relation("AssignedLeadTasks", fields: [orgId, assignedTo], references: [orgId, id])
  creator     User         @relation("CreatedLeadTasks", fields: [orgId, createdBy], references: [orgId, id])
  
  @@index([leadId, status])
  @@index([assignedTo, dueDate])
  @@index([orgId, status])
}

/// TaskPriority defines urgency levels for lead tasks and follow-ups
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

/// TaskStatus tracks the completion state of lead tasks
enum TaskStatus {
  PENDING     // Task not yet started
  IN_PROGRESS // Task currently being worked on
  COMPLETED   // Task finished successfully
  CANCELLED   // Task cancelled or no longer needed
  OVERDUE     // Task past due date
}

// AI Plan Tiers for Monetization - CLIENT SUBSCRIPTION TIERS
enum AiPlan {
  BASE    // MVP: Free lead generation, $100/conversion only
  PRO     // $97/month: Advanced AI, unlimited leads, priority support  
  ELITE   // $297/month: Market intelligence, priority RFPs, dedicated support
}

// Individual AI API call tracking for cost monitoring and analytics
model AiUsageEvent {
  id          String   @id @default(cuid())
  orgId       String
  userId      String?  // Optional user who triggered the call
  feature     String   // 'lead_analysis', 'rfp_strategy', 'pricing', 'response_gen'
  model       String   // 'gpt-4o-mini', etc
  tokensIn    Int      // Input tokens consumed
  tokensOut   Int      // Output tokens generated
  costUsd     Decimal  @db.Decimal(8, 6)  // Actual cost in USD (precise to $0.000001)
  creditsUsed Int      // Credits deducted from user's balance
  requestId   String?  // For request correlation and debugging
  createdAt   DateTime @default(now())

  org Org @relation("OrgAiUsageEvents", fields: [orgId], references: [id])

  @@index([orgId, createdAt])
  @@index([orgId, feature])
}

// Monthly AI usage rollups for dashboard and billing
model AiMonthlySummary {
  id          String   @id @default(cuid()) 
  orgId       String
  monthKey    String   // Format: "2025-01" for January 2025
  tokensIn    Int      @default(0)
  tokensOut   Int      @default(0)
  costUsd     Decimal  @db.Decimal(8, 2)  @default(0)
  creditsUsed Int      @default(0)
  callCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  org Org @relation("OrgAiMonthlySummaries", fields: [orgId], references: [id])

  @@unique([orgId, monthKey])
  @@index([monthKey])
}

// ===== MULTI-PORTAL BUSINESS OPERATING SYSTEM MODELS =====

/// EmployeeProfile extends User model with employee-specific data and ADP integration
model EmployeeProfile {
  id          String   @id @default(cuid())
  orgId       String
  userId      String   @unique // One-to-one with User
  
  // ADP Integration
  adpWorkerId String?  // ADP employee ID for payroll integration
  managerId   String?  // Reports to (User.id)
  
  // Mobile & Field Settings
  mobilePrefs Json     @default("{}")  // Mobile app preferences
  
  // Contact & Emergency Info
  emergencyContact Json? // Emergency contact information
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  org         Org           @relation("OrgEmployeeProfiles", fields: [orgId], references: [id])
  user        User          @relation("UserEmployeeProfile", fields: [orgId, userId], references: [orgId, id])
  timesheets  TimesheetEntry[] @relation("EmployeeTimesheets")
  jobAssignments JobAssignment[] @relation("EmployeeAssignments")
  issueReports IssueReport[] @relation("EmployeeIssueReports")
  trainingCompletions TrainingCompletion[] @relation("EmployeeTrainingCompletions")
  
  @@unique([orgId, id])  // Multi-tenant isolation
  @@unique([orgId, userId])  // One-to-one relation constraint
  @@index([orgId, adpWorkerId])
  @@index([userId])
}

/// WorkOrder represents enhanced work orders and customer projects (extended Job functionality)
model WorkOrder {
  id          String   @id @default(cuid())
  orgId       String
  customerId  String?
  
  // Work Order Details
  title       String
  description String?
  status      JobStatus @default(SCHEDULED)
  priority    JobPriority @default(MEDIUM)
  
  // Scheduling
  scheduledStartAt DateTime?
  scheduledEndAt   DateTime?
  actualStartAt    DateTime?
  actualEndAt      DateTime?
  
  // Location & Site Info
  jobSiteId   String?
  
  // Financial
  estimatedValue Decimal? @db.Decimal(12, 2)
  actualCost     Decimal? @db.Decimal(12, 2)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  org           Org             @relation("OrgWorkOrders", fields: [orgId], references: [id])
  customer      Customer?       @relation("CustomerWorkOrders", fields: [orgId, customerId], references: [orgId, id])
  jobSite       JobSite?        @relation("JobSiteWorkOrders", fields: [orgId, jobSiteId], references: [orgId, id])
  assignments   JobAssignment[] @relation("WorkOrderAssignments")
  checklists    JobChecklistItem[] @relation("WorkOrderChecklists")
  timesheets    TimesheetEntry[] @relation("WorkOrderTimesheets")
  issueReports  IssueReport[]   @relation("WorkOrderIssueReports")
  mediaAssets   MediaAsset[]    @relation("WorkOrderMedia")
  
  @@unique([orgId, id])  // Multi-tenant isolation
  @@index([orgId, status])
  @@index([customerId])
  @@index([scheduledStartAt])
}

/// JobSite defines geographic locations for geofenced time tracking
model JobSite {
  id          String   @id @default(cuid())
  orgId       String
  
  // Location Info
  name        String
  address     String
  city        String?
  state       String?
  zipCode     String?
  
  // Geofencing for time tracking
  latitude    Decimal? @db.Decimal(10, 8)  // GPS coordinates
  longitude   Decimal? @db.Decimal(11, 8)
  radiusMeters Int     @default(100)       // Geofence radius
  
  // Site Details
  accessInstructions String?
  emergencyContacts  Json?    @default("[]")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  org         Org      @relation("OrgJobSites", fields: [orgId], references: [id])
  workOrders  WorkOrder[] @relation("JobSiteWorkOrders")
  timesheets  TimesheetEntry[] @relation("JobSiteTimesheets")
  
  @@unique([orgId, id])  // Multi-tenant isolation
  @@index([orgId])
  @@index([latitude, longitude])
}

/// JobAssignment links employees to specific jobs with roles
model JobAssignment {
  id          String   @id @default(cuid())
  orgId       String
  jobId       String
  employeeId  String   // EmployeeProfile.id
  
  role        String   @default("worker")  // "lead", "worker", "supervisor"
  assignedAt  DateTime @default(now())
  unassignedAt DateTime?
  
  // Relations
  org         Org             @relation("OrgJobAssignments", fields: [orgId], references: [id])
  workOrder   WorkOrder       @relation("WorkOrderAssignments", fields: [orgId, jobId], references: [orgId, id])
  employee    EmployeeProfile @relation("EmployeeAssignments", fields: [orgId, employeeId], references: [orgId, id])
  
  @@unique([jobId, employeeId])
  @@index([orgId, employeeId])
  @@index([jobId])
}

/// TimesheetEntry tracks employee time with geolocation for job costing
model TimesheetEntry {
  id          String   @id @default(cuid())
  orgId       String
  employeeId  String   // EmployeeProfile.id
  jobId       String?  // Optional job association
  jobSiteId   String?  // Optional site association
  
  // Time Tracking
  clockInAt   DateTime
  clockOutAt  DateTime?
  breakMinutes Int     @default(0)
  
  // Geolocation Data
  clockInLat  Decimal? @db.Decimal(10, 8)
  clockInLng  Decimal? @db.Decimal(11, 8)
  clockOutLat Decimal? @db.Decimal(10, 8)
  clockOutLng Decimal? @db.Decimal(11, 8)
  
  // Device & Verification
  deviceInfo  Json?    // Device fingerprint for fraud prevention
  notes       String?
  status      TimesheetStatus @default(ACTIVE)
  
  // Approval Workflow
  approvedBy  String?  // User.id who approved
  approvedAt  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  org         Org             @relation("OrgTimesheets", fields: [orgId], references: [id])
  employee    EmployeeProfile @relation("EmployeeTimesheets", fields: [orgId, employeeId], references: [orgId, id])
  workOrder   WorkOrder?      @relation("WorkOrderTimesheets", fields: [orgId, jobId], references: [orgId, id])
  jobSite     JobSite?        @relation("JobSiteTimesheets", fields: [orgId, jobSiteId], references: [orgId, id])
  
  @@index([orgId, employeeId, clockInAt])
  @@index([jobId])
  @@index([clockInAt])
}

/// JobChecklistItem tracks completion of job tasks with photo documentation
model JobChecklistItem {
  id          String   @id @default(cuid())
  orgId       String
  jobId       String
  
  // Checklist Item
  title       String
  description String?
  required    Boolean  @default(false)
  sortOrder   Int      @default(0)
  
  // Completion Tracking
  status      ChecklistStatus @default(PENDING)
  completedBy String?  // EmployeeProfile.id
  completedAt DateTime?
  notes       String?
  photosCount Int      @default(0)  // Number of associated photos
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  org         Org          @relation("OrgJobChecklists", fields: [orgId], references: [id])
  workOrder   WorkOrder    @relation("WorkOrderChecklists", fields: [orgId, jobId], references: [orgId, id])
  mediaAssets MediaAsset[] @relation("ChecklistMedia")
  
  @@unique([orgId, id])  // Multi-tenant isolation
  @@index([orgId, jobId])
  @@index([status])
}

/// IssueReport tracks field problems and obstacles with photo documentation
model IssueReport {
  id          String      @id @default(cuid())
  orgId       String
  jobId       String?     // Optional job association
  reportedBy  String      // EmployeeProfile.id
  
  // Issue Details
  title       String
  description String
  severity    IssueSeverity @default(MEDIUM)
  category    String?     // "equipment", "site_access", "weather", etc.
  
  // Resolution Tracking
  status      IssueStatus @default(OPEN)
  resolvedBy  String?     // User.id who resolved
  resolvedAt  DateTime?
  resolution  String?
  
  // Location Context
  latitude    Decimal?    @db.Decimal(10, 8)
  longitude   Decimal?    @db.Decimal(11, 8)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  org         Org             @relation("OrgIssueReports", fields: [orgId], references: [id])
  workOrder   WorkOrder?      @relation("WorkOrderIssueReports", fields: [orgId, jobId], references: [orgId, id])
  reporter    EmployeeProfile @relation("EmployeeIssueReports", fields: [orgId, reportedBy], references: [orgId, id])
  mediaAssets MediaAsset[]    @relation("IssueMedia")
  
  @@unique([orgId, id])  // Multi-tenant isolation
  @@index([orgId, status])
  @@index([jobId])
  @@index([reportedBy])
}

/// MediaAsset stores photos, videos, and documents with metadata
model MediaAsset {
  id          String    @id @default(cuid())
  orgId       String
  uploadedBy  String    // User.id
  
  // File Information
  filename    String
  originalName String
  contentType String
  fileSize    Int       // Bytes
  url         String    // S3/R2 URL
  thumbnailUrl String?  // Thumbnail URL for images
  
  // Asset Context (explicit foreign keys instead of polymorphic)
  assetType   MediaType
  workOrderId String?   // Optional WorkOrder reference
  issueReportId String? // Optional IssueReport reference
  checklistItemId String? // Optional JobChecklistItem reference
  trainingModuleId String? // Optional TrainingModule reference
  
  // Metadata
  exifJson    Json?     @default("{}")  // EXIF data for photos
  description String?
  tags        String[]  @default([])
  
  // Geolocation (if available)
  latitude    Decimal?  @db.Decimal(10, 8)
  longitude   Decimal?  @db.Decimal(11, 8)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations (explicit FKs instead of polymorphic)
  org         Org                @relation("OrgMediaAssets", fields: [orgId], references: [id])
  workOrder   WorkOrder?         @relation("WorkOrderMedia", fields: [orgId, workOrderId], references: [orgId, id])
  issueReport IssueReport?       @relation("IssueMedia", fields: [orgId, issueReportId], references: [orgId, id])
  checklistItem JobChecklistItem? @relation("ChecklistMedia", fields: [orgId, checklistItemId], references: [orgId, id])
  trainingModule TrainingModule?  @relation("TrainingMedia", fields: [orgId, trainingModuleId], references: [orgId, id])
  
  @@index([orgId, workOrderId])
  @@index([orgId, issueReportId])
  @@index([orgId, checklistItemId])
  @@index([orgId, trainingModuleId])
  @@index([uploadedBy])
  @@index([createdAt])
}

/// TrainingModule defines HR training requirements and content
model TrainingModule {
  id            String   @id @default(cuid())
  orgId         String
  
  // Module Information
  title         String
  description   String?
  content       String?  // Training content/instructions
  
  // Requirements
  requiredForRoles String[] @default([])  // Array of Role enum values
  isActive      Boolean  @default(true)
  version       String   @default("1.0")
  
  // Completion Settings
  requiresQuiz  Boolean  @default(false)
  passingScore  Int?     // Minimum score to pass (if quiz required)
  validityDays  Int?     // Days before retraining required
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  org           Org                @relation("OrgTrainingModules", fields: [orgId], references: [id])
  completions   TrainingCompletion[] @relation("ModuleCompletions")
  mediaAssets   MediaAsset[]       @relation("TrainingMedia")
  
  @@unique([orgId, id])  // Multi-tenant isolation
  @@index([orgId, isActive])
  @@index([requiredForRoles])
}

/// TrainingCompletion tracks employee training completion and compliance
model TrainingCompletion {
  id          String   @id @default(cuid())
  orgId       String
  employeeId  String   // EmployeeProfile.id
  moduleId    String
  
  // Completion Data
  completedAt DateTime @default(now())
  score       Int?     // Quiz score (if applicable)
  passed      Boolean  @default(true)
  
  // Validity
  expiresAt   DateTime? // When retraining is required
  isValid     Boolean  @default(true)
  
  // Metadata
  timeSpentMinutes Int? // Time spent on training
  notes       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  org         Org             @relation("OrgTrainingCompletions", fields: [orgId], references: [id])
  employee    EmployeeProfile @relation("EmployeeTrainingCompletions", fields: [orgId, employeeId], references: [orgId, id])
  module      TrainingModule  @relation("ModuleCompletions", fields: [orgId, moduleId], references: [orgId, id])
  
  @@unique([employeeId, moduleId]) // One completion per employee per module
  @@index([orgId, isValid])
  @@index([expiresAt])
}

// ===== ENUM DEFINITIONS FOR NEW MODELS =====

enum JobStatus {
  SCHEDULED   // Job scheduled but not started
  IN_PROGRESS // Job currently being worked
  ON_HOLD     // Job temporarily paused
  COMPLETED   // Job finished successfully
  CANCELLED   // Job cancelled before completion
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TimesheetStatus {
  ACTIVE      // Currently clocked in
  COMPLETED   // Clocked out
  PENDING     // Awaiting approval
  APPROVED    // Approved by manager
  REJECTED    // Rejected for correction
}

enum ChecklistStatus {
  PENDING     // Not yet completed
  IN_PROGRESS // Partially completed
  COMPLETED   // Fully completed
  SKIPPED     // Marked as not applicable
}

enum IssueSeverity {
  LOW         // Minor issue, doesn't block work
  MEDIUM      // Moderate issue, may impact schedule
  HIGH        // Major issue, blocks current work
  CRITICAL    // Safety or emergency issue
}

enum IssueStatus {
  OPEN        // Issue reported, needs attention
  IN_PROGRESS // Being worked on
  RESOLVED    // Issue fixed
  CLOSED      // Issue closed without resolution
}

enum MediaType {
  PHOTO       // Images (JPEG, PNG, etc.)
  VIDEO       // Video files
  DOCUMENT    // PDFs, Word docs, etc.
  AUDIO       // Audio recordings
  OTHER       // Other file types
}

// ===== ENTERPRISE GOVERNANCE & POLICY MODELS =====

/// SecurityPolicy stores enterprise governance policies with SOC 2 compliance
model SecurityPolicy {
  id          String   @id @default(cuid())
  orgId       String
  category    PolicyCategory
  name        String   // e.g. "Password Policy", "MFA Policy"
  enabled     Boolean  @default(true)
  config      Json     // Policy configuration settings
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastUpdatedBy String? // User ID who last updated the policy
  
  org Org @relation("OrgSecurityPolicies", fields: [orgId], references: [id])
  
  @@unique([orgId, category, name])
  @@index([orgId, enabled])
}

/// FeatureModule tracks enabled platform features with usage and cost monitoring
model FeatureModule {
  id              String   @id @default(cuid())
  orgId           String
  moduleKey       String   // Unique identifier like 'ai_lead_scoring', 'sms_notifications'
  name            String   // Display name
  description     String?
  category        FeatureCategory
  enabled         Boolean  @default(false)
  usageLimit      Int?     // Usage limit (API calls, messages, etc.)
  costPerUnit     Decimal? @db.Decimal(8, 4) // Cost per usage unit in USD
  monthlyBudget   Int?     // Monthly budget limit in cents
  config          Json     @default("{}")  // Module-specific configuration
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  org         Org            @relation("OrgFeatureModules", fields: [orgId], references: [id])
  usageEvents FeatureUsage[] @relation("ModuleUsageEvents")
  
  @@unique([orgId, moduleKey])
  @@index([orgId, enabled])
  @@index([enabled, category])
}

/// FeatureUsage tracks individual usage events for billing and monitoring
model FeatureUsage {
  id          String   @id @default(cuid())
  orgId       String
  moduleId    String
  userId      String?  // User who triggered the usage
  amount      Int      // Usage amount (API calls, messages, etc.)
  costCents   Int      // Cost in cents
  metadata    Json?    // Additional usage metadata
  createdAt   DateTime @default(now())
  
  org    Org           @relation("OrgFeatureUsage", fields: [orgId], references: [id])
  module FeatureModule @relation("ModuleUsageEvents", fields: [moduleId], references: [id])
  
  @@index([orgId, moduleId, createdAt])
  @@index([createdAt])
}

/// OrganizationBudget manages feature usage budgets and alerts
model OrganizationBudget {
  id                 String   @id @default(cuid())
  orgId              String   @unique
  monthlyLimitCents  Int      @default(50000) // $500 default monthly limit
  alertThreshold     Int      @default(80)    // Alert at 80% usage
  autoDisable        Boolean  @default(false) // Auto-disable features when limit reached
  notifyOwners       Boolean  @default(true)  // Send email notifications
  currentSpendCents  Int      @default(0)     // Current month spending
  lastResetAt        DateTime @default(now()) // Last monthly reset
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  org Org @relation("OrgBudget", fields: [orgId], references: [id])
}

/// Integration manages external service connections (SSO, SCIM, webhooks, etc.)
model Integration {
  id            String   @id @default(cuid())
  orgId         String
  type          IntegrationType
  name          String   // Display name
  enabled       Boolean  @default(false)
  config        Json     @default("{}")  // Integration-specific config (encrypted secrets)
  metadata      Json?    // Additional metadata
  lastSyncAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  org Org @relation("OrgIntegrations", fields: [orgId], references: [id])
  
  @@unique([orgId, type, name])
  @@index([orgId, enabled])
  @@index([type, enabled])
}

/// SupportSession manages secure support access and impersonation
model SupportSession {
  id            String   @id @default(cuid())
  orgId         String
  supportUserId String   // Provider support user ID
  targetUserId  String?  // User being impersonated (if applicable)
  sessionType   SupportSessionType
  reason        String   // Justification for access
  consentGiven  Boolean  @default(false)
  consentAt     DateTime?
  startedAt     DateTime @default(now())
  expiresAt     DateTime // Auto-expiry time
  endedAt       DateTime?
  status        SupportSessionStatus @default(PENDING)
  metadata      Json?    // Session metadata
  
  org Org @relation("OrgSupportSessions", fields: [orgId], references: [id])
  
  @@index([orgId, status])
  @@index([supportUserId, status])
  @@index([expiresAt])
}

/// AuditEvent extends AuditLog with detailed enterprise audit requirements
model AuditEvent {
  id              String   @id @default(cuid())
  orgId           String
  userId          String?  // User who performed the action
  sessionId       String?  // Session ID for tracking
  action          String   // Action performed (login, create, update, delete, etc.)
  target          String   // What was acted upon (user, lead, policy, etc.)
  targetId        String?  // ID of the target entity
  details         Json?    // Detailed event information
  ipAddress       String?  // Source IP address
  userAgent       String?  // Browser/client information
  severity        AuditSeverity @default(INFO)
  category        AuditCategory @default(GENERAL)
  success         Boolean  @default(true)
  errorMessage    String? // Error details if action failed
  
  // Enterprise tamper-evidence fields
  hash            String?  // SHA-256 hash for integrity verification
  previousEventId String?  // ID of previous audit event for chain verification
  previousHash    String?  // Hash of previous event for chain integrity
  immutable       Boolean  @default(true) // Mark as immutable for compliance
  
  createdAt       DateTime @default(now())
  
  org Org @relation("OrgAuditEvents", fields: [orgId], references: [id])
  previousEvent AuditEvent? @relation("AuditChain", fields: [previousEventId], references: [id])
  nextEvents    AuditEvent[] @relation("AuditChain")
  
  @@index([orgId, createdAt])
  @@index([orgId, action])
  @@index([orgId, userId])
  @@index([createdAt])
  @@index([severity, createdAt])
  @@index([orgId, hash]) // For integrity verification
}

// ===== ENUMS FOR ENTERPRISE MODELS =====

enum PolicyCategory {
  AUTHENTICATION    // Password, MFA policies
  SECURITY         // Session, IP access control
  COMPLIANCE       // Data retention, residency
  NETWORK_SECURITY // IP allowlists, geo-blocking
  EMERGENCY        // Break-glass access
}

enum FeatureCategory {
  AI_ANALYTICS     // AI features and analytics
  AUTOMATION       // Workflow automation
  COMMUNICATION    // SMS, email, notifications
  INTEGRATION      // API access, webhooks
  MOBILE           // Mobile app features
  DEVELOPER_TOOLS  // API, SDKs
  MARKETING        // Email marketing, campaigns
}

enum IntegrationType {
  SSO_SAML         // SAML SSO integration
  SSO_OIDC         // OpenID Connect SSO
  SCIM             // SCIM user provisioning
  WEBHOOK          // Webhook endpoints
  OAUTH_APP        // OAuth application
  API_INTEGRATION  // Third-party API integration
  ACCOUNTING       // QuickBooks, Xero, etc.
  COMMUNICATION    // Slack, Teams, etc.
}

enum SupportSessionType {
  READ_ONLY        // View-only access
  IMPERSONATION    // Full user impersonation
  BREAK_GLASS      // Emergency access
  TROUBLESHOOTING  // Technical support
}

enum SupportSessionStatus {
  PENDING          // Awaiting consent/approval
  ACTIVE           // Currently active
  EXPIRED          // Session expired
  ENDED            // Manually ended
  CANCELLED        // Cancelled before start
}

enum AuditSeverity {
  INFO             // Informational events
  WARNING          // Warning events
  ERROR            // Error events
  CRITICAL         // Critical security events
}

enum AuditCategory {
  GENERAL          // General actions
  AUTHENTICATION   // Login, logout, password changes
  AUTHORIZATION    // Permission changes, role assignments
  DATA_ACCESS      // Data read operations
  DATA_MODIFICATION // Data create/update/delete
  POLICY_CHANGE    // Security policy changes
  ADMIN_ACTION     // Administrative actions
  SECURITY_EVENT   // Security-related events
}
